bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  d);	  work[i    +    2]    =    work[i    +    3]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	47	None	replace
3	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  *  j);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  *  j);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  *  j);	  work[i    +    2]    =    work[i    +    3]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	47	None	replace
4	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	37	None	replace
5	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	37	None	replace
6	[BUG]  [BUGGY]  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]);	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  carrière(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  carrière(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	carrière(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
8	[BUG]  [BUGGY]  carrière(MathUtils.SAFE_MIN  *  work[j  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  carrière(MathUtils.SAFE_MIN  *  work[j  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	carrière(MathUtils.SAFE_MIN  *  work[j  +  2])  &&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
9	[BUG]  [BUGGY]  carrière(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  carrière(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	carrière(MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
10	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
11	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
12	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
13	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  >>  ';'  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  >>  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  >>  ';'	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
14	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  2]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  2]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  2]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    4]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	42	None	replace
15	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  2]  /  tmp;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  2]  /  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  2]  /  tmp;	  work[i    +    2]    =    work[i    +    2]    /    tmp;    	non-compiled	[CE]  ';'  expected	41	None	replace
16	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  /  tmp;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  /  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  /  tmp;	  work[i    +    2]    =    work[i    +    2]    /    tmp;    	non-compiled	[CE]  ';'  expected	41	None	replace
17	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  /  tmp;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  /  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  /  tmp;	  work[i    +    2]    =    work[i    +    2]    /    tmp;    	non-compiled	[CE]  ';'  expected	41	None	replace
18	[BUG]  [BUGGY]  work[j  +  1]  =  work[i  +  2]  *  tmp;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  work[i  +  2]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  work[i  +  2]  *  tmp;	  work[i    +    1]    =    work[i    +    2]    *    tmp;    	non-compiled	[CE]  ';'  expected	40	None	replace
19	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  d;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  d;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *  d;	  work[i    +    1]    =    work[i    +    2]    *    tmp;    	non-compiled	[CE]  ';'  expected	40	None	replace
20	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    	non-compiled	[CE]  ';'  expected	62	None	replace
21	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]);	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    	non-compiled	[CE]  ';'  expected	62	None	replace
22	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  d)||(MathUtils.SAFE_SIZE  *  work[j]  +  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  d)||(MathUtils.SAFE_SIZE  *  work[j]  +  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  d)||(MathUtils.SAFE_SIZE  *  work[j]  +	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    +    	non-compiled	[CE]  ';'  expected	71	None	replace
23	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  0)||(MathUtils.SAFE_SIZE  *  work[j]  +  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  0)||(MathUtils.SAFE_SIZE  *  work[j]  +  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  0)||(MathUtils.SAFE_SIZE  *  work[j]  +	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    +    	non-compiled	[CE]  ';'  expected	71	None	replace
24	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  ||  MathUtils.SAFE_SIZE  *  work[j]  <  =  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  +  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  ||  MathUtils.SAFE_SIZE  *  work[j]  <  =  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  +  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  ||  MathUtils.SAFE_SIZE  *  work[j]  <  =  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  +	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    +    	non-compiled	[CE]  ';'  expected	71	None	replace
25	[BUG]  [BUGGY]  work[i  +  2]  =  -1.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  -1.0;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  -1.0;	  work[i    +    2]    =    -0.0;    	non-compiled	[CE]  ';'  expected	73	None	replace
26	[BUG]  [BUGGY]  work[i  +  2]  =  -1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  -1;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  -1;	  work[i    +    2]    =    -0.0;    	non-compiled	[CE]  ';'  expected	73	None	replace
27	[BUG]  [BUGGY]  work[i  +  1]  =  -0.0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  -0.0;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  -0.0;	  work[i    +    2]    =    -0.0;    	non-compiled	[CE]  ';'  expected	73	None	replace
28	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    >>    ';'    	non-compiled	[CE]  ';'  expected	43	None	replace
29	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    >>    ';'    	non-compiled	[CE]  ';'  expected	43	None	replace
30	[BUG]  [BUGGY]  work[j  +  1]  =  d;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  d;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  d;	  work[i    +    1]    =    d;    	non-compiled	[CE]  ';'  expected	30	None	replace
31	[BUG]  [BUGGY]  work[i  +  1]  =  1.0;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  1.0;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  1.0;	  work[i    +    1]    =    d;    	non-compiled	[CE]  ';'  expected	30	None	replace
32	[BUG]  [BUGGY]  work[j  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2);	  work[i    +    1]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	36	None	replace
33	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  toLERANCE_2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  toLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  toLERANCE_2);	  work[i    +    1]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	36	None	replace
34	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	50	None	replace
35	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	50	None	replace
36	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	50	None	replace
37	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  2]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  2]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  2]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    3]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	11	None	replace
38	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    3]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	11	None	replace
39	[BUG]  [BUGGY]  work[i  +  2]  =  d  +  work[i  +  3];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  d  +  work[i  +  3];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  d  +  work[i  +  3];	  work[i    +    2]    =    d    +    work[i    +    1];    	non-compiled	[CE]  ';'  expected	65	None	replace
40	[BUG]  [BUGGY]  work[i  +  2]  =  d  +  work[i  +  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  d  +  work[i  +  2];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  d  +  work[i  +  2];	  work[i    +    2]    =    d    +    work[i    +    1];    	non-compiled	[CE]  ';'  expected	65	None	replace
41	[BUG]  [BUGGY]  work[i  +  2]  =  d  *  work[i  +  1];  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  d  *  work[i  +  1];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  d  *  work[i  +  1];	  work[i    +    2]    =    d    +    work[i    +    1];    	non-compiled	[CE]  ';'  expected	65	None	replace
42	[BUG]  [BUGGY]  work[j  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2);	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	35	None	replace
43	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2);	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	35	None	replace
44	[BUG]  [BUGGY]  work[j  +  1]  =  2.0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  2.0;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  2.0;	  work[j    +    1]    =    1.0;    	non-compiled	[CE]  ';'  expected	1	None	replace
45	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	20	None	replace
46	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	20	None	replace
47	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	26	None	replace
48	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
49	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
50	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
51	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  *  j);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  *  j);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  *  j);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    *    d);    	non-compiled	[CE]  ';'  expected	48	None	replace
52	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  4]  *  d);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  4]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  4]  *  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    *    d);    	non-compiled	[CE]  ';'  expected	48	None	replace
53	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	54	None	replace
54	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	54	None	replace
55	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	54	None	replace
56	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	54	None	replace
57	[BUG]  [BUGGY]  d  *=  work[i  +  2]  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  2]  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  2]  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
58	[BUG]  [BUGGY]  d  *=  work[i  +  2]  -  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  2]  -  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  2]  -  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
59	[BUG]  [BUGGY]  d  *=  work[i  +  1]  >>  ';'  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  1]  >>  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  1]  >>  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
60	[BUG]  [BUGGY]  d  *=  work[i  +  2];  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  2];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  2];	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
61	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	57	None	replace
62	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	57	None	replace
63	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	57	None	replace
64	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	57	None	replace
65	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  >>  '  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  >>  '  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  >>  '	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    >>    '    	non-compiled	[CE]  ';'  expected	44	None	replace
66	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	55	None	replace
67	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	55	None	replace
68	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	55	None	replace
69	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    d);    	non-compiled	[CE]  ';'  expected	15	None	replace
70	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    d);    	non-compiled	[CE]  ';'  expected	15	None	replace
71	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  d);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  /  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    d);    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  d  =  work[i  +  4];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  4];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  4];	  d    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	12	None	replace
73	[BUG]  [BUGGY]  d  =  work[j  +  3];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[j  +  3];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[j  +  3];	  d    =    work[j    +    1];    	non-compiled	[CE]  ';'  expected	13	None	replace
74	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  *  j);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  *  j);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  3]  *  j);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    *    d);    	non-compiled	[CE]  ';'  expected	46	None	replace
75	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  3]  *  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  3]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  3]  *  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    *    d);    	non-compiled	[CE]  ';'  expected	46	None	replace
76	[BUG]  [BUGGY]  work[j  +  3]  =  work[i  +  2]  *  tmp;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  3]  =  work[i  +  2]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  3]  =  work[i  +  2]  *  tmp;	  work[j    +    2]    =    work[i    +    2]    *    tmp;    	non-compiled	[CE]  ';'  expected	39	None	replace
77	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	60	None	replace
78	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	60	None	replace
79	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  3]  *  tmp;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  3]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  3]  *  tmp;	  work[i    +    2]    =    work[i    +    3]    *    tmp;    	non-compiled	[CE]  ';'  expected	58	None	replace
80	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  1]  *  tmp;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  1]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  1]  *  tmp;	  work[i    +    2]    =    work[i    +    3]    *    tmp;    	non-compiled	[CE]  ';'  expected	58	None	replace
81	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  (work[i  +  2]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  (work[i  +  2]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *  (work[i  +  2]  /  TOLERANCE_2  *  d);	  work[i    +    1]    =    work[i    +    1]    *    (work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	10	None	replace
82	[BUG]  [BUGGY]  work[j  +  1]  =  work[i  +  1]  *  (work[i  +  2]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  work[i  +  1]  *  (work[i  +  2]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  work[i  +  1]  *  (work[i  +  2]  /  TOLERANCE_2  *  d);	  work[i    +    1]    =    work[i    +    1]    *    (work[i    +    2]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	10	None	replace
83	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  *  j);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  *  j);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  *  j);	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	16	None	replace
84	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	68	None	replace
85	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	68	None	replace
86	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	68	None	replace
87	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	67	None	replace
88	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	67	None	replace
89	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	67	None	replace
90	[BUG]  [BUGGY]  work[j  +  1]  =  -1.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  -1.0;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  -1.0;	  work[j    +    2]    =    -1.0;    	non-compiled	[CE]  ';'  expected	7	None	replace
91	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	19	None	replace
92	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	19	None	replace
93	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	19	None	replace
94	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	19	None	replace
95	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
96	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
97	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
98	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	51	None	replace
99	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	51	None	replace
100	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	27	None	replace
101	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	27	None	replace
102	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	56	None	replace
103	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	56	None	replace
104	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	56	None	replace
105	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  *  j);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  *  j);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  *  j);	  work[i    +    1]    =    work[i    +    2]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	17	None	replace
106	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  /(work[i  +  2]  *  d);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  /(work[i  +  2]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  /(work[i  +  2]  *  d);	  work[i    +    1]    =    work[i    +    2]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	17	None	replace
107	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	64	None	replace
108	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	64	None	replace
109	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[j]  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[j]  -  1);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(10,  work[j]  -  1);	  d    =    work[i    +    1]    *    Math.pow(10,    work[j]);    	non-compiled	[CE]  ';'  expected	32	None	replace
110	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[j]  -  2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[j]  -  2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(10,  work[j]  -  2);	  d    =    work[i    +    1]    *    Math.pow(10,    work[j]);    	non-compiled	[CE]  ';'  expected	32	None	replace
111	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[0]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[0]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(10,  work[0]);	  d    =    work[i    +    1]    *    Math.pow(10,    work[j]);    	non-compiled	[CE]  ';'  expected	32	None	replace
112	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
113	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
114	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]!=  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]!=  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]!=  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';'	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
115	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  ';	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
116	[BUG]  [BUGGY]  d  =  work[j  +  1]  *  tmp;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[j  +  1]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[j  +  1]  *  tmp;	  d    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	76	None	replace
117	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  tmp;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  2]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  2]  *  tmp;	  d    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	76	None	replace
118	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  TOLERANCE_2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  TOLERANCE_2;	  d    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	76	None	replace
119	[BUG]  [BUGGY]  work[j  +  1]  =  work[i  +  1]  *  tmp;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  work[i  +  1]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  work[i  +  1]  *  tmp;	  work[i    +    1]    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	59	None	replace
120	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  ||(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	28	None	replace
121	[BUG]  [BUGGY]  ||(work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  ||(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	28	None	replace
122	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	6	None	replace
123	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	18	None	replace
124	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	18	None	replace
125	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  d)||(MathUtils.SAFE_SIZE  *  work[j]  &	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    &    	non-compiled	[CE]  ';'  expected	70	None	replace
126	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  0)||(MathUtils.SAFE_SIZE  *  work[j]  &  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  0)||(MathUtils.SAFE_SIZE  *  work[j]  &  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  =  0)||(MathUtils.SAFE_SIZE  *  work[j]  &	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    &    	non-compiled	[CE]  ';'  expected	70	None	replace
127	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  ||  MathUtils.SAFE_SIZE  *  work[j]  <  =  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  ||  MathUtils.SAFE_SIZE  *  work[j]  <  =  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  ||  MathUtils.SAFE_SIZE  *  work[j]  <  =  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    &    	non-compiled	[CE]  ';'  expected	70	None	replace
128	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	49	None	replace
129	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	49	None	replace
130	[BUG]  [BUGGY]  work[j  +  1]  =  -1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  -1;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  -1;	  work[j    +    1]    =    -0.0;    	non-compiled	[CE]  ';'  expected	9	None	replace
131	[BUG]  [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  tmp);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  tmp);  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i]  =  Math.max(work[i  +  2]  *  tmp);	  work[i]    =    Math.max(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	14	None	replace
132	[BUG]  [BUGGY]  work[i]  =  Math.max(work[i  +  2]  /  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i]  =  Math.max(work[i  +  2]  /  d);  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i]  =  Math.max(work[i  +  2]  /  d);	  work[i]    =    Math.max(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	14	None	replace
133	[BUG]  [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  j);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  j);  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i]  =  Math.max(work[i  +  2]  *  j);	  work[i]    =    Math.max(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	14	None	replace
134	[BUG]  [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  TOLERANCE_2  /  d);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  TOLERANCE_2  /  d);  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i]  =  Math.max(work[i  +  2]  *  TOLERANCE_2  /  d);	  work[i]    =    Math.max(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	14	None	replace
135	[BUG]  [BUGGY]  work[j  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    3]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	61	None	replace
136	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  j  +  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  j  +  2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  j  +  2;	  d    =    work[i    +    1]    *    j;    	non-compiled	[CE]  ';'  expected	52	None	replace
137	[BUG]  [BUGGY]  work[j  +  3]  =  d;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  3]  =  d;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  3]  =  d;	  work[j    +    2]    =    d;    	non-compiled	[CE]  ';'  expected	31	None	replace
138	[BUG]  [BUGGY]  work[j  +  2]  =  0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  2]  =  0;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  2]  =  0;	  work[j    +    2]    =    -1;    	non-compiled	[CE]  ';'  expected	8	None	replace
139	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
140	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  MAJORANCE_2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  MAJORANCE_2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  MAJORANCE_2;	  d    =    work[i    +    1]    *    j;    	non-compiled	[CE]  ';'  expected	52	None	replace
141	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  *  TOLERANCE_2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  *  TOLERANCE_2;	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	16	None	replace
142	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    >>    '    	non-compiled	[CE]  ';'  expected	44	None	replace
143	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    >>    '    	non-compiled	[CE]  ';'  expected	44	None	replace
144	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2)+  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2)+  1;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  /  TOLERANCE_2)+  1;	  work[i    +    2]    =    work[i    +    3]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	61	None	replace
145	[BUG]  [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  ==  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_MIN  *  work[j]  ==  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_MIN  *  work[j]  ==  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  ||(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	28	None	replace
146	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	54	None	replace
147	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2)+  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2)+  1;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  2]  /  TOLERANCE_2)+  1;	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	35	None	replace
148	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
149	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
150	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
151	[BUG]  [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i]  =  Math.max(work[i  +  2]  *  TOLERANCE_2);  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i]  =  Math.max(work[i  +  2]  *  TOLERANCE_2);	  work[i]    =    Math.max(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	14	None	replace
152	[BUG]  [BUGGY]  work[i]  =  Math.max(work[i  +  1]  *  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i]  =  Math.max(work[i  +  1]  *  d);  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i]  =  Math.max(work[i  +  1]  *  d);	  work[i]    =    Math.max(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	14	None	replace
153	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  3]  *  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  3]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  3]  *  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    *    d);    	non-compiled	[CE]  ';'  expected	46	None	replace
154	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  4]  *  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  4]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  4]  *  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    *    d);    	non-compiled	[CE]  ';'  expected	46	None	replace
155	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	21	None	replace
156	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	21	None	replace
157	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
158	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
159	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    &    	non-compiled	[CE]  ';'  expected	70	None	replace
160	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  &	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    &    	non-compiled	[CE]  ';'  expected	70	None	replace
161	[BUG]  [BUGGY]  work[i  +  1]  =  d  +  work[i  +  2];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  d  +  work[i  +  2];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  d  +  work[i  +  2];	  work[i    +    1]    =    d;    	non-compiled	[CE]  ';'  expected	30	None	replace
162	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	50	None	replace
163	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	57	None	replace
164	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >=  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	18	None	replace
165	[BUG]  [BUGGY]  work[i  +  3]  =  1.0;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  3]  =  1.0;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  3]  =  1.0;	  work[i    +    2]    =    1.0;    	non-compiled	[CE]  ';'  expected	25	None	replace
166	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  2]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	22	None	replace
167	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  +  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  +  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  <  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  +	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    +    	non-compiled	[CE]  ';'  expected	71	None	replace
168	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	51	None	replace
169	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	51	None	replace
170	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    3]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	11	None	replace
171	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *  (work[i  +  3]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    3]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	11	None	replace
172	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  4]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  4]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  4]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	37	None	replace
173	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  1]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  1]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  1]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	37	None	replace
174	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  TOLERANCE_2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *  TOLERANCE_2;	  work[i    +    1]    =    work[i    +    2]    *    tmp;    	non-compiled	[CE]  ';'  expected	40	None	replace
175	[BUG]  [BUGGY]  work[i  +  1]  =  work[j  +  2]  *  tmp;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[j  +  2]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[j  +  2]  *  tmp;	  work[i    +    1]    =    work[i    +    2]    *    tmp;    	non-compiled	[CE]  ';'  expected	40	None	replace
176	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	68	None	replace
177	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	68	None	replace
178	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  '  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  '  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  >>  '	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
179	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  4]  *  d);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  4]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  4]  *  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    *    d);    	non-compiled	[CE]  ';'  expected	48	None	replace
180	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  3]  *  tmp;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  3]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  3]  *  tmp;	  work[i    +    1]    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	59	None	replace
181	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  /  tmp;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  /  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  /  tmp;	  work[i    +    1]    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	59	None	replace
182	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	67	None	replace
183	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  >=  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	67	None	replace
184	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	67	None	replace
185	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  *  TOLERANCE_2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *(work[i  +  2]  *  TOLERANCE_2;	  work[i    +    2]    =    work[i    +    3]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	47	None	replace
186	[BUG]  [BUGGY]  d  *=  work[i  +  1]  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  1]  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  1]  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
187	[BUG]  [BUGGY]  d  *=  work[i  +  3]  ';'  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  3]  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  3]  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
188	[BUG]  [BUGGY]  d  *=  work[j  >>  ';'  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[j  >>  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[j  >>  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
189	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    4]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	42	None	replace
190	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    4]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	42	None	replace
191	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *  (work[i  +  4]  /  TOLERANCE_2  *  d);	  work[i    +    2]    =    work[i    +    2]    *    (work[i    +    4]    /    TOLERANCE_2    *    d);    	non-compiled	[CE]  ';'  expected	42	None	replace
192	[BUG]  [BUGGY]  work[i  +  3]  =  work[i  +  2]  /  tmp;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  3]  =  work[i  +  2]  /  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  3]  =  work[i  +  2]  /  tmp;	  work[i    +    2]    =    work[i    +    2]    /    tmp;    	non-compiled	[CE]  ';'  expected	41	None	replace
193	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  4]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  4]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  4]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	60	None	replace
194	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4]  *(work[i  +  3]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  4]  *(work[i  +  3]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  4]  *(work[i  +  3]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    4]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	60	None	replace
195	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  2]  *(work[i  +  4]  /  d);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    2]    /    d);    	non-compiled	[CE]  ';'  expected	15	None	replace
196	[BUG]  [BUGGY]  work[j  +  1]  =  -2.0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[j  +  1]  =  -2.0;  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[j  +  1]  =  -2.0;	  work[j    +    1]    =    -0.0;    	non-compiled	[CE]  ';'  expected	9	None	replace
197	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  4]  *  tmp;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  4]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  4]  *  tmp;	  work[i    +    2]    =    work[i    +    3]    *    tmp;    	non-compiled	[CE]  ';'  expected	58	None	replace
198	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	6	None	replace
199	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    =    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	6	None	replace
200	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2)+  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2)+  1;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  *(work[i  +  2]  /  TOLERANCE_2)+  1;	  work[i    +    1]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	36	None	replace
201	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
202	[BUG]  [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	((  MathUtils.SAFE_MIN  *  work[i  +  2]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
203	[BUG]  [BUGGY]  work[i  +  1]  =  d  +  work[i  +  1];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  d  +  work[i  +  1];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  d  +  work[i  +  1];	  work[i    +    2]    =    d    +    work[i    +    1];    	non-compiled	[CE]  ';'  expected	65	None	replace
204	[BUG]  [BUGGY]  work[i  +  2]  =  work[i  +  3];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  2]  =  work[i  +  3];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  2]  =  work[i  +  3];	  work[i    +    2]    =    d    +    work[i    +    1];    	non-compiled	[CE]  ';'  expected	65	None	replace
205	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
206	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
207	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	75	None	replace
208	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(4,  work[j]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(4,  work[j]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(4,  work[j]);	  d    =    work[i    +    1]    *    Math.pow(3,    work[j]);    	non-compiled	[CE]  ';'  expected	33	None	replace
209	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  3]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  *(work[i  +  3]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  *(work[i  +  3]  /  TOLERANCE_2);	  work[i    +    2]    =    work[i    +    2]    *(work[i    +    3]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	37	None	replace
210	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  j  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  j  +  1;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  j  +  1;	  d    =    work[i    +    1]    *    j;    	non-compiled	[CE]  ';'  expected	52	None	replace
211	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	55	None	replace
212	[BUG]  [BUGGY]  d  =  work[j  +  1]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[j  +  1]  *  TOLERANCE_2;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[j  +  1]  *  TOLERANCE_2;	  d    =    work[j    +    1];    	non-compiled	[CE]  ';'  expected	13	None	replace
213	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	56	None	replace
214	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	57	None	replace
215	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
216	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[j]	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]    	non-compiled	[CE]  ';'  expected	23	None	replace
217	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[j    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    work[    	non-compiled	[CE]  ';'  expected	19	None	replace
218	[BUG]  [BUGGY]  AssertionFailedToName(work[i  +  2]  },  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  AssertionFailedToName(work[i  +  2]  },  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	AssertionFailedToName(work[i  +  2]  },  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
219	[BUG]  [BUGGY]  AssertionFailedToName(work[i  +  2]  },  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  AssertionFailedToName(work[i  +  2]  },  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	AssertionFailedToName(work[i  +  2]  },  work[i  +  2]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[j]);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
220	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
221	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  work[	  if((    MathUtils.SAFE_MIN    *    work[i    +    1]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    1]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	63	None	replace
222	[BUG]  [BUGGY]  ||(MathUtils.SAFE_TOP  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  ||(MathUtils.SAFE_TOP  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	||(MathUtils.SAFE_TOP  *  work[j]  <  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  work[	  ||(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    work[    	non-compiled	[CE]  ';'  expected	28	None	replace
223	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  =  0)&&(MathUtils.SAFE_MIN  *  work[j]  <  =  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  3]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    =    0)&&(MathUtils.SAFE_MIN    *    work[j]    <    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    3]    /    	non-compiled	[CE]  ';'  expected	54	None	replace
224	[BUG]  [BUGGY]  d  *=  work[i  +  2]  }  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  *=  work[i  +  2]  }  ';'  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  *=  work[i  +  2]  }  ';'	  d    *=    work[i    >>    ';'    	non-compiled	[CE]  ';'  expected	29	None	replace
225	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  ==  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
226	[BUG]  [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  (MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]  [BUGGY]      d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	(MathUtils.SAFE_SIZE  *  work[i]  &&  MathUtils.SAFE_SIZE  *  work[j]  >=  TOLERANCE_2  *  d)||(MathUtils.SAFE_SIZE  *  work[j]	  (MathUtils.SAFE_SIZE    *    work[i]    &&    MathUtils.SAFE_SIZE    *    work[j]    <    =    TOLERANCE_2    *    d)||(MathUtils.SAFE_SIZE    *    work[j]    	non-compiled	[CE]  ';'  expected	69	None	replace
227	[BUG]  [BUGGY]  work[i  +  1]  =  work[j  +  1]  *  tmp;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[j  +  1]  *  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[j  +  1]  *  tmp;	  work[i    +    1]    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	59	None	replace
228	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(1,  work[i]);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(1,  work[i]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(1,  work[i]);	  d    =    work[i    +    1]    *    Math.pow(1,    work[j]);    	non-compiled	[CE]  ';'  expected	34	None	replace
229	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(2,  work[i]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(2,  work[i]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(2,  work[i]);	  d    =    work[i    +    1]    *    Math.pow(2,    work[j]);    	non-compiled	[CE]  ';'  expected	53	None	replace
230	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  /(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  /(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  /(work[i  +  2]  /  TOLERANCE_2);	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	35	None	replace
231	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  tmp;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  /  tmp;  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  /  tmp;	  d    =    work[i    +    1]    *    tmp;    	non-compiled	[CE]  ';'  expected	76	None	replace
232	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[i]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  d  =  work[i  +  1]  *  Math.pow(10,  work[i]);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	d  =  work[i  +  1]  *  Math.pow(10,  work[i]);	  d    =    work[i    +    1]    *    Math.pow(10,    work[j]);    	non-compiled	[CE]  ';'  expected	32	None	replace
233	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[i  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  1]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	50	None	replace
234	[BUG]  [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	if((  MathUtils.SAFE_MIN  *  work[j  +  1]  <  0)&&(MathUtils.SAFE_MIN  *  work[j]  >  0))  {  final  double  tmp  =  work[i  +  2]  *  (work[i  +  2]  /	  if((    MathUtils.SAFE_MIN    *    work[i    +    2]    <    0)&&(MathUtils.SAFE_MIN    *    work[j]    >    0))    {    final    double    tmp    =    work[i    +    2]    *    (work[i    +    2]    /    	non-compiled	[CE]  ';'  expected	50	None	replace
235	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  1]  /(work[i  +  2]  *  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  1]  /(work[i  +  2]  *  d);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  1]  /(work[i  +  2]  *  d);	  work[i    +    1]    =    work[i    +    1]    *(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	16	None	replace
236	[BUG]  [BUGGY]  work[i  +  1]  =  work[i  +  2]  /(work[i  +  2]  /  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  1]  =  work[i  +  2]  /(work[i  +  2]  /  TOLERANCE_2);  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  1]  =  work[i  +  2]  /(work[i  +  2]  /  TOLERANCE_2);	  work[i    +    1]    =    work[i    +    2]    *(work[i    +    2]    /    TOLERANCE_2);    	non-compiled	[CE]  ';'  expected	36	None	replace
237	[BUG]  [BUGGY]  work[i  +  3]  =  d  +  work[i  +  2];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  if  (work[i]  <=  TOLERANCE_2  *  d)  {  work[i]  =  -0.0;  work[j]  =  d;      [BUGGY]  work[i  +  3]  =  d  +  work[i  +  2];  [BUGGY]      work[j  +  2]  =  0.0;  d  =  work[i  +  2];  }  else  if  ((MathUtils.SAFE_MIN  *  work[i  +  2]  <  work[j])  &&  (MathUtils.SAFE_MIN  *  work[j]  <  work[i  +  2]))  {  final  double  tmp  =  work[i  +  2]  /  work[j];  work[j  +  2]  =  work[i]  *  tmp;  d  *=  tmp;  }  else  {  work[j  +  2]  =  work[i  +  2]  *  (work[i]  /  work[j]);  d  *=  work[i  +  2]  /  work[j];  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	959	959	1	replace	work[i  +  3]  =  d  +  work[i  +  2];	  work[i    +    3]    =    d;    	non-compiled	[CE]  ';'  expected	45	None	replace
