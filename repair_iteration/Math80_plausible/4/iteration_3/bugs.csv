bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  d  =  work[i]  /  2.0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  /  2.0;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  /  2.0;	  d    =    work[i]    -    2.0;    	non-compiled	[CE]  ';'  expected	28	None	replace
2	[BUG]  [BUGGY]  d  =  work[i  +  2]  -  2.0;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  -  2.0;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  -  2.0;	  d    =    work[i]    -    2.0;    	non-compiled	[CE]  ';'  expected	28	None	replace
3	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  d;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  *  d;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  *  d;	  d    =    work[i    +    2]    *    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  *  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  *  1;	  d    =    work[i    +    1]    +    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
5	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  /  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  /  1;	  d    =    work[i    +    1]    +    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
6	[BUG]  [BUGGY]  d  =  work[i  +  1]  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  -  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  -  1;	  d    =    work[i    +    1]    +    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
7	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_2);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_2);  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_2);	  d    *=    work[i]    /(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	32	None	replace
8	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  D);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  D);  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  *  D);	  d    *=    work[i]    /(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	32	None	replace
9	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_2;	  d    *=    work[i]    /(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	32	None	replace
10	[BUG]  [BUGGY]  work[i  +  1]  =  -1.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i  +  1]  =  -1.0;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i  +  1]  =  -1.0;	  work[i    +    1]    =    -0.0;    	non-compiled	[CE]  ';'  expected	33	None	replace
11	[BUG]  [BUGGY]  work[i  +  1]  =  -1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i  +  1]  =  -1;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i  +  1]  =  -1;	  work[i    +    1]    =    -0.0;    	non-compiled	[CE]  ';'  expected	33	None	replace
12	[BUG]  [BUGGY]  work[i  +  1]  =  -2.0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i  +  1]  =  -2.0;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i  +  1]  =  -2.0;	  work[i    +    1]    =    -0.0;    	non-compiled	[CE]  ';'  expected	33	None	replace
13	[BUG]  [BUGGY]  work[i]  -=  work[i  +  2]  /  TOLERANCE_2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i]  -=  work[i  +  2]  /  TOLERANCE_2;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i]  -=  work[i  +  2]  /  TOLERANCE_2;	  work[i]    -=    work[i    +    2]    *    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	24	None	replace
14	[BUG]  [BUGGY]  work[i]  -=  work[i  +  2]  *  d;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i]  -=  work[i  +  2]  *  d;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i]  -=  work[i  +  2]  *  d;	  work[i]    -=    work[i    +    2]    *    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	24	None	replace
15	[BUG]  [BUGGY]  work[i]  -=  work[i  +  1]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i]  -=  work[i  +  1]  *  TOLERANCE_2;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i]  -=  work[i  +  1]  *  TOLERANCE_2;	  work[i]    -=    work[i    +    2]    *    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	24	None	replace
16	[BUG]  [BUGGY]  work[i  +  2]  =  -2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i  +  2]  =  -2;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i  +  2]  =  -2;	  work[i    +    2]    =    -1;    	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  d  =  work[i]  /  2;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  /  2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  /  2;	  d    =    work[i]    -    2;    	non-compiled	[CE]  ';'  expected	27	None	replace
18	[BUG]  [BUGGY]  d  =  work[i]  %  2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  %  2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  %  2;	  d    =    work[i]    -    2;    	non-compiled	[CE]  ';'  expected	27	None	replace
19	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  work[i  +  2];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  /  work[i  +  2];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  /  work[i  +  2];	  d    =    work[i    +    1]    -    work[i    +    2];    	non-compiled	[CE]  ';'  expected	38	None	replace
20	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  work[i  +  2];  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  *  work[i  +  2];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  *  work[i  +  2];	  d    =    work[i    +    1]    -    work[i    +    2];    	non-compiled	[CE]  ';'  expected	38	None	replace
21	[BUG]  [BUGGY]  d  =  work[i  +  2]  -  work[i  +  2];  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  -  work[i  +  2];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  -  work[i  +  2];	  d    =    work[i    +    1]    -    work[i    +    2];    	non-compiled	[CE]  ';'  expected	38	None	replace
22	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  <  <  TOLERANCE_2);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  <  <  TOLERANCE_2);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /(work[i  +  2]  <  <  TOLERANCE_2);	  d    *=    work[i    +    1]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	1	None	replace
23	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  +  1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  +  1]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /(work[i  +  2]  +  1]);	  d    *=    work[i    +    1]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	1	None	replace
24	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  /  2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  /  2;	  d    =    work[i    +    1]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	14	None	replace
25	[BUG]  [BUGGY]  d  =  work[i]  /  work[i  +  1];  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  /  work[i  +  1];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  /  work[i  +  1];	  d    =    work[i]    -    work[i    +    1];    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  d  *=  work[i  +  4]  /(work[i  +  2]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  4]  /(work[i  +  2]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  4]  /(work[i  +  2]);	  d    *=    work[i    +    3]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	3	None	replace
27	[BUG]  [BUGGY]  d  =  work[i  +  2]  /  TOLERANCE_2  *  d;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  /  TOLERANCE_2  *  d;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  /  TOLERANCE_2  *  d;	  d    =    work[i    +    2]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	13	None	replace
28	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  1]  +  2]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  1]  +  2]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  1]  +  2]);	  d    *=    work[i]    /(work[i    +    1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
29	[BUG]  [BUGGY]  d  =  work[i  +  3]  /  TOLERANCE_2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  3]  /  TOLERANCE_2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  3]  /  TOLERANCE_2;	  d    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	30	None	replace
30	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  3);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  3);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  <  <  3);	  d    *=    work[i]    /(work[i    +    2]    }    );    	non-compiled	[CE]  ';'  expected	37	None	replace
31	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  1);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  <  <  1);	  d    *=    work[i]    /(work[i    +    2]    }    );    	non-compiled	[CE]  ';'  expected	37	None	replace
32	[BUG]  [BUGGY]  d  *=  work[i  +  2]  /(work[i  +  1]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  2]  /(work[i  +  1]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  2]  /(work[i  +  1]);	  d    *=    work[i    +    2]    /(work[i    +    3]);    	non-compiled	[CE]  ';'  expected	2	None	replace
33	[BUG]  [BUGGY]  d  =  work[i  +  2]  /  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  /  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  /  1;	  d    =    work[i]    /    1;    	non-compiled	[CE]  ';'  expected	26	None	replace
34	[BUG]  [BUGGY]  d  =  work[i]  *  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  *  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  *  1;	  d    =    work[i]    /    1;    	non-compiled	[CE]  ';'  expected	26	None	replace
35	[BUG]  [BUGGY]  d  =  work[i  +  2]  -  0.01;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  -  0.01;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  -  0.01;	  d    =    work[i    +    2]    -    1;    	non-compiled	[CE]  ';'  expected	36	None	replace
36	[BUG]  [BUGGY]  d  =  work[i  +  2]  *  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  *  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  *  1;	  d    =    work[i    +    2]    -    1;    	non-compiled	[CE]  ';'  expected	36	None	replace
37	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  3]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  3]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  <  <  3]);	  d    *=    work[i]    /(work[i    +    2]    <    <    1]);    	non-compiled	[CE]  ';'  expected	29	None	replace
38	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  4]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  4]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  <  <  4]);	  d    *=    work[i]    /(work[i    +    2]    <    <    1]);    	non-compiled	[CE]  ';'  expected	29	None	replace
39	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  16]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  16]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  <  <  16]);	  d    *=    work[i]    /(work[i    +    2]    <    <    1]);    	non-compiled	[CE]  ';'  expected	29	None	replace
40	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  -  1]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  -  1]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  -  1]);	  d    *=    work[i]    /(work[i    +    2]    +    1]);    	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /  (d  +  work[i  +  3]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /  (d  +  work[i  +  3]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /  (d  +  work[i  +  3]);	  d    *=    work[i    +    1]    /    (d    +    work[i    +    2]);    	non-compiled	[CE]  ';'  expected	25	None	replace
42	[BUG]  [BUGGY]  d  =  work[i]  /  work[i  +  3];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  /  work[i  +  3];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  /  work[i  +  3];	  d    =    work[i]    -    work[i    +    3];    	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  d  =  work[i  +  1]  *  d;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  *  d;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  *  d;	  d    =    work[i    +    1]    *    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	15	None	replace
44	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  4]);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  4]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  4]);	  d    *=    work[i]    /(work[i    +    3]);    	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  d  *=  work[i  +  2]  /  (d  +  work[i  +  1]);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  2]  /  (d  +  work[i  +  1]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  2]  /  (d  +  work[i  +  1]);	  d    *=    work[i    +    1]    /    (d    +    work[i    +    1]);    	non-compiled	[CE]  ';'  expected	34	None	replace
46	[BUG]  [BUGGY]  d  =  work[i]  *  work[i  +  2];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  *  work[i  +  2];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  *  work[i  +  2];	  d    =    work[i]    /    work[i    +    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  work[i  +  2]  =  -10.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i  +  2]  =  -10.0;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i  +  2]  =  -10.0;	  work[i    +    2]    =    -1.0;    	non-compiled	[CE]  ';'  expected	16	None	replace
48	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  8]);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  <  <  8]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  <  <  8]);	  d    *=    work[i]    /(work[i    +    2]    <    <    1]);    	non-compiled	[CE]  ';'  expected	29	None	replace
49	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  }  -  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  }  -  1);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  }  -  1);	  d    *=    work[i]    /(work[i    +    2]    }    );    	non-compiled	[CE]  ';'  expected	37	None	replace
50	[BUG]  [BUGGY]  d  =  work[i  +  2]  /  2.0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  /  2.0;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  /  2.0;	  d    =    work[i    +    2]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	13	None	replace
51	[BUG]  [BUGGY]  d  =  work[i  +  2]  /  3;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  /  3;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  /  3;	  d    =    work[i    +    2]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	13	None	replace
52	[BUG]  [BUGGY]  d  *=  work[i  +  3]  /(work[i  +  4]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  3]  /(work[i  +  4]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  3]  /(work[i  +  4]);	  d    *=    work[i    +    2]    /(work[i    +    4]);    	non-compiled	[CE]  ';'  expected	31	None	replace
53	[BUG]  [BUGGY]  d  =  work[i  +  2]  +  -0.0;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  +  -0.0;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  +  -0.0;	  d    =    work[i    +    2]    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
54	[BUG]  [BUGGY]  d  =  work[i  +  1]  -  work[i  +  3];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  -  work[i  +  3];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  -  work[i  +  3];	  d    =    work[i    +    1]    -    work[i    +    2];    	non-compiled	[CE]  ';'  expected	38	None	replace
55	[BUG]  [BUGGY]  d  =  work[i  +  1]  -  work[i  +  2]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  -  work[i  +  2]  *  TOLERANCE_2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  -  work[i  +  2]  *  TOLERANCE_2;	  d    =    work[i    +    1]    -    work[i    +    2];    	non-compiled	[CE]  ';'  expected	38	None	replace
56	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  <  <  8]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  <  <  8]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /(work[i  +  2]  <  <  8]);	  d    *=    work[i    +    1]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	1	None	replace
57	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  <  <  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  2]  <  <  1);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /(work[i  +  2]  <  <  1);	  d    *=    work[i    +    1]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	1	None	replace
58	[BUG]  [BUGGY]  d  =  work[i]  -  work[i  +  4];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  -  work[i  +  4];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  -  work[i  +  4];	  d    =    work[i]    -    work[i    +    3];    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  d  =  work[i]  +  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  +  3;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  +  3;	  d    =    work[i]    +    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
60	[BUG]  [BUGGY]  d  =  work[i]  *  2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  *  2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  *  2;	  d    =    work[i]    +    2;    	non-compiled	[CE]  ';'  expected	19	None	replace
61	[BUG]  [BUGGY]  d  =  work[i  +  3]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  3]  *  TOLERANCE_2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  3]  *  TOLERANCE_2;	  d    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	30	None	replace
62	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_1);  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  *  TOLERANCE_1);	  d    *=    work[i]    /(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	32	None	replace
63	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  3]  *  d);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  3]  *  d);  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  3]  *  d);	  d    *=    work[i]    /(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	32	None	replace
64	[BUG]  [BUGGY]  d  =  work[i]  -  0.01;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  -  0.01;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  -  0.01;	  d    =    work[i]    -    2.0;    	non-compiled	[CE]  ';'  expected	28	None	replace
65	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  1]);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  *  1]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  *  1]);	  d    *=    work[i]    /(work[i    +    2]    +    1]);    	non-compiled	[CE]  ';'  expected	8	None	replace
66	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  2.0;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  /  2.0;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  /  2.0;	  d    =    work[i    +    1]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	14	None	replace
67	[BUG]  [BUGGY]  d  *=  work[i]  /  work[i  +  2];  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /  work[i  +  2];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /  work[i  +  2];	  d    =    work[i]    /    work[i    +    2];    	non-compiled	[CE]  ';'  expected	9	None	replace
68	[BUG]  [BUGGY]  d  =  work[i  +  2]  -  0.0;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  -  0.0;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  -  0.0;	  d    =    work[i    +    2]    -    1;    	non-compiled	[CE]  ';'  expected	36	None	replace
69	[BUG]  [BUGGY]  d  =  work[i  +  2]  /  MAXIMUM_SIZE;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  2]  /  MAXIMUM_SIZE;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  2]  /  MAXIMUM_SIZE;	  d    =    work[i    +    2]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	13	None	replace
70	[BUG]  [BUGGY]  d  =  work[i  +  3]  -  work[i  +  2];  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  3]  -  work[i  +  2];  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  3]  -  work[i  +  2];	  d    =    work[i    +    3];    	non-compiled	[CE]  ';'  expected	30	None	replace
71	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  4]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  4]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /(work[i  +  4]);	  d    *=    work[i    +    2]    /(work[i    +    4]);    	non-compiled	[CE]  ';'  expected	31	None	replace
72	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  1]  *  d);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  1]  *  d);  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  1]  *  d);	  d    *=    work[i]    /(work[i    +    2]    *    d);    	non-compiled	[CE]  ';'  expected	32	None	replace
73	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  2]  >>  0);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  2]  >>  0);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  2]  >>  0);	  d    *=    work[i]    /(work[i    +    2]    }    );    	non-compiled	[CE]  ';'  expected	37	None	replace
74	[BUG]  [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  3]);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i  +  1]  /(work[i  +  3]);  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i  +  1]  /(work[i  +  3]);	  d    *=    work[i    +    1]    /(work[i    +    2]);    	non-compiled	[CE]  ';'  expected	1	None	replace
75	[BUG]  [BUGGY]  work[i]  -=  work[i  +  3]  *  TOLERANCE_2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i]  -=  work[i  +  3]  *  TOLERANCE_2;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i]  -=  work[i  +  3]  *  TOLERANCE_2;	  work[i]    -=    work[i    +    2]    *    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	24	None	replace
76	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  toLERANCE_2;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  /  toLERANCE_2;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  /  toLERANCE_2;	  d    =    work[i    +    1]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	14	None	replace
77	[BUG]  [BUGGY]  d  =  work[i  +  1]  /  MATRIX;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i  +  1]  /  MATRIX;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i  +  1]  /  MATRIX;	  d    =    work[i    +    1]    /    TOLERANCE_2;    	non-compiled	[CE]  ';'  expected	14	None	replace
78	[BUG]  [BUGGY]  work[i  +  2]  =  0.0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  work[i  +  2]  =  0.0;  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	work[i  +  2]  =  0.0;	  work[i    +    2]    =    -1;    	non-compiled	[CE]  ';'  expected	17	None	replace
79	[BUG]  [BUGGY]  d  *=  work[i]  /  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /  1;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /  1;	  d    =    work[i]    /    1;    	non-compiled	[CE]  ';'  expected	26	None	replace
80	[BUG]  [BUGGY]  d  =  work[i]  /  3;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  =  work[i]  /  3;  [BUGGY]      }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  =  work[i]  /  3;	  d    =    work[i]    /    1;    	non-compiled	[CE]  ';'  expected	26	None	replace
81	[BUG]  [BUGGY]  d  *=  work[i]  /(work[i  +  1]  }  );  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  initialSplits(final  int  n)  {  pingPong  =  0;  for  (int  k  =  0;  k  <  2;  ++k)  {  double  d  =  work[4  *  (n  -  1)  +  pingPong];  for  (int  i  =  4  *  (n  -  2)  +  pingPong;  i  >=  0;  i  -=  4)  {  if  (work[i  +  2]  <=  TOLERANCE_2  *  d)  {  work[i  +  2]  =  -0.0;      [BUGGY]  d  *=  work[i]  /(work[i  +  1]  }  );  [BUGGY]      d  =  work[i];  }  else  {  d  *=  work[i]  /  (d  +  work[i  +  2]);  }  }  d  =  work[pingPong];  for  (int  i  =  2  +  pingPong;  i  <  4  *  n  -  2;  i  +=  4)  {  final  int  j  =  i  -  2  *  pingPong  -  1;  work[j]  =  d  +  work[i];  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  initialSplits  [RETURN_TYPE]  void  final  int  n  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  end  fourI  i  i0  index  j  k  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	945	945	1	replace	d  *=  work[i]  /(work[i  +  1]  }  );	  d    *=    work[i]    /(work[i    +    1]);    	non-compiled	[CE]  ';'  expected	6	None	replace
