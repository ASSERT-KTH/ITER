bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    int  j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
2	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  Int  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  Int  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    Int  j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
3	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
4	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  Integer  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  Integer  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    Integer  j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
5	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  with  int  j  =  2  *  n  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  with  int  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    with  int  j  =  2  *  n  -  1;	  	non-compiled	[CE]  not  a  statement	11	None	add
6	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  2  *  n  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  2  *  n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    int  j  =  2  *  n  -  1);	  	non-compiled	[CE]  ';'  expected	11	None	add
7	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    int  j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
8	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  long  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  long  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    long  j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
9	[BUG]  [BUGGY]  final  int  j  =  4  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  4  *  n  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  4  *  n  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
10	[BUG]  [BUGGY]  final  double  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  5  *  n  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  5  *  n  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
11	[BUG]  [BUGGY]  final  double  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  n  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  n  +  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
12	[BUG]  [BUGGY]  final  double  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  3  *  n  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  3  *  n  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]  final  double  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  2  *  n  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  2  *  n  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
14	[BUG]  [BUGGY]  final  double  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  1  *  n  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  1  *  n  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
15	[BUG]  [BUGGY]  final  double  j  =  4  *  (n  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  (n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  (n  -  1);	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
16	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
17	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
18	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[4];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[4];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[4];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
19	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[2];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[2];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[2];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
20	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
21	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[3];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[3];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[3];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
22	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
23	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[5];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[5];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[5];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
24	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  '.class'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
25	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  '.class'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  '.class'  expected	20	None	replace
26	[BUG]  [BUGGY]  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
27	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  true;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
28	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  true;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
29	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
30	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
31	[BUG]  [BUGGY]  int  j  =  5  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  step  -  1;	  int    j    =    5    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
32	[BUG]  [BUGGY]  int  j  =  5  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  n  +  1;	  int    j    =    5    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  int  j  =  5  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  work[n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  work[n  -  1];	  int    j    =    5    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  int  j  =  1  <  <  work[4];  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[4];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[4];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
35	[BUG]  [BUGGY]  int  j  =  1  <  <  work[0];  [CE]  ']'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[0];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
36	[BUG]  [BUGGY]  int  j  =  1  <  <  work[2];  [CE]  ']'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[2];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[2];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
37	[BUG]  [BUGGY]  int  j  =  1  <  <  work[3];  [CE]  ']'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[3];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[3];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
38	[BUG]  [BUGGY]  int  j  =  1  <  <  work[5];  [CE]  ']'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[5];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[5];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
39	[BUG]  [BUGGY]  float  j  =  1  <  <  work[1];  [CE]  ']'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  1  <  <  work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  1  <  <  work[1];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
40	[BUG]  [BUGGY]  int  j  =  2  <  <  work[1];  [CE]  ']'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  <  <  work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  <  <  work[1];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
41	[BUG]  [BUGGY]  int  j  =  3  <  <  work[1];  [CE]  ']'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  <  <  work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  <  <  work[1];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  work.length;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  }	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
44	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[1];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
45	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[i  -  1];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[i  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[i  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
46	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  4;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
47	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  }	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
48	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  3;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  3;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
49	[BUG]  [BUGGY]  int  j  =  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
50	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  -  1;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  -  1;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
51	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  +  1;  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  +  1;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
52	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  -  2;  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  -  2;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  -  2;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
53	[BUG]  [BUGGY]  float  j  =  1  <  <  work.length;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  1  <  <  work.length;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  1  <  <  work.length;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
54	[BUG]  [BUGGY]  int  j  =  2  <  <  work.length;  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  <  <  work.length;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  <  <  work.length;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
55	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1]  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  -  1]  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1]  +  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
56	[BUG]  [BUGGY]  int  j  =  4  *  work[1]  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[1]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
57	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)]  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  (n  -  1)]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
58	[BUG]  [BUGGY]  int  j  =  3  *  work[n  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  work[n  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  work[n  -  1]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
59	[BUG]  [BUGGY]  int  j  =  5  *  work[n  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  work[n  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  work[n  -  1]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
60	[BUG]  [BUGGY]  int  j  =  1  *  work[n  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  work[n  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  work[n  -  1]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
61	[BUG]  [BUGGY]  int  j  =  2  *  work[n  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  work[n  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  work[n  -  1]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
62	[BUG]  [BUGGY]  int  j  =  4  *  work[0]  -  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[0]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[0]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
65	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  '.class'  expected	15	None	replace
66	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1  +  k];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
69	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
70	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  2];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  2];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  2];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[1],  step);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[1],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[1],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
72	[BUG]  [BUGGY]  final  double  j  =  Math.min(work[0],  step);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work[0],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work[0],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
73	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[0],  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[0],  n);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[0],  n);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[0],  step  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[0],  step  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[0],  step  +  1);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
75	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[4],  step);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[4],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[4],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
76	[BUG]  [BUGGY]  final  int  j  =  Math.max(work[0],  step);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  Math.max(work[0],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  Math.max(work[0],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
77	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[3],  step);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[3],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[3],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
78	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[2],  step);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[2],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[2],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
79	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    int  j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
80	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  Int  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  Int  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    Int  j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
81	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  Integer  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  Integer  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    Integer  j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
82	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  boolean  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  boolean  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    boolean  j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
83	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
84	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  float  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  float  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    float  j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
85	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  5  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  5  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    int  j  =  5  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
86	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  tmp  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  tmp  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    tmp  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
92	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  '.class'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  '.class'  expected	17	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  2];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  2];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  2];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  3];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  3];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  3];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
95	[BUG]  [BUGGY]  int  j  =  4  *  step  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  step  +  1;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  int  j  =  1  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  step  -  1;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
97	[BUG]  [BUGGY]  int  j  =  3  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  step  -  1;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
98	[BUG]  [BUGGY]  int  j  =  2  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  step  -  1;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
99	[BUG]  [BUGGY]  int  j  =  4  *  step;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  step;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
100	[BUG]  [BUGGY]  int  j  =  4  *  step  -  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  step  -  2;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
101	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  1);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
102	[BUG]  [BUGGY]  final  double  tmp  =  work[0]  *(n  +  step);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0]  *(n  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0]  *(n  +  step);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
103	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  pingPong);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  pingPong);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  pingPong);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
104	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  3);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  3);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  3);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
105	[BUG]  [BUGGY]  final  double  tmp  =  work[2]  *(n  +  step);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2]  *(n  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2]  *(n  +  step);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
106	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  2);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  2);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  2);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
107	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  4);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  4);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  4);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
108	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  int  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  int  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    int  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
109	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  Int  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  Int  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    Int  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
110	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
111	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  Integer  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  Integer  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    Integer  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
112	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  with  int  j  =  1  *  n  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  with  int  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    with  int  j  =  1  *  n  -  1;	  	non-compiled	[CE]  not  a  statement	5	None	add
113	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  int  j  =  1  *  n  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  int  j  =  1  *  n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    int  j  =  1  *  n  -  1);	  	non-compiled	[CE]  ';'  expected	5	None	add
114	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  int  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  int  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    int  j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
115	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  long  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  long  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    long  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
116	[BUG]  [BUGGY]  final  double  tmp  =  work[4];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4];	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
117	[BUG]  [BUGGY]  final  double  tmp  =  work[2];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2];	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
118	[BUG]  [BUGGY]  final  double  tmp  =  work[3];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[3];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[3];	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
119	[BUG]  [BUGGY]  final  double  tmp  =  work[5];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[5];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[5];	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
120	[BUG]  [BUGGY]  final  double  tmp  =  work[0]  +  step;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0]  +  step;	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
121	[BUG]  [BUGGY]  final  int  j  =  Math.min(work.length,  n  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  Math.min(work.length,  n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  Math.min(work.length,  n  -  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
122	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  *  n  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  *  n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  *  n  -  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
123	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  step  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  step  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  step  -  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
124	[BUG]  [BUGGY]  final  double  j  =  Math.max(work.length,  n  -  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work.length,  n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work.length,  n  -  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
125	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  +  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
126	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  2);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  2);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  -  2);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
127	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  *  pingPong);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  *  pingPong);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  -  1  *  pingPong);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
128	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  pingPong  -  1);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  pingPong  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  pingPong  -  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  int  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  int  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    int  j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
130	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  Int  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  Int  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    Int  j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
131	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
132	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  Integer  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  Integer  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    Integer  j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
133	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  with  int  j  =  3  *  n  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  with  int  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    with  int  j  =  3  *  n  -  1;	  	non-compiled	[CE]  not  a  statement	7	None	add
134	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  int  j  =  3  *  n  -  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  int  j  =  3  *  n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    int  j  =  3  *  n  -  1);	  	non-compiled	[CE]  ';'  expected	7	None	add
135	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  if(  3  *  n  -  1  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  if(  3  *  n  -  1  <  =  0)  {  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    if(  3  *  n  -  1  <  =  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
136	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
137	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
138	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1  +  j];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[1  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
139	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  '.class'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  '.class'  expected	29	None	replace
140	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  *  j];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  *  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  *  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
141	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  3];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  3];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  3];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
142	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  -  1  +  step);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  -  1  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  -  1  +  step);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
143	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(step  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(step  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(step  -  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
144	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  -  2);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  -  2);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
145	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  *  n  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  *  n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  *  n  -  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
146	[BUG]  [BUGGY]  final  double[]  work  =(double[])this.work.get(n  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])this.work.get(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])this.work.get(n  -  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
147	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  +  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
148	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  *  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  *  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  *  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
149	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  -  1  *  step);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  -  1  *  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  -  1  *  step);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
150	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    int  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
151	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  Int  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  Int  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    Int  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
152	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
153	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  Integer  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  Integer  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    Integer  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
154	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  with  int  j  =  5  *  n  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  with  int  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    with  int  j  =  5  *  n  -  1;	  	non-compiled	[CE]  not  a  statement	9	None	add
155	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n  -  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    int  j  =  5  *  n  -  2;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
156	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    int  j  =  5  *  n  -  1);	  	non-compiled	[CE]  ';'  expected	9	None	add
157	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  long  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  long  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    long  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
158	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])work.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])work.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
159	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])this.work.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])this.work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])this.work.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
160	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.cloneTree();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.cloneTree();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n.cloneTree();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
161	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])p.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])p.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])p.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
162	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])s.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])s.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])s.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
163	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n2.clone();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n2.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n2.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
164	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.cloneBinding();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.cloneBinding();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n.cloneBinding();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
165	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  4  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    int  j  =  4  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
166	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  Int  j  =  4  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  Int  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    Int  j  =  4  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
167	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  Integer  j  =  4  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  Integer  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    Integer  j  =  4  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
168	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  j  =  4  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    j  =  4  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
169	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  with  int  j  =  4  *  step  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  with  int  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    with  int  j  =  4  *  step  -  1;	  	non-compiled	[CE]  not  a  statement	1	None	add
170	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  5  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  5  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    int  j  =  5  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
171	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  4  *  step  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  4  *  step  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    int  j  =  4  *  step  -  1);	  	non-compiled	[CE]  ';'  expected	1	None	add
172	[BUG]  [BUGGY]  int  j  =  4  *  work[1];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
173	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  (n  -  1)];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
174	[BUG]  [BUGGY]  int  j  =  3  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  work[n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  work[n  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
175	[BUG]  [BUGGY]  int  j  =  1  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  work[n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  work[n  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
176	[BUG]  [BUGGY]  int  j  =  2  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  work[n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  work[n  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
177	[BUG]  [BUGGY]  int  j  =  4  *  work[2  *  n  -  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[2  *  n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[2  *  n  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
178	[BUG]  [BUGGY]  int  j  =  6  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  step  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
179	[BUG]  [BUGGY]  int  j  =  6  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  n  +  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
180	[BUG]  [BUGGY]  float  j  =  6  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  6  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  6  *  n  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
181	[BUG]  [BUGGY]  if(step  ==  1)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step  ==  1)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step  ==  1)  {  return  true;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
182	[BUG]  [BUGGY]  if(step  >=  1)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step  >=  1)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step  >=  1)  {  return  true;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
183	[BUG]  [BUGGY]  if(n  ==  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(n  ==  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(n  ==  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
184	[BUG]  [BUGGY]  if(n  >=  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(n  >=  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(n  >=  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
185	[BUG]  [BUGGY]  if(step!=  1)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step!=  1)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step!=  1)  {  return  true;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
186	[BUG]  [BUGGY]  if(step  >=  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step  >=  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step  >=  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
187	[BUG]  [BUGGY]  ||  step  ==  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ||  step  ==  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	||  step  ==  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
188	[BUG]  [BUGGY]  int  j  =  1  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  n  +  1;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
189	[BUG]  [BUGGY]  int  j  =  4  *  n  +  2;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  2;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  n  +  2;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
190	[BUG]  [BUGGY]  int  j  =  3  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  n  +  1;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
191	[BUG]  [BUGGY]  int  j  =  2  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  n  +  1;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
192	[BUG]  [BUGGY]  int  j  =  4  *  n  +  3;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  3;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  n  +  3;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
193	[BUG]  [BUGGY]  final  double  tmp  =  work[0  +  step];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0  +  step];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
194	[BUG]  [BUGGY]  final  double  tmp  =  work[2  +  step];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  +  step];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
195	[BUG]  [BUGGY]  final  double  tmp  =  work[4  +  step];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  +  step];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
196	[BUG]  [BUGGY]  final  double  tmp  =  work[3  +  step];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[3  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[3  +  step];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
197	[BUG]  [BUGGY]  final  double  tmp  =  work[5  +  step];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[5  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[5  +  step];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
198	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  step  -  1];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  step  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  step  -  1];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
199	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  -  1  +  step);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  -  1  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  -  1  +  step);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
200	[BUG]  [BUGGY]  final  double  tmp  =  work[0]  *(n  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0]  *(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0]  *(n  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
201	[BUG]  [BUGGY]  final  double  tmp  =  work[4]  *(n  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4]  *(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4]  *(n  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
202	[BUG]  [BUGGY]  final  double  tmp  =  work[2]  *(n  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2]  *(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2]  *(n  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
203	[BUG]  [BUGGY]  final  double  tmp  =  work[3]  *(n  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[3]  *(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[3]  *(n  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
204	[BUG]  [BUGGY]  final  double  tmp  =  work[5]  *(n  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[5]  *(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[5]  *(n  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
205	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  -  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  -  2);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  -  2);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
206	[BUG]  [BUGGY]  final  int[]  work  =(int[])n.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int[]  work  =(int[])n.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int[]  work  =(int[])n.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
207	[BUG]  [BUGGY]  double[]  work  =(double[])n.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  double[]  work  =(double[])n.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	double[]  work  =(double[])n.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
208	[BUG]  [BUGGY]  final  double[]  work  =(double[])n.getValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])n.getValue();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])n.getValue();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
209	[BUG]  [BUGGY]  final  double[]  work  =(double[])this.work.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])this.work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])this.work.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
210	[BUG]  [BUGGY]  final  double[]  work  =(double[])sigma.clone();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])sigma.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])sigma.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
211	[BUG]  [BUGGY]  final  double  tmp  =  work[1  *  n  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  *  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  *  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
212	[BUG]  [BUGGY]  final  double  tmp  =  work[2  +  n  -  1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  +  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  +  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
213	[BUG]  [BUGGY]  final  double  tmp  =  work[0  +  n  -  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0  +  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0  +  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
214	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *  n  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
215	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  (n  -  1)];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  (n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  (n  -  1)];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
216	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *  n  -  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
217	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)work.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)work.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
218	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)this.work.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)this.work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)this.work.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
219	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.getValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.getValue();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)n.getValue();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
220	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)vK.clone();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)vK.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)vK.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
221	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.get();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.get();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)n.get();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
222	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n2.clone();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n2.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)n2.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
223	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.remove(0);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.remove(0);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)n.remove(0);	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
224	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  work.length;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
225	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
226	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  -  1];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
227	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  2;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  2;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
228	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  3;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  3;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
229	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  '.class'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  '.class'  expected	22	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
233	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  '.class'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
234	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  '.class'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  true;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  true;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  true;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
238	[BUG]  [BUGGY]  int  j  =  1  *  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  work.length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
239	[BUG]  [BUGGY]  int  j  =  4  *  work[0].length  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[0].length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[0].length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
240	[BUG]  [BUGGY]  int  j  =  4  *  work[1  -  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[1  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[1  -  1];	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
241	[BUG]  [BUGGY]  int  j  =  3  *  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  work.length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
242	[BUG]  [BUGGY]  int  j  =  5  *  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  work.length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
243	[BUG]  [BUGGY]  int  j  =  2  *  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  work.length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
244	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  n  -  1];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  n  -  1];	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
245	[BUG]  [BUGGY]  int  j  =  0;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  0;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  0;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
246	[BUG]  [BUGGY]  float  j  =  4;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  4;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  4;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
247	[BUG]  [BUGGY]  int  j  =  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
248	[BUG]  [BUGGY]  int  j  =  3;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
249	[BUG]  [BUGGY]  int  j  =  n;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  n;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  n;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
250	[BUG]  [BUGGY]  final  double  tmp  =  work[1  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  *(n  -  1)];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
251	[BUG]  [BUGGY]  final  double  tmp  =  work[3  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[3  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[3  *(n  -  1)];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
252	[BUG]  [BUGGY]  final  double  tmp  =  work[5  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[5  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[5  *(n  -  1)];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
253	[BUG]  [BUGGY]  final  double  tmp  =  work[0  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0  *(n  -  1)];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
254	[BUG]  [BUGGY]  final  double  tmp  =  work[6  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[6  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[6  *(n  -  1)];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
255	[BUG]  [BUGGY]  final  double  j  =  work[1  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[1  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[1  *(n  -  1)];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
256	[BUG]  [BUGGY]  final  double  j  =  work[5  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[5  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[5  *(n  -  1)];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
257	[BUG]  [BUGGY]  final  double  j  =  work[2  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[2  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[2  *(n  -  1)];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
258	[BUG]  [BUGGY]  final  double  j  =  work[3  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[3  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[3  *(n  -  1)];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
259	[BUG]  [BUGGY]  final  int  j  =  work[4  *(n  -  1)];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  work[4  *(n  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  work[4  *(n  -  1)];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
260	[BUG]  [BUGGY]  final  double  j  =  work[4  *(n  -  1)  +  pingPong];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[4  *(n  -  1)  +  pingPong];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[4  *(n  -  1)  +  pingPong];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
261	[BUG]  [BUGGY]  int  j  =  1  +  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  +  n  -  1;	  int    j    =    1    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
262	[BUG]  [BUGGY]  float  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  1  *  n  -  1;	  int    j    =    1    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
263	[BUG]  [BUGGY]  int  j  =  1  <  <  n  -  1;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  n  -  1;	  int    j    =    1    *    n    -    1;    	non-compiled	[CE]  >  expected	6	None	replace
264	[BUG]  [BUGGY]  final  double[]  work  =(double[])matrix.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])matrix.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])matrix.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
265	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.cloneTree();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.cloneTree();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.cloneTree();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
266	[BUG]  [BUGGY]  final  double[]  work  =(double[])super.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])super.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])super.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
267	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
268	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
269	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  +  1);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
270	[BUG]  [BUGGY]  final  int  j  =  Math.min(n,  step);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  Math.min(n,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  Math.min(n,  step);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
271	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  -  1);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
272	[BUG]  [BUGGY]  final  double  j  =  Math.max(n,  step);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(n,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(n,  step);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
273	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step)+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step)+  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step)+  1;	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
274	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step)-  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step)-  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step)-  1;	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
275	[BUG]  [BUGGY]  int  j  =  1  *  workPong  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  workPong  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  workPong  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
276	[BUG]  [BUGGY]  int  j  =  5  *  workPong  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  workPong  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  workPong  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
277	[BUG]  [BUGGY]  int  j  =  3  *  workPong  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  workPong  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  workPong  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
278	[BUG]  [BUGGY]  int  j  =  2  *  workPong  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  workPong  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  workPong  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
279	[BUG]  [BUGGY]  int  j  =  4  *  work[0  -  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[0  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[0  -  1];	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
280	[BUG]  [BUGGY]  int  j  =  4  *  work[4  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  -  1]  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
281	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)  +  pingPong];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)  +  pingPong];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *(n  -  1)  +  pingPong];	      final    double    tmp    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
282	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)]  +  pingPong;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)]  +  pingPong;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *(n  -  1)]  +  pingPong;	      final    double    tmp    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
283	[BUG]  [BUGGY]  int  j  =  4  +  step  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  +  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  +  step  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
284	[BUG]  [BUGGY]  float  j  =  4  +  n  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  4  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  4  +  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
285	[BUG]  [BUGGY]  int  j  =  3  +  n  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  +  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
286	[BUG]  [BUGGY]  int  j  =  5  +  n  -  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  +  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
287	[BUG]  [BUGGY]  int  j  =  2  +  n  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  +  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
288	[BUG]  [BUGGY]  final  double  j  =(double)work[0];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[0];	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
289	[BUG]  [BUGGY]  final  double  j  =(double)work[4];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[4];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[4];	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
290	[BUG]  [BUGGY]  final  double  j  =(double)work[2];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[2];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[2];	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
291	[BUG]  [BUGGY]  final  int  j  =(int)work[1];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =(int)work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =(int)work[1];	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
292	[BUG]  [BUGGY]  final  double  j  =(double)work[3];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[3];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[3];	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
293	[BUG]  [BUGGY]  final  double  j  =(double)work[5];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[5];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[5];	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
294	[BUG]  [BUGGY]  float  j  =  4  *  (n  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  float  j  =  4  *  (n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	float  j  =  4  *  (n  -  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
295	[BUG]  [BUGGY]  int  j  =  3  *  (n  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  (n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  (n  -  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
296	[BUG]  [BUGGY]  int  j  =  5  *  (n  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  (n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5  *  (n  -  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
297	[BUG]  [BUGGY]  int  j  =  1  *  (n  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  (n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  (n  -  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
298	[BUG]  [BUGGY]  int  j  =  4  *  (n  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  (n  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  (n  +  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
299	[BUG]  [BUGGY]  int  j  =  2  *  (n  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  (n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  2  *  (n  -  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
300	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  +  step;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  +  step;	      final    double    tmp    =    work[1];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
301	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  +  n;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  +  n;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  +  n;	      final    double    tmp    =    work[1];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
302	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
303	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  +  k];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  +  k];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  +  k];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
304	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  ==  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
305	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp!=  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
306	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  >=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  >=  null)  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  >=  null)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
307	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  ==  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  ==  null)  {  return  true;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  ==  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
308	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp!=  null)  {  return  true;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp!=  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
309	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  >=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  >=  null)  {  return  true;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  k];  if(tmp  >=  null)  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
310	[BUG]  [BUGGY]  final  double  j  =  work[4  *(n  -  1)]  +  pingPong;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[4  *(n  -  1)]  +  pingPong;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[4  *(n  -  1)]  +  pingPong;	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
311	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  final  int  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  final  int  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    final  int  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
312	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  fort  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  fort  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    fort  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
313	[BUG]  [BUGGY]  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
314	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  >  expected	19	None	replace
315	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
316	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  >  expected	19	None	replace
317	[BUG]  [BUGGY]  final  double  j  =(double)work[1]  +  step;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[1]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[1]  +  step;	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
318	[BUG]  [BUGGY]  final  double  j  =(double)work[1]  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[1]  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[1]  +  1;	      final    double    j    =(double)work[1];    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
319	[BUG]  [BUGGY]  final  double  tmp  =  work[5  +  n  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[5  +  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[5  +  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
320	[BUG]  [BUGGY]  final  double  tmp  =  work[4  +  n  -  1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  +  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  +  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
321	[BUG]  [BUGGY]  final  double  tmp  =  work[3  +  n  -  1];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[3  +  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[3  +  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
322	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)  +  pingPong]  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)  +  pingPong]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  (n  -  1)  +  pingPong]  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
323	[BUG]  [BUGGY]  int  j  =  4  *  work[1  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[1  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[1  -  1]  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
324	[BUG]  [BUGGY]  int  j  =  4  *  work[2  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[2  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[2  -  1]  -  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
325	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)  +  pingPong];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  (n  -  1)  +  pingPong];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  (n  -  1)  +  pingPong];	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
326	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1  +  step;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1  +  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  *  n  -  1  +  step;	  int    j    =    1    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
327	[BUG]  [BUGGY]  final  ArrayRealVector  work  =(ArrayRealVector)n.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  ArrayRealVector  work  =(ArrayRealVector)n.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  ArrayRealVector  work  =(ArrayRealVector)n.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
328	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)realVectors.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)realVectors.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)realVectors.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
329	[BUG]  [BUGGY]  RealVector  work  =(RealVector)n.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  RealVector  work  =(RealVector)n.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	RealVector  work  =(RealVector)n.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
330	[BUG]  [BUGGY]  int  j  =  3  *  work[1  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  work[1  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  *  work[1  -  1]  -  1;	  int    j    =    3    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
331	[BUG]  [BUGGY]  final  double[]  work  =(double[])realEigenvectors.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])realEigenvectors.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])realEigenvectors.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
332	[BUG]  [BUGGY]  final  double[]  work  =(double[])cachedVt.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])cachedVt.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])cachedVt.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
333	[BUG]  [BUGGY]  final  int[]  work  =(int[])work.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int[]  work  =(int[])work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int[]  work  =(int[])work.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
334	[BUG]  [BUGGY]  final  double[]  work  =(double[])super.work.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])super.work.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])super.work.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
335	[BUG]  [BUGGY]  final  double[]  work  =(double[])map.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])map.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])map.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
336	[BUG]  [BUGGY]  final  double  j  =  4  *  work[n  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  work[n  -  1]  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  work[n  -  1]  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
337	[BUG]  [BUGGY]  final  double  j  =  4  *  n  -  1  +  step;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  n  -  1  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  n  -  1  +  step;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
338	[BUG]  [BUGGY]  parent.flipIfWarranted(n,  step);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  parent.flipIfWarranted(n,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	parent.flipIfWarranted(n,  step);	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
339	[BUG]  [BUGGY]  if(step  <  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step  <  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step  <  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
340	[BUG]  [BUGGY]  if(n  <  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(n  <  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(n  <  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
341	[BUG]  [BUGGY]  pendSecondary(n,  step)  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  pendSecondary(n,  step)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	pendSecondary(n,  step)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
342	[BUG]  [BUGGY]  pendSecondary(n,  step);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  pendSecondary(n,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	pendSecondary(n,  step);	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
343	[BUG]  [BUGGY]  int  j  =  5;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  5;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
344	[BUG]  [BUGGY]  int  j  =  4  +  step;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  +  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  +  step;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
345	[BUG]  [BUGGY]  int  j  =  1  <  <  work[1]  +  step;  [CE]  ']'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[1]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[1]  +  step;	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
346	[BUG]  [BUGGY]  int  j  =  1  <  <  work[1]  -  1;  [CE]  ']'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[1]  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[1]  -  1;	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
347	[BUG]  [BUGGY]  int  j  =  1  <  <  work[6];  [CE]  ']'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[6];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[6];	      int    j    =    1    <    <    work[1];    	non-compiled	[CE]  ']'  expected	49	None	replace
348	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1]  -  2;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  -  1]  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1]  -  2;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
349	[BUG]  [BUGGY]  int  j  =  6  *  work[n  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  *  work[n  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  work[n  -  1]  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
350	[BUG]  [BUGGY]  int  j  =  6  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  *  work[n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  work[n  -  1];	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
351	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[0],  step,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[0],  step,  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[0],  step,  1);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
352	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[0],  work[1]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[0],  work[1]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[0],  work[1]);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
353	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  -  3;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  -  3;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  -  3;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
354	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  -  4;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  -  4;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  -  4;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
355	[BUG]  [BUGGY]  int  j  =  1  <  <  work[n].length;  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[n].length;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[n].length;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  ']'  expected	44	None	replace
356	[BUG]  [BUGGY]  int  j  =  1  <  <  work[n.length];  [CE]  ']'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work[n.length];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work[n.length];	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  ']'  expected	44	None	replace
357	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
358	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
359	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  final  int  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  final  int  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    final  int  j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
360	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  fort  j  =  3  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  fort  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    fort  j  =  3  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
361	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)+  pingPong];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)+  pingPong];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *(n  -  1)+  pingPong];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
362	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)]  +  pingPong;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)]  +  pingPong;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *(n  -  1)]  +  pingPong;	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
363	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)]  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)]  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *(n  -  1)]  +  1;	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
364	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
365	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
366	[BUG]  [BUGGY]  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
367	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
368	[BUG]  [BUGGY]  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
369	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
370	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j  +=  2)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j  +=  2)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j  +=  2)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
371	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
372	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  j];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  j];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  j];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
373	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  k];  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  k];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  k];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
374	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  +  1];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  +  1];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
375	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  step];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  step];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
376	[BUG]  [BUGGY]  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
377	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n;  j  +=  2)  {  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n;  j  +=  2)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n;  j  +=  2)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
379	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  >  expected	21	None	replace
380	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  final  int  j  =  2  *  n  -  1;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  final  int  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    final  int  j  =  2  *  n  -  1;	  	non-compiled	[CE]  >  expected	11	None	add
381	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  fort  j  =  2  *  n  -  1;  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  fort  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    fort  j  =  2  *  n  -  1;	  	non-compiled	[CE]  >  expected	11	None	add
382	[BUG]  [BUGGY]  int  j  =  4  *  work[n  +  1];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  +  1];	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
383	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  step  +  1);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
384	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step,  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step,  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  step,  1);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  ')'  expected	50	None	replace
385	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  step;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n  +  step;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n  +  step;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  1;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  1];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
387	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n  +  1;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
388	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)]  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)]  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *(n  -  1)]  +  1;	      final    double    tmp    =    work[4    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
389	[BUG]  [BUGGY]  int  j  =  4  *  (n  -  1  +  step);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  (n  -  1  +  step);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  (n  -  1  +  step);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
390	[BUG]  [BUGGY]  int  j  =  4  *  work[1].length  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[1].length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[1].length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
391	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1].length  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  -  1].length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1].length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
392	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
393	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
394	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
395	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  1;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
396	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  '.class'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  j  =  0;  j  <  n;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  '.class'  expected	31	None	replace
397	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  step]  *  n;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  step]  *  n;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  step]  *  n;	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
398	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  1];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  1];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
399	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  final  int  j  =  4  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  final  int  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    final  int  j  =  4  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
400	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  (int  j  =  4  *  step  -  1;  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  (int  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    (int  j  =  4  *  step  -  1;	  	non-compiled	[CE]  ')'  expected	1	None	add
401	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  4  *  step  -  1;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  int  j  =  4  *  step  -  1;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    int  j  =  4  *  step  -  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
402	[BUG]  [BUGGY]  final  double[]  work  =(double[])n.copy();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])n.copy();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])n.copy();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
403	[BUG]  [BUGGY]  final  double[]  work  =(double[])n.clone()  /  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])n.clone()  /  2;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])n.clone()  /  2;	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
404	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1,  step);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  -  1,  step);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
405	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  +  step);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  -  1  +  step);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
406	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1]  +  step;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  -  1]  +  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1]  +  step;	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
407	[BUG]  [BUGGY]  int  j  =  4  *  work[2  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[2  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[2  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
408	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  -  2);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  -  2);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  -  2);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
409	[BUG]  [BUGGY]  final  double  j  =  Math.max(n,  step  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(n,  step  +  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(n,  step  +  1);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
410	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  -  3);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  -  3);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  -  3);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
411	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  *  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  *  2);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  *  2);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
412	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  -  4);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  -  4);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  -  4);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
413	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  final  int  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  final  int  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    final  int  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
414	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  fort  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  fort  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    fort  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
415	[BUG]  [BUGGY]  final  double  tmp  =  work[0]  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0]  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0]  +  1;	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
416	[BUG]  [BUGGY]  final  double  tmp  =  work[0]  *  n;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[0]  *  n;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[0]  *  n;	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
417	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  -  1  *  pingPong);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  -  1  *  pingPong);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  -  1  *  pingPong);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
418	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  *  2  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  *  2  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  *  2  -  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
419	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  -  1,  step);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  -  1,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  -  1,  step);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  ')'  expected	46	None	replace
420	[BUG]  [BUGGY]  final  ArrayRealVector[]  work  =(ArrayRealVector[])n.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  ArrayRealVector[]  work  =(ArrayRealVector[])n.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  ArrayRealVector[]  work  =(ArrayRealVector[])n.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
421	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n  +  1]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n  +  1]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n  +  1]);	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
422	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n1.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n1.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n1.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
423	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  +  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  +  1;	      final    double    tmp    =    work[1];    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
424	[BUG]  [BUGGY]  int  j  =  4  +  n  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  +  n  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  +  n  *  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
425	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  final  int  j  =  4  *  n  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  final  int  j  =  4  *  n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    final  int  j  =  4  *  n  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
426	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  4  *  (n  +  1;  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  4  *  (n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    int  j  =  4  *  (n  +  1;	  	non-compiled	[CE]  ')'  expected	3	None	add
427	[BUG]  [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  4  *  n  +  1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  n  +  1;  int  j  =  4  *  n  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    n    +    1;    int  j  =  4  *  n  +  1);	  	non-compiled	[CE]  ';'  expected	3	None	add
428	[BUG]  [BUGGY]  for(final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
429	[BUG]  [BUGGY]  for(final  double  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  double  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  double  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
430	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  i++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  i++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n  +  2;  i++)  {  final  double  tmp  =  work[i  +  k];	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
431	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
432	[BUG]  [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
433	[BUG]  [BUGGY]  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  >  expected	19	None	replace
434	[BUG]  [BUGGY]  int  j  =  4  *  work[n  -  1]  -  3;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  -  1]  -  3;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  -  1]  -  3;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
435	[BUG]  [BUGGY]  int  j  =  4  *  work[2]  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[2]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[2]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
436	[BUG]  [BUGGY]  int  j  =  4  +  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  +  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  +  work.length  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
437	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
438	[BUG]  [BUGGY]  for(int  j  =  start;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  start;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  start;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
439	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
440	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  true;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
441	[BUG]  [BUGGY]  for(int  j  =  start;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  start;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  true;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  start;  j  <  0;  j++)  {  if(!flipIfWarranted(n,  step))  {  return  true;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
442	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
443	[BUG]  [BUGGY]  for(int  j  =  start;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  start;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  start;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
444	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  j  -=  4;  }  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  j  -=  4;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  j  -=  4;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
445	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  if(tmp  >  0)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  if(tmp  >  0)  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  0;  j++)  {  final  double  tmp  =  work[j  -  1];  if(tmp  >  0)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
446	[BUG]  [BUGGY]  int  j  =  4  *  step  /  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  /  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  step  /  1;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
447	[BUG]  [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
448	[BUG]  [BUGGY]  for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
449	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  1;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
450	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1;  fort  j  =  4  *  step  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1;  fort  j  =  4  *  step  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    4    *    step    -    1;    fort  j  =  4  *  step  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
451	[BUG]  [BUGGY]  final  int[]  work  =(int[])work.get(n  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int[]  work  =(int[])work.get(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int[]  work  =(int[])work.get(n  -  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
452	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.get(n  -  3);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.get(n  -  3);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.get(n  -  3);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
453	[BUG]  [BUGGY]  int  j  =  4  *(work[n  -  1]  &  0xffff);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *(work[n  -  1]  &  0xffff);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *(work[n  -  1]  &  0xffff);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
454	[BUG]  [BUGGY]  int  j  =  4  *(work[n  -  1]  &  0xfffff);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *(work[n  -  1]  &  0xfffff);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *(work[n  -  1]  &  0xfffff);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
455	[BUG]  [BUGGY]  final  double  j  =  4  *  n  -  1  +  work.length;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  n  -  1  +  work.length;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  n  -  1  +  work.length;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
456	[BUG]  [BUGGY]  final  double  j  =  4  *  work[n  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  work[n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  work[n  -  1];	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
457	[BUG]  [BUGGY]  final  double  j  =  4  *  n  -  1  +  3;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  n  -  1  +  3;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  n  -  1  +  3;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
458	[BUG]  [BUGGY]  final  double  tmp  =  work[6];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[6];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[6];	      final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
459	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  work.length  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  work.length  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  work.length  -  1);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
460	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  work[n  -  1]);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  work[n  -  1]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  work[n  -  1]);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
461	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  +  pingPong);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  +  pingPong);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  -  1  +  pingPong);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
462	[BUG]  [BUGGY]  final  double  j  =  Math.min(work[0,  n  -  1]);  [CE]  ']'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work[0,  n  -  1]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work[0,  n  -  1]);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  ']'  expected	42	None	replace
463	[BUG]  [BUGGY]  final  double[]  work  =(double[])realEigenvalues.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])realEigenvalues.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])realEigenvalues.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
464	[BUG]  [BUGGY]  final  double[]  work  =(double[])n.toArray(new  double[n  -  1]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])n.toArray(new  double[n  -  1]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])n.toArray(new  double[n  -  1]);	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
465	[BUG]  [BUGGY]  final  double[]  work  =(double[])g.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])g.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])g.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
466	[BUG]  [BUGGY]  final  double[]  work  =(double[])p.clone();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])p.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])p.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
467	[BUG]  [BUGGY]  final  double[]  work  =(double[])n.clone()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])n.clone()  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])n.clone()  +  1;	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
468	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  work.length;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  work.length;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  work.length;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
469	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  2;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  2;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
470	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  work.length  -  1;  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  work.length  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  ']'  expected	34	None	replace
471	[BUG]  [BUGGY]  int  j  =  4  *  work.length  -  2;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work.length  -  2;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work.length  -  2;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
472	[BUG]  [BUGGY]  int  j  =  4  *  work[0  -  1]  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[0  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[0  -  1]  -  1;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
473	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  n];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  n];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  n];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
474	[BUG]  [BUGGY]  int  j  =  4  *  work[work[n  -  1]  +  step;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[work[n  -  1]  +  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[work[n  -  1]  +  step;	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  ']'  expected	32	None	replace
475	[BUG]  [BUGGY]  int  j  =  4  *  work[3  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[3  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[3  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
476	[BUG]  [BUGGY]  int  j  =  4  *  work[work[n  -  1];  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[work[n  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[work[n  -  1];	  int    j    =    4    *    work[n    -    1];    	non-compiled	[CE]  ']'  expected	32	None	replace
477	[BUG]  [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
478	[BUG]  [BUGGY]  for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
479	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
480	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  3;  j++)  {  final  double  tmp  =  work[0];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  3;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  3;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
481	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
482	[BUG]  [BUGGY]  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  >  expected	18	None	replace
483	[BUG]  [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
484	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n  -  1]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n  -  1]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n  -  1]);	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
485	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])realEigenvectors.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])realEigenvectors.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])realEigenvectors.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
486	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.copyInto(work);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.copyInto(work);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n.copyInto(work);	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
487	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[0],  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[0],  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[0],  1);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
488	[BUG]  [BUGGY]  int  j  =  1  *  n  -  1;  INt  j  =  1  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  *  n  -  1;  INt  j  =  1  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    1    *    n    -    1;    INt  j  =  1  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
489	[BUG]  [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
490	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  work.length;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  work.length;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  work.length;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
491	[BUG]  [BUGGY]  for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  double  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
492	[BUG]  [BUGGY]  final  double  j  =  Math.min(step,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(step,  n);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(step,  n);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
493	[BUG]  [BUGGY]  final  double  j  =  Math.min(n,  step  +  1,  work.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(n,  step  +  1,  work.length);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(n,  step  +  1,  work.length);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
494	[BUG]  [BUGGY]  final  double  j  =  Math.min(0,  step);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(0,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(0,  step);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
495	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  INt  j  =  5  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  INt  j  =  5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    INt  j  =  5  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
496	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  INt  j  =  2  *  n  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  INt  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    INt  j  =  2  *  n  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
497	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.getValue();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.getValue();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.getValue();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
498	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.clone()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.clone()  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.clone()  -  1;	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
499	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  0;  i  <  n  +  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  0;  i  <  n  +  step;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
500	[BUG]  [BUGGY]  for(final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  i  =  0;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
501	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  '.class'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  For(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	For(int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  '.class'  expected	21	None	replace
502	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)in.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)in.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)in.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
503	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.intermediate();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)n.intermediate();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)n.intermediate();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
504	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  >  expected	22	None	replace
505	[BUG]  [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(final  int  j  =  0;  j  <  n;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
506	[BUG]  [BUGGY]  int  j  =  4  *  workPong  +  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  workPong  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  workPong  +  1;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
507	[BUG]  [BUGGY]  int  j  =  4  *  work.length  +  1;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work.length  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work.length  +  1;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
508	[BUG]  [BUGGY]  int  j  =  4  *  work[n  +  1;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[n  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[n  +  1;	  int    j    =    4    *    n    +    1;    	non-compiled	[CE]  ']'  expected	4	None	replace
509	[BUG]  [BUGGY]  int  j  =  6  *  workPong  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  *  workPong  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  workPong  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
510	[BUG]  [BUGGY]  int  j  =  6  *  work.length  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  *  work.length  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  *  work.length  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
511	[BUG]  [BUGGY]  int  j  =  6;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6;	  int    j    =    4;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
512	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  for(int  j  =  3  *  n  -  1;  [CE]  '.class'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  for(int  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    for(int  j  =  3  *  n  -  1;	  	non-compiled	[CE]  '.class'  expected	7	None	add
513	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  INt  j  =  3  *  n  -  1;  [CE]  '.class'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  INt  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    INt  j  =  3  *  n  -  1;	  	non-compiled	[CE]  '.class'  expected	7	None	add
514	[BUG]  [BUGGY]  int  j  =  4  *  work[4  -  1];  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  -  1];	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
515	[BUG]  [BUGGY]  int  j  =  4  *  workPong  /  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  workPong  /  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  workPong  /  1;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
516	[BUG]  [BUGGY]  if(step  ==  2)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step  ==  2)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step  ==  2)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
517	[BUG]  [BUGGY]  if(step!=  1)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  if(step!=  1)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	if(step!=  1)  {  return  false;  }	      if(step    ==    1)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
518	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  +  2;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  +  2;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  +  2;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
519	[BUG]  [BUGGY]  int  j  =  1  <  <  work.length  +  3;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1  <  <  work.length  +  3;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1  <  <  work.length  +  3;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
520	[BUG]  [BUGGY]  final  double  j  =  Math.min(int,  step);  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(int,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(int,  step);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  '.class'  expected	38	None	replace
521	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  step);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  step);	      final    double    j    =    Math.min(n,    step);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
522	[BUG]  [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  *  step);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.min(work.length,  n  -  1  *  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.min(work.length,  n  -  1  *  step);	      final    double    j    =    Math.min(work.length,    n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
523	[BUG]  [BUGGY]  final  double[]  work  =(double[])this.workers.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])this.workers.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])this.workers.clone();	      final    double[]    work    =(double[])work.clone();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
524	[BUG]  [BUGGY]  int  j  =  4  *  work[work[n  -  1]  -  1;  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[work[n  -  1]  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[work[n  -  1]  -  1;	  int    j    =    4    *    work[n    -    1]    -    1;    	non-compiled	[CE]  ']'  expected	24	None	replace
525	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  step  -  1);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
526	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  /(n  +  step);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  /(n  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  /(n  +  step);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
527	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step)+  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(n  +  step)+  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(n  +  step)+  1;	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
528	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  +(n  +  step);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  +(n  +  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  +(n  +  step);	      final    double    tmp    =    work[1]    *(n    +    step);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
529	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *(step  -  1)];  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *(step  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *(step  -  1)];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
530	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)]  +  step;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *(n  -  1)]  +  step;	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
531	[BUG]  [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)+  1];  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[2  *(n  -  1)+  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[2  *(n  -  1)+  1];	      final    double    tmp    =    work[2    *(n    -    1)];    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
532	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n]);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n]);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])n.toArray(new  ArrayRealVector[n]);	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
533	[BUG]  [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])this.workers.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector[]  work  =(ArrayRealVector[])this.workers.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector[]  work  =(ArrayRealVector[])this.workers.clone();	      ArrayRealVector[]    work    =(ArrayRealVector[])n.clone();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
534	[BUG]  [BUGGY]  int  j  =  4  *(step  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *(step  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *(step  -  1);	  int    j    =    4    *    (n    -    1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
535	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  2  *  n.  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  int  j  =  2  *  n.  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    int  j  =  2  *  n.  -  1;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
536	[BUG]  [BUGGY]  int  j  =  2  *  n  -  1;  danst  j  =  2  *  n  -  1;  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  2  *  n  -  1;  danst  j  =  2  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    2    *    n    -    1;    danst  j  =  2  *  n  -  1;	  	non-compiled	[CE]  <identifier>  expected	11	None	add
537	[BUG]  [BUGGY]  int  j  =  start;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  start;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  start;	  int    j    =    4;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
538	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
539	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
540	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  <identifier>  expected	15	None	replace
541	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  step);  j++)  {  final  double  tmp  =  work[i  +  k];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  step);  j++)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  step);  j++)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  ';'  expected	15	None	replace
542	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  step)  {  final  double  tmp  =  work[i  +  k];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  step)  {  final  double  tmp  =  work[i  +  k];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  step)  {  final  double  tmp  =  work[i  +  k];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    	non-compiled	[CE]  ';'  expected	15	None	replace
543	[BUG]  [BUGGY]  int  j  =  4  *  step  -  1  +  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  step  -  1  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  step  -  1  +  1;	  int    j    =    4    *    step    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
544	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)this.workers.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)this.workers.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)this.workers.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
545	[BUG]  [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)realEigenvectors.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  ArrayRealVector  work  =(ArrayRealVector)realEigenvectors.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	ArrayRealVector  work  =(ArrayRealVector)realEigenvectors.clone();	      ArrayRealVector    work    =(ArrayRealVector)n.clone();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
546	[BUG]  [BUGGY]  final  double  j  =(double)work[1].doubleValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =(double)work[1].doubleValue();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =(double)work[1].doubleValue();	      final    double    j    =(double)work[1];    	non-compiled	[CE]  <identifier>  expected	40	None	replace
547	[BUG]  [BUGGY]  int  j  =  10  *  n  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  10  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  10  *  n  -  1;	  int    j    =    3    *    n    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
548	[BUG]  [BUGGY]  int  j  =  1.5  *  n  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  1.5  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  1.5  *  n  -  1;	  int    j    =    2    *    n    -    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
549	[BUG]  [BUGGY]  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
550	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  >=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    >=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
551	[BUG]  [BUGGY]  int  j  =  4  *  workPong  -  1  +  step;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  workPong  -  1  +  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  workPong  -  1  +  step;	  int    j    =    4    *    workPong    -    1;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
552	[BUG]  [BUGGY]  int  j  =  3  <  <  work.length;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  <  <  work.length;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  3  <  <  work.length;	      int    j    =    1    <    <    work.length;    	non-compiled	[CE]  >  expected	44	None	replace
553	[BUG]  [BUGGY]  final  double[]  work  =(double[])s.clone();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])s.clone();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])s.clone();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
554	[BUG]  [BUGGY]  final  double[]  work  =(double[])n.toArray();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])n.toArray();  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])n.toArray();	      final    double[]    work    =(double[])n.clone();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
555	[BUG]  [BUGGY]  int  j  =  7  *  n  -  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  7  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  7  *  n  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
556	[BUG]  [BUGGY]  int  j  =  8  *  n  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  8  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  8  *  n  -  1;	  int    j    =    6    *    n    -    1;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
557	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  j++)  {  final  double  tmp  =  work[0];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  2;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  2;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  <identifier>  expected	28	None	replace
558	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[0];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  <identifier>  expected	28	None	replace
559	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  6;  j++)  {  final  double  tmp  =  work[0];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  6;  j++)  {  final  double  tmp  =  work[0];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  6;  j++)  {  final  double  tmp  =  work[0];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[0];    	non-compiled	[CE]  <identifier>  expected	28	None	replace
560	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
561	[BUG]  [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  1;  j  <  n;  j++)  {  final  double  tmp  =  work[i  +  k];  if(tmp!=  null)  {  return  false;  }	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    k];    if(tmp!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
562	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
563	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  return  true;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  return  true;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  return  true;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
564	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  1)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  1)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  1)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
565	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  3;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  3;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  3;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
566	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  3;  j  -=  4;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  3;  j  -=  4;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  3;  j  -=  4;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
567	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  return  false;  }  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  return  false;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  return  false;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
568	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  4;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  4;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  4;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
569	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  double  tmp  =  work[j  -  1];  j  -=  2;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  double  tmp  =  work[j  -  1];  j  -=  2;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  double  tmp  =  work[j  -  1];  j  -=  2;  }	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
570	[BUG]  [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  continue;  }  [CE]  ';'  expected  [FE]                                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  continue;  }  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  begin;  j  <  1;  j  +=  2)  {  final  double  tmp  =  work[j  -  1];  j  -=  2;  j  -=  2)  {  continue;  }	      	non-compiled	[CE]  ';'  expected	13	None	replace
571	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)]  +  step;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *(n  -  1)]  +  step;	      final    double    tmp    =    work[4    *(n    -    1)];    	non-compiled	[CE]  <identifier>  expected	27	None	replace
572	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *(step  -  1)];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *(step  -  1)];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *(step  -  1)];	      final    double    tmp    =    work[4    *(n    -    1)];    	non-compiled	[CE]  <identifier>  expected	27	None	replace
573	[BUG]  [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)  +  step];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[4  *(n  -  1)  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[4  *(n  -  1)  +  step];	      final    double    tmp    =    work[4    *(n    -    1)];    	non-compiled	[CE]  <identifier>  expected	27	None	replace
574	[BUG]  [BUGGY]  int  j  =  6  +  n  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  6  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  6  +  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
575	[BUG]  [BUGGY]  int  j  =  8  +  n  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  8  +  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  8  +  n  -  1;	  int    j    =    4    +    n    -    1;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
576	[BUG]  [BUGGY]  final  double  j  =  4  *  step  -  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  4  *  step  -  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  4  *  step  -  1;	      final    double    j    =    4    *    n    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
577	[BUG]  [BUGGY]  int  j  =  3  *  n  -  1;  danst  j  =  3  *  n  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  3  *  n  -  1;  danst  j  =  3  *  n  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    3    *    n    -    1;    danst  j  =  3  *  n  -  1;	  	non-compiled	[CE]  <identifier>  expected	7	None	add
578	[BUG]  [BUGGY]  final  double  j  =  work[4  *(n  -  1)]  +  step;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[4  *(n  -  1)]  +  step;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[4  *(n  -  1)]  +  step;	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
579	[BUG]  [BUGGY]  final  double  j  =  work[4  *(n  -  1)  +  step];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[4  *(n  -  1)  +  step];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[4  *(n  -  1)  +  step];	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
580	[BUG]  [BUGGY]  final  double  j  =  work[4  *(n  -  1)]  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  work[4  *(n  -  1)]  +  1;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  work[4  *(n  -  1)]  +  1;	      final    double    j    =    work[4    *(n    -    1)];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
581	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  i  =  1;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  i  =  1;  i  <  n;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
582	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  int  i  =  0;  i  <  k;  i++)  {  final  double  tmp  =  work[i  +  k];  if(tmp  ==  null)  {  return  false;  }	      for(int    i    =    0;    i    <    n;    i++)    {    final    double    tmp    =    work[i    +    k];    if(tmp    ==    null)    {    return    false;    }    	non-compiled	[CE]  >  expected	21	None	replace
583	[BUG]  [BUGGY]  int  j  =  4  *  work.length  -  1  +  step;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work.length  -  1  +  step;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work.length  -  1  +  step;	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
584	[BUG]  [BUGGY]  int  j  =  4  *  work[4  *  work.length  -  1];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  4  *  work[4  *  work.length  -  1];  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int  j  =  4  *  work[4  *  work.length  -  1];	  int    j    =    4    *    work.length    -    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
585	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
586	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  6;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  6;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  6;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
587	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[j  -  1];  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  step;  j++)  {  final  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  <identifier>  expected	22	None	replace
588	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  /(n  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  /(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  /(n  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
589	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  *(step  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  *(step  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  *(step  -  1);	      final    double    tmp    =    work[1]    *(n    -    1);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
590	[BUG]  [BUGGY]  final  double  j  =  Math.max(work[0],  work[1],  step);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  j  =  Math.max(work[0],  work[1],  step);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  j  =  Math.max(work[0],  work[1],  step);	      final    double    j    =    Math.max(work[0],    step);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
591	[BUG]  [BUGGY]  final  double[]  work  =(double[])work.remove(n  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double[]  work  =(double[])work.remove(n  -  1);  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double[]  work  =(double[])work.remove(n  -  1);	      final    double[]    work    =(double[])work.get(n    -    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
592	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  step]  *  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  step]  *  2;  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  step]  *  2;	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  <identifier>  expected	47	None	replace
593	[BUG]  [BUGGY]  final  double  tmp  =  work[1  +  step  1];  [CE]  ']'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1  +  step  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1  +  step  1];	      final    double    tmp    =    work[1    +    step];    	non-compiled	[CE]  ']'  expected	47	None	replace
594	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  n  +  step;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  <identifier>  expected	29	None	replace
595	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  4;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  <identifier>  expected	29	None	replace
596	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[i  +  1];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[i  +  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  1;  j++)  {  final  double  tmp  =  work[i  +  1];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  <identifier>  expected	29	None	replace
597	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  k;  j++)  {  final  double  tmp  =  work[i  +  j];	      for(int    j    =    0;    j    <    n;    j++)    {    final    double    tmp    =    work[i    +    j];    	non-compiled	[CE]  <identifier>  expected	29	None	replace
598	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  double  tmp  =  work[j  -  1];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  for(int  j  =  0;  j  <  1;  j++)  {  double  tmp  =  work[j  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	for(int  j  =  0;  j  <  1;  j++)  {  double  tmp  =  work[j  -  1];	      for(int    j    =    0;    j    <    n;    j++)    {    double    tmp    =    work[j    -    1];    	non-compiled	[CE]  <identifier>  expected	31	None	replace
599	[BUG]  [BUGGY]  final  double  tmp  =  work[1]  +  n  -  1];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  final  double  tmp  =  work[1]  +  n  -  1];  [BUGGY]    int  j  =  4  *  n  -  1;  for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	final  double  tmp  =  work[1]  +  n  -  1];	      final    double    tmp    =    work[1    +    n    -    1];    	non-compiled	[CE]  ';'  expected	36	None	replace
600	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n.  -  1;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  n.  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    int  j  =  5  *  n.  -  1;	  	non-compiled	[CE]  <identifier>  expected	9	None	add
601	[BUG]  [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  (n  -  1);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    private  boolean  flipIfWarranted(final  int  n,  final  int  step)  {  if  (1.5  *  work[pingPong]  <  work[4  *  (n  -  1)  +  pingPong])  {      [BUGGY]  int  j  =  5  *  n  -  1;  int  j  =  5  *  (n  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  j;  i  +=  4)  {  for  (int  k  =  0;  k  <  4;  k  +=  step)  {  final  double  tmp  =  work[i  +  k];  work[i  +  k]  =  work[j  -  k];  work[j  -  k]  =  tmp;  }  j  -=  4;  }  return  true;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  flipIfWarranted  [RETURN_TYPE]  boolean  final  int  n  final  int  step  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  absDCurrent  absDPrevious  alpha  b  b2  beta  c  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eps  g  invIJ  lambda  largestRoot  lower  lowerSpectra  max  mij  minPivot  mji  offDiagMax  offDiagMin  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  deflatedEnd  end  fourI  i  i0  index  j  k  l  lowerStart  m  maxIter  n  n0  nColB  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	1.0	1135	1135	1	replace	int    j    =    5    *    n    -    1;    int  j  =  5  *  (n  -  1);	  	non-compiled	[CE]  <identifier>  expected	9	None	add
