projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*step-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*n+1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=1*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=3*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=5*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=2*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*pingPong-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135ArrayRealVector[]work=(ArrayRealVector[])n.clone();
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[i+k];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135ArrayRealVectorwork=(ArrayRealVector)n.clone();
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(inti=0;i<n;i++){finaldoubletmp=work[i+k];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[i+k];if(tmp==null){returnfalse;}
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[i+k];if(tmp!=null){returnfalse;}
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[i+k];if(tmp>=null){returnfalse;}
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(inti=0;i<n;i++){finaldoubletmp=work[i+k];if(tmp==null){returnfalse;}
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[j-1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*(n-1);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*work[n-1]-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoublej=4*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldouble[]work=(double[])n.clone();
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[4*(n-1)];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[0];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){finaldoubletmp=work[i+j];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoublej=work[4*(n-1)];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135for(intj=0;j<n;j++){doubletmp=work[j-1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*work[n-1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*workPong-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4*work.length-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldouble[]work=(double[])work.clone();
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[1+n-1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldouble[]work=(double[])work.get(n-1);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoublej=Math.min(n,step);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[0];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoublej=(double)work[1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoublej=Math.max(work[0],step);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoublej=Math.min(work.length,n-1);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=1<<work.length;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135if(step==1){returnfalse;}
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[1]*(n-1);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[1+step];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[2*(n-1)];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=1<<work[1];
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135finaldoubletmp=work[1]*(n+step);
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=6*n-1;
projects/Math80/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java1135intj=4+n-1;
