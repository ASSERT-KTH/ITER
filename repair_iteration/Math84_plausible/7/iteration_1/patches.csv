bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length];  [CE]  cannot  find  symbol  best  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.length];	      	non-compiled	[CE]  cannot  find  symbol  best	3	None	replace
2	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex.toArray(new  RealPointValuePair[original.size()  ]);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex.toArray(new  RealPointValuePair[original.size()  ]);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex.toArray(new  RealPointValuePair[original.size()  ]);	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[1];  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    OptimizationException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    original[1];    final  RealPointValuePair  best  =  original[1];	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	1	None	add
4	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[2];  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      OptimizationException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[2];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    original[1];    final  RealPointValuePair  best  =  original[2];	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	1	None	add
5	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  original[1];  Final  RealPointValuePair  best  =  original[1];  [CE]  ';'  expected  [FE]        OptimizationException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  original[1];  Final  RealPointValuePair  best  =  original[1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    original[1];    Final  RealPointValuePair  best  =  original[1];	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[0];  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          OptimizationException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  original[1];  final  RealPointValuePair  best  =  original[0];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final    RealPointValuePair    best    =    original[1];    final  RealPointValuePair  best  =  original[0];	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	1	None	add
7	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[2];  [CE]  cannot  find  symbol  best  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[2];	      final    RealPointValuePair[]    reflectedSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  best	7	None	replace
8	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[1];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[1];	  final    RealPointValuePair    best    =    new    RealPointValuePair[0];    	non-compiled	[CE]  incompatible  types	10	None	replace
9	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[2];  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[2];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[2];	  final    RealPointValuePair    best    =    new    RealPointValuePair[0];    	non-compiled	[CE]  incompatible  types	10	None	replace
10	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  new  RealPointValuePair[original.length];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  new  RealPointValuePair[original.length];	  final    RealPointValuePair    best    =    new    RealPointValuePair[0];    	non-compiled	[CE]  incompatible  types	10	None	replace
11	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[1];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[1];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original[1];	      final    RealPointValuePair[]    reflectedSimplex    =    original[0];    	non-compiled	[CE]  incompatible  types	9	None	replace
12	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex[0];  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex[0];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex[0];	      final    RealPointValuePair[]    reflectedSimplex    =    original[0];    	non-compiled	[CE]  incompatible  types	9	None	replace
13	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  original[0];  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  simplex,  original[0];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  simplex,  original[0];	      final    RealPointValuePair[]    reflectedSimplex    =    original[0];    	non-compiled	[CE]  ']'  expected	9	None	replace
14	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [CE]  cannot  find  symbol  best  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];	      final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    	non-compiled	[CE]  cannot  find  symbol  best	14	None	replace
15	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  false);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  Comparator  comparator  =  comparator.get(original,  false);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  false);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
16	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  Comparator  comparator  =  iterateSimplex(original);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  iterateSimplex(original);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
17	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  true);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  Comparator  comparator  =  comparator.get(original,  true);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  true);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
18	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
19	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
20	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	add
21	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	add
22	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  Final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  Final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    Final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];	  	non-compiled	[CE]  ';'  expected	11	None	add
23	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	add
24	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	add
25	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[2];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	add
26	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  Final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  Final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    Final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];	  	non-compiled	[CE]  ';'  expected	13	None	add
27	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	add
28	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  simplex;	      final    RealPointValuePair[]    original    =    reflectedSimplex;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	6	None	replace
29	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[0],  comparator);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original[0],  comparator);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original[0],  comparator);	      final    RealPointValuePair[]    reflectedSimplex    =    original[0];    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  khi;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  original  =  khi;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  khi;	      final    RealPointValuePair[]    original    =    reflectedSimplex;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	6	None	replace
31	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(original,  0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  Comparator  comparator  =  comparator.get(original,  0);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(original,  0);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
32	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);	      	compilable	  [FE]  OptimizationException  	3	4	replace
33	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [FE]  OptimizationException  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  1.0,  comparator);	      	compilable	  [FE]  OptimizationException  	3	4	replace
34	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	add	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);	      	compilable	  [FE]  OptimizationException  	3	4	replace
35	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [FE]  OptimizationException  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(original,  1.0,  comparator);	      	compilable	  [FE]  OptimizationException  	3	4	replace
36	[BUG]  [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];  [CE]  cannot  find  symbol  best  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[3];	      final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol  best	12	None	replace
37	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  original  =  comparator;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  original  =  comparator;	      final    RealPointValuePair[]    original    =    reflectedSimplex;    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	6	None	replace
38	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  Comparator  comparator  =  comparator.get(relativeSimplex);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	Comparator  comparator  =  comparator.get(relativeSimplex);	      Comparator    comparator    =    comparator.get(original);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	replace
39	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.size()  ];  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.size()  ];  [BUGGY]      final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  new  RealPointValuePair[simplex.size()  ];	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
40	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.length;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]  final  RealPointValuePair[]  reflectedSimplex  =  original.length;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	final  RealPointValuePair[]  reflectedSimplex  =  original.length;	      final    RealPointValuePair[]    reflectedSimplex    =    original[0];    	non-compiled	[CE]  incompatible  types	9	None	replace
41	[BUG]  [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;    [BUGGY]      final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[1];  final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	70	70	2	replace	        final    RealPointValuePair[]    originalSimplex    =    new    RealPointValuePair[1];    final  RealPointValuePair[]  originalSimplex  =  new  RealPointValuePair[0];	  	non-compiled	[CE]  variable  originalSimplex  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	13	None	add
