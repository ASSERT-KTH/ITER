bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  0;  i  <  n  +  1;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	4	4	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  ++i)  {  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n  +  1;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  AssertionError  	4	4	replace
3	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  0;  i  <  n  +  2;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n  +  2;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
5	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  gamma);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
6	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  false);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
7	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  n,  xSmallest);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
8	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  null);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
9	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  true);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
10	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false,  coeff);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
11	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  false);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
12	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  false,  true);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
13	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoef(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoef(),  coeff;	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
14	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoef()  +  1;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoef()  +  1;	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
15	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoef();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
16	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(simplex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
17	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  n);	  final    double[]    coeff    =    comparator.getCoeff(simplex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
18	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  null,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
19	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
20	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  null);	  double[]    coeff    =    comparator.getValue(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    for(int  i  =  1;  i  <  n  +  2;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
22	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n  +  2;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
23	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  int  i  =  1;  i  <  n  +  2;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    int  i  =  1;  i  <  n  +  2;  ++i)  {	  	non-compiled	[CE]  >  expected	8	None	add
24	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  For(int  i  =  1;  i  <  n  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  For(int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    For(int  i  =  1;  i  <  n  +  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	8	None	add
25	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  for(int  i  =  1;  i  <  n  +  2)  {  ++i)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  for(int  i  =  1;  i  <  n  +  2)  {  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    for(int  i  =  1;  i  <  n  +  2)  {  ++i)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
26	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getRealPointValuePair(xSmallest);	  double[]    coeff    =    comparator.getRealPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
27	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getRealPointValuePair(n);	  double[]    coeff    =    comparator.getRealPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
28	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getRealPointValuePair(xSmallest,  n);	  double[]    coeff    =    comparator.getRealPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
29	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
30	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(n,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	34	None	replace
31	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  0;  i  <  n;  ++i)  {  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    for(int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	37	None	replace
32	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    for(int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	37	None	replace
33	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getPointRef();  for(int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    for(int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	37	None	replace
34	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[1].getCoeff();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[1].getCoeff();	  final    double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
35	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef(),  comparator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef(),  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[1].getPointRef(),  comparator);	  final    double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  ';'  expected	49	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]                NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    For(int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  '.class'  expected	40	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  1;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]                  NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  For(int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    For(int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  '.class'  expected	40	None	replace
38	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs()  +  1;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeffs()  +  1;	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
39	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeffs(),  coeff;	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
40	[BUG]  [BUGGY]  double[]  coeff  =  xSmallest[1].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  xSmallest[1].getPointRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  xSmallest[1].getPointRef();	  double[]    coeff    =    xSmallest[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  1;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]        NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    (int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  >  expected	83	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  1;  i  <  n;  ++i)  {  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    (int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();	  for(int    i    =    1;    i    <    n;    ++i)    {    (int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
44	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator[0].getCoeff();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
45	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[1].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator[1].getPointRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator[1].getPointRef();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
46	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator[0].getRealPointValuePair();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	47	None	replace
47	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[1].getCoef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[1].getCoef();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
48	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator[0].getCoef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[0].getCoef();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
49	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoef(),  comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[0].getCoef(),  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[0].getCoef(),  comparator;	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
50	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(coeff,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(coeff,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(coeff,  xSmallest);	  double[]    coeff    =    comparator.compareTo(xSmallest,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
51	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  coeff,  n);	  double[]    coeff    =    comparator.compareTo(xSmallest,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
52	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  coeff,  gamma);	  double[]    coeff    =    comparator.compareTo(xSmallest,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
53	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
54	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  n);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
55	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
56	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n  +  1,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n  +  1,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
57	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff  +  1);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
58	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
59	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  null,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  null,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  null,  coeff);	  double[]    coeff    =    comparator.compareTo(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
60	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  gamma);	  double[]    coeff    =    comparator.compareTo(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff!=    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
62	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff!=    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
63	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff!=    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
64	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  0;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  0;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();  if(coeff!=  null)  {  for(int  i  =  0;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff!=    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff    ==    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
66	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff    ==    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
67	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[0].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff    ==    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
68	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  0;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  0;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  0;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff    ==    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
69	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff,  gamma);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
70	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  n);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
71	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(coeff,  n,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(coeff,  n,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(coeff,  n,  gamma);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
72	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
73	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  simplex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  simplex);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  simplex);	  double[]    coeff    =    comparator.compareTo(xSmallest,    simplex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
74	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(simplex,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(simplex,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(simplex,  xSmallest);	  double[]    coeff    =    comparator.compareTo(xSmallest,    simplex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
75	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  simplex,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  simplex,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  simplex,  n);	  double[]    coeff    =    comparator.compareTo(xSmallest,    simplex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
76	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory().coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory().coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory().coeff;	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
77	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
78	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory().comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory().comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory().comparator;	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
79	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
80	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
81	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(n,  xSmallest  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(n,  xSmallest  +  1,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(n,  xSmallest  +  1,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
82	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
83	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  coeff);	  double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  0;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    final    int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  >  expected	52	None	replace
85	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[1].getCoeff();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[1].getCoeff();	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
86	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator[0].getCoeff();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[0].getCoeff();	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
87	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff  +  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
88	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
89	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeff(),  coeff;	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
90	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeff(xSmallest);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
91	[BUG]  [BUGGY]  Double[]  coeff  =  comparator!=  null?  null  :  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator!=  null?  null  :  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator!=  null?  null  :  comparator.comparator;	  Double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
92	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.coeff;	  Double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();	  for(int    i    =    1;    i    <    n;    ++i)    {    int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	51	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  1;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  >  expected	51	None	replace
95	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
96	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  xSmallest.length);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
97	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest  +  1,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  xSmallest  +  1,  n);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
98	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  n  +  1,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(n,  n  +  1,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  n  +  1,  xSmallest.length);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
99	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  0,  coeff);	  double[]    coeff    =    comparator.compareTo(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
100	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  xSmallest.length);	  double[]    coeff    =    comparator.compareTo(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
101	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  0,  coeff,  n);	  double[]    coeff    =    comparator.compareTo(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
102	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointRef(),  coeff;	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
103	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef()  +  1;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointRef()  +  1;	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
104	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef()  +  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef()  +  n;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointRef()  +  n;	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
105	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
106	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  xSmallest  +  1);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
107	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
108	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  xSmallest  +  1);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
109	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1],  coeff);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1],  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1],  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1);    	non-compiled	[CE]  ')'  expected	18	None	replace
110	[BUG]  [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.coeff;	  double[]    coeff    =    comparator!=    null?    Double.NaN    :    comparator.coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
111	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointValuePair(xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getPointValuePair(xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPointValuePair(xSmallest);	  double[]    coeff    =    comparator.getPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
112	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointValuePair(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getPointValuePair(n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPointValuePair(n);	  double[]    coeff    =    comparator.getPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
113	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoef(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoef(),  coeff;	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
114	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef(),  coeff);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoef(),  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoef(),  coeff);	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  ';'  expected	56	None	replace
115	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef()  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoef()  +  1;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoef()  +  1;	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
116	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[1].getCoef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[1].getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
117	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator;	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
118	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator[0].getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	65	None	replace
119	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getComparator(xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getComparator(xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getComparator(xSmallest);	  double[]    coeff    =    comparator.getComparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
120	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  coeff);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
121	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  coeff,  n);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
122	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n,  coeff);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
123	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  0,  n);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
124	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  For(int  i  =  0;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	For(int  i  =  0;  i  <  n  +  1;  ++i)  {	  For(int    i    =    0;    i    <    n;    ++i)    {    	non-compiled	[CE]  '.class'  expected	53	None	replace
125	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  For(int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	For(int  i  =  1;  i  <  n;  ++i)  {	  For(int    i    =    0;    i    <    n;    ++i)    {    	non-compiled	[CE]  '.class'  expected	53	None	replace
126	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  n  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  For(int  i  =  0;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	For(int  i  =  0;  i  <  n  +  2;  ++i)  {	  For(int    i    =    0;    i    <    n;    ++i)    {    	non-compiled	[CE]  '.class'  expected	53	None	replace
127	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  false);	  double[]    coeff    =    comparator.compareTo(xSmallest,    Double.NaN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
128	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  true);	  double[]    coeff    =    comparator.compareTo(xSmallest,    Double.NaN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
129	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  Double.NaN);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  Double.NaN);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  Double.NaN);	  double[]    coeff    =    comparator.compareTo(xSmallest,    Double.NaN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
130	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPoint(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getPoint(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPoint(),  coeff;	  double[]    coeff    =    comparator.getPoint();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  for(int  i  =  2;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  for(int  i  =  2;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    2;    i    <    n;    ++i)    {    for(int  i  =  2;  i  <  n;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
132	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  For(int  i  =  2;  i  <  n;  ++i)  {  [CE]  '.class'  expected  [FE]      NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  For(int  i  =  2;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    2;    i    <    n;    ++i)    {    For(int  i  =  2;  i  <  n;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	10	None	add
133	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  int  i  =  2;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  int  i  =  2;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    2;    i    <    n;    ++i)    {    int  i  =  2;  i  <  n;  ++i)  {	  	non-compiled	[CE]  >  expected	10	None	add
134	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  int  n  =  2;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]          NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  int  n  =  2;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    2;    i    <    n;    ++i)    {    int  n  =  2;  i  <  n;  ++i)  {	  	non-compiled	[CE]  >  expected	10	None	add
135	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  final  int  i  =  2;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]            NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  final  int  i  =  2;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    2;    i    <    n;    ++i)    {    final  int  i  =  2;  i  <  n;  ++i)  {	  	non-compiled	[CE]  >  expected	10	None	add
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]          NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
138	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  false);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
139	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(n,  xSmallest,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(n,  xSmallest,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(n,  xSmallest,  true);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
140	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  false);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
141	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  true);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
142	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  n);  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  coeff,  n);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
143	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  xSmallest,  n);  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  xSmallest,  n);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
144	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  xSmallest);  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  n,  xSmallest);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
145	[BUG]  [BUGGY]  double[]  coeff  =  comparator.coeff,  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.coeff,  n;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.coeff,  n;	  double[]    coeff    =    comparator.coeff,    coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
146	[BUG]  [BUGGY]  double[]  coeff  =  comparator.coeff,  xSmallest;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.coeff,  xSmallest;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.coeff,  xSmallest;	  double[]    coeff    =    comparator.coeff,    coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
147	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  coeff,  n);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
148	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest  +  1,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  xSmallest  +  1,  n);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
149	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  1,  xSmallest.length);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
150	[BUG]  [BUGGY]  Double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.comparator;	  double[]    coeff    =    comparator    ==    null?    Double.NaN    :    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
151	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  null);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
152	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  null,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  null,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  null,  coeff);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
153	[BUG]  [BUGGY]  double[]  coeff  =  comparator  ==  null?  comparator.comparator  :  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator  ==  null?  comparator.comparator  :  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator  ==  null?  comparator.comparator  :  coeff;	  double[]    coeff    =    comparator!=    null?    comparator.comparator    :    coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	75	None	replace
154	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  xSmallest,  true);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
155	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  true);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
156	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getValue(xSmallest,  n,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getValue(xSmallest,  n,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getValue(xSmallest,  n,  false);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
157	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory().coeff;	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
158	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory().comparator;	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
159	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
160	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
161	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  coeff,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
162	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
163	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  for(int  i  =  0;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    0;    i    <    n;    ++i)    {    for(int  i  =  0;  i  <  n;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  0;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    0;    i    <    n;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  0;  i  <  n;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
166	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    0;    i    <    n;    ++i)    {    int  i  =  0;  i  <  n;  ++i)  {	  	non-compiled	[CE]  >  expected	3	None	add
167	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  xSmallest,  coeff);	  double[]    coeff    =    comparator.getCoeff(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
168	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeff(xSmallest,  n);	  double[]    coeff    =    comparator.getCoeff(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
169	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  gamma);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
170	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  false);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
171	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  null);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
172	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getCoeff();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getCoeff();	  final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
173	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[i].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator[i].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator[i].getPointRef();	  final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
174	[BUG]  [BUGGY]  double[]  coeff  =  comparator[1].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator[1].getPointRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[1].getPointRef();	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
175	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[0].getRealPointValuePair();	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    for(int  i  =  1;  i  <  n  +  1;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
177	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  for(int  i  =  1;  i  <  n  +  1;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
178	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  int  i  =  1;  i  <  n  +  1;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    int  i  =  1;  i  <  n  +  1;  ++i)  {	  	non-compiled	[CE]  >  expected	6	None	add
179	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  For(int  i  =  1;  i  <  n  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  For(int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    For(int  i  =  1;  i  <  n  +  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	6	None	add
180	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  int  i  =  1;  i  <  n  +  1;  ++i)  {  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    final  int  i  =  1;  i  <  n  +  1;  ++i)  {	  	non-compiled	[CE]  >  expected	6	None	add
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  3;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  1;  i  <  n  +  3;  ++i)  {	  for(int    i    =    1;    i    <    n    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
182	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  3;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  3;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n  +  3;  ++i)  {	  for(int    i    =    1;    i    <    n    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
183	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[i].getCoeff();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[i].getCoeff();	  double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
184	[BUG]  [BUGGY]  double[]  coeff  =  comparator[i].getPointRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator[i].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[i].getPointRef();	  double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
185	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  xSmallest,  coeff);	  double[]    coeff    =    comparator.getValue(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
186	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getValue(xSmallest,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getValue(xSmallest,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getValue(xSmallest,  n);	  double[]    coeff    =    comparator.getValue(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
187	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(n,  xSmallest,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(n,  xSmallest,  false);	  double[]    coeff    =    comparator.getValue(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
188	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(xSmallest,  n,  coeff);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
189	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(xSmallest,  n  +  1);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
190	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(n,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(n,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(n,  xSmallest);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
191	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  n,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(xSmallest,  n,  true);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
192	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff()  /  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff()  /  1;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff()  /  1;	  final    double[]    coeff    =    comparator.getCoeff()    +    1;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
193	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  n  +  1;  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  n  +  1;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  n  +  1;	  final    double[]    coeff    =    comparator.getCoeff()    +    1;    	non-compiled	[CE]  ';'  expected	35	None	replace
194	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  false);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
195	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  false,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  false,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  false,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
196	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  2;  i  <  n  +  1;  ++i)  {	  for(int    i    =    2;    i    <    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	11	4	replace
197	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n  +  1;  ++i)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  2;  i  <  n  +  1;  ++i)  {	  for(int    i    =    2;    i    <    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	11	4	replace
198	[BUG]  [BUGGY]  for(int  i  =  0,  n  =  0;  i  <  n;  ++i)  {  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  n  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  n  =  0;  i  <  n;  ++i)  {	  for(int    i    =    2;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	11	None	replace
199	[BUG]  [BUGGY]  double[]  coeff  =  comparator.comeff,  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.comeff,  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.comeff,  coeff;	  double[]    coeff    =    comparator.comeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
200	[BUG]  [BUGGY]  double[]  coeff  =  comparator.comeff,  n);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.comeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.comeff,  n);	  double[]    coeff    =    comparator.comeff;    	non-compiled	[CE]  ';'  expected	70	None	replace
201	[BUG]  [BUGGY]  double[]  coeff  =  comparator.comeff,  n;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.comeff,  n;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.comeff,  n;	  double[]    coeff    =    comparator.comeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
202	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  3;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  3;  i  <  n;  ++i)  {	  for(int    i    =    3;    i    <    =    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	26	4	replace
203	[BUG]  [BUGGY]  for(int  i  =  3;  i  <  n;  ++i)  {  [FE]  NullPointerException  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  3;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  3;  i  <  n;  ++i)  {	  for(int    i    =    3;    i    <    =    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	26	4	replace
204	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
205	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
206	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  n,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
207	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  0,  n);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
208	[BUG]  [BUGGY]  for(int  i  =  0,  n  =  1;  i  <  =  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  n  =  1;  i  <  =  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  n  =  1;  i  <  =  n;  ++i)  {	  for(int    i    =    0,    n    =    0;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
209	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  0,  len  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0,    n    =    0;    i    <    =    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	64	4	replace
210	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  n;  ++i)  {  [FE]  NullPointerException  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  len  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  len  =  0;  i  <  n;  ++i)  {	  for(int    i    =    0,    n    =    0;    i    <    =    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	64	4	replace
211	[BUG]  [BUGGY]  for(int  i  =  0,  n  =  2;  i  <  =  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  n  =  2;  i  <  =  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  n  =  2;  i  <  =  n;  ++i)  {	  for(int    i    =    0,    n    =    0;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
212	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  0,  n);  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  0,  n);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
213	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  n  +  1);  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    2;    i    <    n;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
215	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  gamma,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  gamma,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  gamma,  n);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
216	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  0,  gamma);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
217	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  1);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
218	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  0);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  0);	  double[]    coeff    =    comparator.compareTo(xSmallest,    Double.NaN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
219	[BUG]  [BUGGY]  Double[]  coeff  =  comparator  ==  null?  null  :  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator  ==  null?  null  :  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator  ==  null?  null  :  comparator.comparator;	  Double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
220	[BUG]  [BUGGY]  Double[]  coeff  =  comparator!=  null?  false  :  comparator.comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator!=  null?  false  :  comparator.comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator!=  null?  false  :  comparator.comparator;	  Double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
221	[BUG]  [BUGGY]  final  double[]  coeff  =  original[i].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[i].getCoef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[i].getCoef();	  final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	12	None	replace
222	[BUG]  [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  original[0].comparator;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  original[0].comparator;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator  ==  null?  Double.NaN  :  original[0].comparator;	  double[]    coeff    =    comparator    ==    null?    Double.NaN    :    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	60	None	replace
223	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoef(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoef(coeff);	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
224	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  xOriginal);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  xOriginal);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  xOriginal);	  double[]    coeff    =    comparator.compareTo(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
225	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  0,  false);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
226	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  null,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  null,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  null,  false);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
227	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  true);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
228	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0,  n  =  1;  i  <  =  0;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  n  =  1;  i  <  =  0;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  n  =  1;  i  <  =  0;  ++i)  {	  for(int    i    =    0,    n    =    0;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  =  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0,  j  =  0;  i  <  =  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0,  j  =  0;  i  <  =  n;  ++i)  {	  for(int    i    =    0,    n    =    0;    i    <    =    n;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
231	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
232	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  2);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  2);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	15	None	replace
233	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoef(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoef(coeff);	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
234	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoef(n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoef(n);	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
235	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  original);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  original);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  original);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
236	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[1].getPointRef();  if(coeff!=  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff!=    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
237	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeff(coeff);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
238	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  false);	  final    double[]    coeff    =    comparator.getCoeff(xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	33	None	replace
239	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  xSmallest);	  double[]    coeff    =    comparator.compareTo(xSmallest,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	84	None	replace
240	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  -  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  n  -  1);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
241	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeffs(coeff);	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	81	None	replace
242	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  -  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  -  1);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
243	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  0;  i  <  1;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	4	4	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  1;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  NullPointerException  	4	4	replace
245	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n  +  1,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  n  +  1,  n);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
246	[BUG]  [BUGGY]  final  int  i  =  1;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    final    int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  >  expected	52	None	replace
247	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  xSmallest,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  xSmallest,  false);	  double[]    coeff    =    comparator.getCoeff(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
248	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  2;  i  <  n  +  2;  ++i)  {	  for(int    i    =    1;    i    <    n    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
249	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  n  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  2;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  2;  i  <  n  +  2;  ++i)  {	  for(int    i    =    1;    i    <    n    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	4	replace
250	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  comparator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  comparator);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
251	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  2);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n  +  2);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	42	None	replace
252	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  *  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  1;  i  <  n  *  2;  ++i)  {	  for(int    i    =    1;    i    <    n    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
253	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  *  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  *  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n  *  2;  ++i)  {	  for(int    i    =    1;    i    <    n    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	4	replace
254	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  0,  true);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
255	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  true);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  true);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
256	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  original.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  original.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  original.length);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
258	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  int  i  =  1;  i  <  n  +  2;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  int  i  =  1;  i  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    final  int  i  =  1;  i  <  n  +  2;  ++i)  {	  	non-compiled	[CE]  >  expected	8	None	add
259	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  [CE]  reached  end  of  file  while  parsing  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    final  double[]  coeff  =  original[0].getPointRef();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
260	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getRealPointValuePair(coeff);	  double[]    coeff    =    comparator.getRealPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
261	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  0,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  0,  coeff);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
262	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory(n);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
263	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory(coeff);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
264	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFactory(),  coeff;	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
265	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(xSmallest,  0,  n);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
266	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  gamma);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
267	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  0,  null);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
268	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[1].getPointRef();  if(coeff  ==  null)  {  for(int  i  =  1;  i  <  n;  ++i)  {  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    if(coeff    ==    null)    {    for(int    i    =    1;    i    <    n;    ++i)    {    }    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
269	[BUG]  [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.toDouble();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.toDouble();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.toDouble();	  double[]    coeff    =    comparator!=    null?    Double.NaN    :    comparator.coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	63	None	replace
270	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  gamma);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
271	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  false);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
272	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  0,  coeff);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
273	[BUG]  [BUGGY]  double[]  coeff  =  original[i].getCoef();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[i].getCoef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[i].getCoef();	  double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
274	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointValuePair(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getPointValuePair(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPointValuePair(coeff);	  double[]    coeff    =    comparator.getPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
275	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  0,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  0,  xSmallest.length);	  double[]    coeff    =    comparator.compareTo(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
276	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointValuePair();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointValuePair();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointValuePair();	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
277	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointRef(coeff);	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[1].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[1].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  final  double[]  coeff  =  original[1].getPointRef();	  for(int    i    =    1;    i    <    n;    ++i)    {    (int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
279	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  false);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
280	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  null,  false);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
281	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory(n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory(n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory(n);	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
282	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory(coeff);	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
283	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoefFactory();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoefFactory();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoefFactory();	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
284	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  original[n  +  1]);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  original[n  +  1]);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  original[n  +  1]);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
286	[BUG]  [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.doubleValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.doubleValue();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator  ==  null?  Double.NaN  :  comparator.doubleValue();	  double[]    coeff    =    comparator!=    null?    Double.NaN    :    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	59	None	replace
287	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  null,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  null,  n);	  double[]    coeff    =    comparator.getValue(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
288	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  null);	  double[]    coeff    =    comparator.getValue(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    final  double[]  coeff  =  original[0].getPointRef();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
290	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n  *  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	add	for(int  i  =  0;  i  <  n  *  n;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n  *  n;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    NullPointerException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n  *  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n  *  n;  ++i)  {	  for(int    i    =    0;    i    <    n;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
292	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  khi);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  khi);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  khi);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    gamma);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	32	None	replace
293	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointValueRef();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointValueRef();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointValueRef();	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
294	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef(),  coeff);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalPointRef(),  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalPointRef(),  coeff);	  double[]    coeff    =    comparator.getOriginalPointRef();    	non-compiled	[CE]  ';'  expected	28	None	replace
295	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator);	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  ';'  expected	65	None	replace
296	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  null);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  null);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  null);	  final    double[]    coeff    =    comparator.getCoeff(simplex);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
297	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair(coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getRealPointValuePair(coeff,  n);	  double[]    coeff    =    comparator.getRealPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
298	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFraction();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoefFraction();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoefFraction();	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	56	None	replace
299	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory(simplex);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFactory(simplex);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFactory(simplex);	  double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[0].getPointRef();  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    1;    ++i)    {    final  double[]  coeff  =  original[0].getPointRef();  for(int  i  =  1;  i  <  n  +  1;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
301	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  comparator);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n,  coeff,  comparator);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	41	None	replace
302	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(xSmallest,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(xSmallest,  coeff);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
303	[BUG]  [BUGGY]  double[]  coeff  =  comparator.combine(coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.combine(coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.combine(coeff,  n);	  double[]    coeff    =    comparator.combine(xSmallest,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	25	None	replace
304	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n  +  1,  n  +  1);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	76	None	replace
305	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getPointRef(),  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator[0].getPointRef(),  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator[0].getPointRef(),  coeff;	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	45	None	replace
306	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  n  +  1,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  n  +  1,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(n,  n  +  1,  xSmallest.length);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
307	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  +  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  +  1,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  0,  n  +  1,  n);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
308	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
309	[BUG]  [BUGGY]  Double[]  coeff  =  comparator!=  null?  comparator.comparator  :  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator!=  null?  comparator.comparator  :  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator!=  null?  comparator.comparator  :  coeff;	  Double[]    coeff    =    comparator.comparator;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
310	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPoint(),  coeff);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getPoint(),  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPoint(),  coeff);	  double[]    coeff    =    comparator.getPoint();    	non-compiled	[CE]  ';'  expected	74	None	replace
311	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  coeff,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  coeff,  false);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	21	None	replace
312	[BUG]  [BUGGY]  int  i  =  1;  i  <  n;  ++i)  {  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  int  i  =  1;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	int  i  =  1;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  >  expected	51	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }  [CE]  invalid  method  declaration;  return  type  required  [FE]        NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  1;  i  <  n  +  1;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  }	  for(int    i    =    1;    i    <    n;    ++i)    {    final    double[]    coeff    =    original[i].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
314	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  n;  ++i)  {  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int  i  =  0;  i  <  n;  ++i)  {  (int  i  =  0;  i  <  n;  ++i)  {	  for(int    i    =    1;    i    <    n;    ++i)    {    (int    i    =    1;    i    <    n;    ++i)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
315	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoefFactory();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[0].getCoefFactory();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[0].getCoefFactory();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	54	None	replace
316	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  Double.NaN,  coeff);	  double[]    coeff    =    comparator.compareTo(xSmallest,    Double.NaN);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
317	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  original[0].getCoeff(coeff);	  final    double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	48	None	replace
318	[BUG]  [BUGGY]  double[]  coeff  =  xSmallest[0].getCoeff();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  xSmallest[0].getCoeff();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  xSmallest[0].getCoeff();	  double[]    coeff    =    xSmallest[0].getPointRef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	77	None	replace
319	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointValuePairs();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getPointValuePairs();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getPointValuePairs();	  double[]    coeff    =    comparator.getPointValuePair();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
320	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoeff(coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  original[0].getCoeff(coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  original[0].getCoeff(coeff);	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	46	None	replace
321	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
322	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  n  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  n  +  1);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.getValue(xSmallest,    n    +    1);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
323	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(coeff,  gamma);  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(coeff,  gamma);	  double[]    coeff    =    comparator.calculateCoeff(coeff,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
324	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(xSmallest,  n,  coeff,  false);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
325	[BUG]  [BUGGY]  double[]  coeff  =  comparator.compareTo(coeff,  n,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.compareTo(coeff,  n,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.compareTo(coeff,  n,  false);	  double[]    coeff    =    comparator.compareTo(xSmallest,    n,    false);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
326	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  gamma);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  gamma);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  gamma);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
327	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
328	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n  +  2;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  for(int  i  =  1;  i  <  n  +  2;  ++i)  {  final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n  +  2;  ++i)  {  [BUGGY]      final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	for(int    i    =    1;    i    <    n    +    2;    ++i)    {    final  double[]  coeff  =  original[i].getPointRef();  for(int  j  =  0;  j  <  n  +  2;  ++i)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
329	[BUG]  [BUGGY]  double[]  coeff  =  comparator.comeff,  coeff);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.comeff,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.comeff,  coeff);	  double[]    coeff    =    comparator.comeff;    	non-compiled	[CE]  ';'  expected	70	None	replace
330	[BUG]  [BUGGY]  double[]  coeff  =  comparator.comeff  -  coeff;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.comeff  -  coeff;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.comeff  -  coeff;	  double[]    coeff    =    comparator.comeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	70	None	replace
331	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  *  1,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  *  1,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  *  1,  n);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
332	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  xSmallest.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  xSmallest.length);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n  +  1,  xSmallest.length);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
333	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(simplex,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(simplex,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(simplex,  n);	  double[]    coeff    =    comparator.getValue(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
334	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(coeff,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(coeff,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(coeff,  n);	  double[]    coeff    =    comparator.getValue(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	19	None	replace
335	[BUG]  [BUGGY]  double[]  coeff  =  comparator.coeff,  coeff,  gamma;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.coeff,  coeff,  gamma;  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.coeff,  coeff,  gamma;	  double[]    coeff    =    comparator.coeff,    coeff;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	71	None	replace
336	[BUG]  [BUGGY]  double[]  coeff  =  comparator.coeff,  coeff);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.coeff,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.coeff,  coeff);	  double[]    coeff    =    comparator.coeff,    coeff;    	non-compiled	[CE]  ';'  expected	71	None	replace
337	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getOriginalComparator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getOriginalComparator();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getOriginalComparator();	  double[]    coeff    =    comparator.getComparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
338	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  false);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  false);	  double[]    coeff    =    comparator.getValue(xSmallest,    null);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
339	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  0,  n);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	79	None	replace
340	[BUG]  [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  comparator);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  comparator);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.calculateCoeff(xSmallest,  n,  coeff,  comparator);	  double[]    coeff    =    comparator.calculateCoeff(xSmallest,    n,    coeff);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	14	None	replace
341	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeffs();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  Double[]  coeff  =  comparator.getCoeffs();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	Double[]  coeff  =  comparator.getCoeffs();	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
342	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  true,  coeff);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getValue(xSmallest,  n,  true,  coeff);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getValue(xSmallest,  n,  true,  coeff);	  double[]    coeff    =    comparator.getValue(xSmallest,    n,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
343	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFraction();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoefFraction();  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoefFraction();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
344	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  0,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  0,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  0,  n);	  double[]    coeff    =    comparator.getCoeff(xSmallest,    0,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
345	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(simplex,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionError      [CONTEXT]      final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];      [BUGGY]  double[]  coeff  =  comparator.getCoeff(simplex,  n);  [BUGGY]      for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  evaluateSimplex(comparator);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	121	121	2	replace	double[]  coeff  =  comparator.getCoeff(simplex,  n);	  double[]    coeff    =    comparator.getCoeff(n,    xSmallest);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
