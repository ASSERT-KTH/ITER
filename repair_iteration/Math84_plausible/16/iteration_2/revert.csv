projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getComparator();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<N;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=3;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff()+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();if(coeff!=null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();if(coeff==null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){For(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finalinti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121For(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator!=null?Double.NaN:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?Double.NaN:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator!=null?Double.NaN:comparator.coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,n=0;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,Double.NaN);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff,coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPoint();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator!=null?comparator.comparator:coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=xSmallest[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeffs();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,coeff,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff,n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,coeff,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,false,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,0,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,false,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoef(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoef()+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,null,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){for(inti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){finaldouble[]coeff=original[i].getPointRef();for(inti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){inti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){For(inti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){for(inti=1;i<n+2){++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();for(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getPointRef();for(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getPointRef(),comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){For(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){For(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeffs()+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeffs(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=xSmallest[1].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finalinti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[1].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[0].getRealPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[1].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[0].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoef(),comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(coeff,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n+1,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,coeff+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,null,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[i].getPointRef();if(coeff!=null){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();if(coeff!=null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getPointRef();if(coeff!=null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();if(coeff!=null){for(inti=0;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[i].getPointRef();if(coeff==null){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();if(coeff==null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getPointRef();if(coeff==null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getPointRef();if(coeff==null){for(inti=0;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(coeff,n,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(simplex,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,simplex,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory().coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory().translate(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory().comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(n,xSmallest+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.calculateCoeff(xSmallest,n+1,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finalinti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[1].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator!=null?null:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,n+1,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,0,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef()+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef()+n;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,xSmallest+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1],coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?Double.NaN:comparator.coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointValuePair(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointValuePair(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoef(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoef(),coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoef()+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoef(),comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[0].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getComparator(xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121For(inti=0;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121For(inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121For(inti=0;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,Double.NaN,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,Double.NaN,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,Double.NaN);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPoint(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){for(inti=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){For(inti=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){inti=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){intn=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){finalinti=2;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[i].getPointRef();}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n;++i){finaldouble[]coeff=original[i].getPointRef();}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(n,xSmallest,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.calculateCoeff(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff,n;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff,xSmallest;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,xSmallest+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+1,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator==null?Double.NaN:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,null,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?comparator.comparator:coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,0,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getValue(xSmallest,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory().coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory().comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory().translate(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){for(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[i].getPointRef();for(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[1].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[0].getRealPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){for(inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){finaldouble[]coeff=original[i].getPointRef();for(inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){For(inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){finalinti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+3;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[i].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getValue(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(n,xSmallest,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(n,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,n,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff()/1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(),n+1;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,0,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,false,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,n=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff,coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff,n;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=3;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,n=1;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,len=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,n=2;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n;++i){finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,gamma,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,0,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,Double.NaN,0);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator==null?null:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator!=null?false:comparator.comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[i].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?Double.NaN:original[0].comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoef(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,xOriginal);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,null,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,n=1;i<=0;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0,j=0;i<=n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+2);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoef(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoef(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,original);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getPointRef();if(coeff!=null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(xSmallest,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,n-1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeffs(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,n-1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finalinti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,xSmallest,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=2;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n+2);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n*2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,0,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,0,true);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1,original.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){finalinti=1;i<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){finaldouble[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,0,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFactory(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,0,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[1].getPointRef();if(coeff==null){for(inti=1;i<n;++i){}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?Double.NaN:comparator.toDouble();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,0,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[i].getCoef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointValuePair(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,0,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointValuePair();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){finaldouble[]coeff=original[1].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,null,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory(n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoefFactory();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,original[n+1]);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){finaldouble[]coeff=original[i].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator==null?Double.NaN:comparator.doubleValue();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,null,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){finaldouble[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n*n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,khi);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointValueRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalPointRef(),coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoef(),comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff,null);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getRealPointValuePair(coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoefFraction();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFactory(simplex);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){finaldouble[]coeff=original[0].getPointRef();for(inti=1;i<n+1;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(xSmallest,n,coeff,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(xSmallest,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.combine(coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n+1,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator[0].getPointRef(),coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(n,n+1,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,0,n+1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator!=null?comparator.comparator:coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPoint(),coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,coeff,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121inti=1;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+1;++i){finaldouble[]coeff=original[i].getPointRef();}
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=0;i<n;++i){(inti=0;i<n;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoefFactory();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,Double.NaN,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=original[0].getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=xSmallest[0].getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getPointValuePairs();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=original[0].getCoeff(coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,n+1);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(xSmallest,n,coeff,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.compareTo(coeff,n,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff,gamma);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff,xSmallest);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121for(inti=1;i<n+2;++i){finaldouble[]coeff=original[i].getPointRef();for(intj=0;j<n+2;++i){
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.comeff-coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n*1,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n+1,xSmallest.length);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(simplex,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff,coeff,gamma;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.coeff,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getOriginalComparator();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121finaldouble[]coeff=comparator.getCoeff(coeff,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.calculateCoeff(xSmallest,n,coeff,comparator);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121Double[]coeff=comparator.getCoeffs();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getValue(xSmallest,n,true,coeff);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoefFraction();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(coeff,0,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java121double[]coeff=comparator.getCoeff(simplex,n);
