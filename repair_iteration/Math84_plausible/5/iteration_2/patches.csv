bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  expanded);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	11	None	replace
2	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  original);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  original);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  original	11	None	replace
3	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  extended);  [CE]  cannot  find  symbol  extended  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  extended);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  extended);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  extended	11	None	replace
4	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  1.0);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflectedSimplex,  1.0);	  double    simplex    =    evaluateNewSimplex(original,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	66	None	replace
5	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0);	  double    simplex    =    evaluateNewSimplex(original,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	66	None	replace
6	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  0);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  0);	  double    simplex    =    comparator.compare(simple,    0);    	non-compiled	[CE]  cannot  find  symbol  original	127	None	replace
7	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  0);  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0,  0);	  double    simplex    =    comparator.compare(simple,    0);    	non-compiled	[CE]  cannot  find  symbol  simple	127	None	replace
8	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  1);  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  1);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  1);	  double    simplex    =    comparator.compare(simple,    0);    	non-compiled	[CE]  cannot  find  symbol  simple	127	None	replace
9	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	88	None	replace
10	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  comparator[0]);  return;  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  comparator[0]);  return;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  comparator[0]);  return;	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    comparator[0]);    return;    }    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	77	None	replace
11	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  comparator[0]);  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  comparator[0]);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  comparator[0]);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    comparator[0]);    return;    }    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	77	None	replace
12	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  comparator[0]);  return;  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  comparator[0]);  return;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  comparator[0]);  return;	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    comparator[0]);    return;    }    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	77	None	replace
13	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  original.length,  0.0);  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  original.length,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  original.length,  0.0);	  double    simplex    =    comparator.compare(simplex,    0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  original	28	None	replace
14	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  1.0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  1.0,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  1.0,  0.0);	  double    simplex    =    comparator.compare(simplex,    0,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	28	None	replace
15	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  size,  0.0);  [CE]  cannot  find  symbol  size  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  size,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  size,  0.0);	  double    simplex    =    comparator.compare(simplex,    0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  size	28	None	replace
16	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  0.0,  reflectedSimplex);	  double    simplex    =    comparator.compare(simplex,    0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	28	None	replace
17	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  reflected);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  reflected);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  original	85	None	replace
18	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(reflected,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(reflected,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(reflected,  reflected);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  reflected	85	None	replace
19	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  expanded);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  expanded);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	85	None	replace
20	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  comparator.iterator();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  comparator.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iterator  =  comparator.iterator();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
21	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  type  AssertionError  does  not  take  parameters  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	17	None	replace
22	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex.clone();  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  simplex.clone();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  simplex.clone();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
23	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  simplex;	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
24	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  original);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  original);	  Comparator    simplex    =    comparator.compare(relative,    original);    	non-compiled	[CE]  cannot  find  symbol  original	112	None	replace
25	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  reflectedSimplex);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  reflectedSimplex);	  Comparator    simplex    =    comparator.compare(relative,    original);    	non-compiled	[CE]  cannot  find  symbol  original	112	None	replace
26	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  reflected);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  reflected);	  Comparator    simplex    =    comparator.compare(relative,    original);    	non-compiled	[CE]  cannot  find  symbol  original	112	None	replace
27	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  relative);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  relative);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  relative);	  Comparator    simplex    =    comparator.compare(relative,    original);    	non-compiled	[CE]  cannot  find  symbol  original	112	None	replace
28	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
29	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
30	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
31	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
32	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  type  AssertionError  does  not  take  parameters  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  0,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	141	None	replace
33	[BUG]  [BUGGY]  Comparator  comparator  =  new  RealPointValuePair[1];  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  new  RealPointValuePair[1];	  RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	105	None	replace
34	[BUG]  [BUGGY]  Comparator  comparator  =  new  RealPointValuePair[0];  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  new  RealPointValuePair[0];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  new  RealPointValuePair[0];	  RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	105	None	replace
35	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	43	None	replace
36	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  siplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  siplex	43	None	replace
37	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	18	4	add
38	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	18	4	add
39	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	18	4	add
40	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	18	4	add
41	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  reflectedSim);	  double    simplex    =    evaluateNewSimplex(comparator,    siplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	51	None	replace
42	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  expanded);	  double    simplex    =    evaluateNewSimplex(comparator,    siplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	51	None	replace
43	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  comparator);	  double    simplex    =    evaluateNewSimplex(comparator,    siplex);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	51	None	replace
44	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  reflected);	  double    simplex    =    evaluateNewSimplex(comparator,    siplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	51	None	replace
45	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  best);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  1.0,  best);	  double    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  original	142	None	replace
46	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  1.0,  best);	  double    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	142	None	replace
47	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  1.0,  reflectedSimplex);	  double    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	142	None	replace
48	[BUG]  [BUGGY]  Comparator  simplux  =  comparator.getFullSimplex();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplux  =  comparator.getFullSimplex();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplux  =  comparator.getFullSimplex();	  Comparator    simplux    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  Comparator  simplux  =  comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplux  =  comparator.getSimpleX();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplux  =  comparator.getSimpleX();	  Comparator    simplux    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  1.0,  1.0);  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected,  1.0,  1.0);	  double    simplex    =    evaluateNewSimplex(relative,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	99	None	replace
51	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  1.0);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0,  1.0);	  double    simplex    =    evaluateNewSimplex(relative,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	99	None	replace
52	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  1.0);	  double    simplex    =    evaluateNewSimplex(relative,    1.0,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	99	None	replace
53	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  relativeSimplex);  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  relativeSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  relativeSimplex);	  Comparator    simplex    =    comparator.compare(relativeSimplex,    original);    	non-compiled	[CE]  cannot  find  symbol  original	111	None	replace
54	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  expanded);	  double    simplex    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  expanded	26	None	replace
55	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  originalSimplex);  [CE]  cannot  find  symbol  originalSimplex  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  originalSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  originalSimplex);	  double    simplex    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	26	None	replace
56	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  reflectedSim);	  double    simplex    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	26	None	replace
57	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator!=  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  if(comparator!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  if(comparator!=  null)  {  incrementIterationsCounter();  }	  if(comparator!=    null)    {    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
58	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator!=  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  if(comparator!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  if(comparator!=  null)  {  incrementIterationsCounter();  }	  if(comparator!=    null)    {    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
59	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator  ==  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  if(comparator  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  if(comparator  ==  null)  {  incrementIterationsCounter();  }	  if(comparator!=    null)    {    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
60	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	89	None	replace
61	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	89	None	replace
62	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  reflected  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflected	89	None	replace
63	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  best  [FE]                            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  best	89	None	replace
64	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator  ==  null)  {  return;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex);  if(comparator  ==  null)  {  return;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    return;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	69	None	replace
65	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  original);  if(comparator!=  null)  {  return;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  original);  if(comparator!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  original);  if(comparator!=  null)  {  return;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    return;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	69	None	replace
66	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0,  best);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  1.0,  best);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  original	115	None	replace
67	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0,  best);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	115	None	replace
68	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  expanded);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  cannot  find  symbol  expanded	2	None	replace
69	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSim);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	2	None	replace
70	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimplex(original);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimplex(original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimplex(original);	  Comparator    simplex    =    comparator.getSimplex(relative);    	non-compiled	[CE]  cannot  find  symbol  original	143	None	replace
71	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimplex(simplex);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimplex(simplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimplex(simplex);	  Comparator    simplex    =    comparator.getSimplex(relative);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
72	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimplex(new  RealPointValuePair[]  {  reflected  }  );  [CE]  cannot  find  symbol  reflected  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimplex(new  RealPointValuePair[]  {  reflected  }  );  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimplex(new  RealPointValuePair[]  {  reflected  }  );	  Comparator    simplex    =    comparator.getSimplex(relative);    	non-compiled	[CE]  cannot  find  symbol  reflected	143	None	replace
73	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  best);  [CE]  cannot  find  symbol  original  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  best);	  Comparator    simplex    =    comparator.compare(simple,    best);    	non-compiled	[CE]  cannot  find  symbol  original	90	None	replace
74	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  original);  [CE]  cannot  find  symbol  simple  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  original);	  Comparator    simplex    =    comparator.compare(simple,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	90	None	replace
75	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex.toArray(new  RealPointValuePair[simplex.size()  ]);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  simplex.toArray(new  RealPointValuePair[simplex.size()  ]);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  simplex.toArray(new  RealPointValuePair[simplex.size()  ]);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
76	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex.toArray(new  RealPointValuePair[simplex.length]);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  simplex.toArray(new  RealPointValuePair[simplex.length]);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  simplex.toArray(new  RealPointValuePair[simplex.length]);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
78	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
80	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
82	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
84	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	72	2	add
85	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	100	None	replace
86	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  reflected	100	None	replace
87	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  best  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  best	100	None	replace
88	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  dim);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  dim);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  dim);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	100	None	replace
89	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	86	None	replace
90	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	86	None	replace
91	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	4	add
92	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	4	add
93	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	4	add
94	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	4	add
95	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	134	None	add
96	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	13	None	replace
97	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  siplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  siplex	13	None	replace
98	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  while(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	while(simplex!=  null)  {  incrementIterationsCounter();  }	  While(simplex!=    null)    {    incrementIterationsCounter();    }    	compilable	  [FE]  OptimizationException  	22	4	replace
99	[BUG]  [BUGGY]  while(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  OptimizationException  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  while(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	while(simplex!=  null)  {  incrementIterationsCounter();  }	  While(simplex!=    null)    {    incrementIterationsCounter();    }    	compilable	  [FE]  OptimizationException  	22	4	replace
100	[BUG]  [BUGGY]  While(simplex  ==  null)  {  incrementIterationsCounter();  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  While(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(simplex  ==  null)  {  incrementIterationsCounter();  }	  While(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  ';'  expected	22	None	replace
101	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  simplex,  comparator.iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  simplex,  comparator.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iterator  =  simplex,  comparator.iterator();	  Iterator    <    RealPointValuePair>    iterator    =    simplex.iterator();    	non-compiled	[CE]  ';'  expected	30	None	replace
102	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  gamma);	  double    simplex    =    evaluateNewSimplex(comparator,    simal);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	84	None	replace
103	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  best,  true);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  best,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  best,  true);	  Comparator    simplex    =    comparator.compare(simplex,    best,    true);    	non-compiled	[CE]  cannot  find  symbol  original	80	None	replace
104	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original,  true);  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  original,  true);	  Comparator    simplex    =    comparator.compare(simplex,    best,    true);    	non-compiled	[CE]  cannot  find  symbol  original	80	None	replace
105	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  original,  true);  [CE]  cannot  find  symbol  simple  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  original,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  original,  true);	  Comparator    simplex    =    comparator.compare(simplex,    best,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	80	None	replace
106	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  0.0);  [CE]  cannot  find  symbol  original  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  1.0,  0.0);	  double    simplex    =    comparator.compare(simple,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  original	128	None	replace
107	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0,  0.0);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  1.0,  0.0);	  double    simplex    =    comparator.compare(simple,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	128	None	replace
108	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(double,  1.0,  0.0);  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(double,  1.0,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(double,  1.0,  0.0);	  double    simplex    =    comparator.compare(simple,    1.0,    0.0);    	non-compiled	[CE]  '.class'  expected	128	None	replace
109	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  siplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  siplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflectedSimplex,  siplex);	  double    simplex    =    evaluateNewSimplex(original,    siplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	35	None	replace
110	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  siplex);  [CE]  cannot  find  symbol  reflected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  siplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected,  siplex);	  double    simplex    =    evaluateNewSimplex(original,    siplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	35	None	replace
111	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  siplex);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  siplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeSimplex,  siplex);	  double    simplex    =    evaluateNewSimplex(original,    siplex);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	35	None	replace
112	[BUG]  [BUGGY]  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	comparator  =  new  RealPointValuePair[1];	  final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    comparator    =    new    RealPointValuePair[1];    	non-compiled	[CE]  incompatible  types	63	None	replace
113	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[0];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[0];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[0];	  final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    comparator    =    new    RealPointValuePair[1];    	non-compiled	[CE]  incompatible  types	63	None	replace
114	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    sima);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	93	None	replace
115	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  expanded);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    sima);    	non-compiled	[CE]  cannot  find  symbol  expanded	93	None	replace
116	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  extended);  [CE]  cannot  find  symbol  extended  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  extended);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  extended);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    sima);    	non-compiled	[CE]  cannot  find  symbol  extended	93	None	replace
117	[BUG]  [BUGGY]  double  sima  =  evaluateNewSimplex(comparator,  1.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  sima  =  evaluateNewSimplex(comparator,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  sima  =  evaluateNewSimplex(comparator,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    sima);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	93	None	replace
118	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[original.length]);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[original.length]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[original.length]);	  Comparator    simplex    =    comparator.getSimpleX(relativeSimplex);    	non-compiled	[CE]  cannot  find  symbol  original	60	None	replace
119	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  original);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	102	None	replace
120	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  reflected  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  reflected	102	None	replace
121	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  best  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  best	102	None	replace
122	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original);	  double    simplex    =    evaluateNewSimplex(reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  original	36	None	replace
123	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator);	  double    simplex    =    evaluateNewSimplex(reflectedSimplex);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	36	None	replace
124	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected);  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected);	  double    simplex    =    evaluateNewSimplex(reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	36	None	replace
125	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative);  [CE]  cannot  find  symbol  relative  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relative);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative);	  double    simplex    =    evaluateNewSimplex(reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  relative	36	None	replace
126	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  originalSimplex);  [CE]  cannot  find  symbol  originalSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  originalSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  originalSimplex);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflected);    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	10	None	replace
127	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  expanded,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  expanded,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  gamma,  expanded,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	125	None	replace
128	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  khi,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  khi,  gamma,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  khi,  gamma,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	125	None	replace
129	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  gamma,  simal);  [CE]  cannot  find  symbol  simal  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  gamma,  simal);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  gamma,  simal);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simal	125	None	replace
130	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  1.0);  [CE]  cannot  find  symbol  relative  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative,  1.0);	  double    simplex    =    evaluateNewSimplex(relativeSimplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  relative	67	None	replace
131	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  comparator.iterator();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  comparator.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iter  =  comparator.iterator();	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
132	[BUG]  [BUGGY]  Comparator[]  original  =  comparator.compare(simple);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator[]  original  =  comparator.compare(simple);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator[]  original  =  comparator.compare(simple);	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	138	None	replace
133	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simple);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simple);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simple);	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	138	None	replace
134	[BUG]  [BUGGY]  Comparator[]  original  =  comparator.compare(simple);  if(original!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator[]  original  =  comparator.compare(simple);  if(original!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator[]  original  =  comparator.compare(simple);  if(original!=  null)  {  return;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	138	None	replace
135	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  SimplePointValuePair.class);  [CE]  type  AssertionError  does  not  take  parameters  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  SimplePointValuePair.class);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(original,  SimplePointValuePair.class);	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	73	None	replace
136	[BUG]  [BUGGY]  Comparator  comparator  =  best.getSimplex();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  best.getSimplex();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  best.getSimplex();	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
137	[BUG]  [BUGGY]  Comparator  comparator  =  this.comparator.getSimplex();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  this.comparator.getSimplex();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  this.comparator.getSimplex();	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
138	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original.getSimplex());  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  iterateSimplex(original.getSimplex());  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  iterateSimplex(original.getSimplex());	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
139	[BUG]  [BUGGY]  Comparator  comparator  =  iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  iterateSimplex(original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  iterateSimplex(original);	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
140	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	139	None	replace
141	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[0];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[0];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[0];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	139	None	replace
142	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;	  if(relativeSimplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	76	None	replace
143	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }	  if(relativeSimplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	76	None	replace
144	[BUG]  [BUGGY]  if(relativeSimplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  simplex,  original[0]);  return;  }	  if(relativeSimplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	76	None	replace
145	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  best);  [CE]  cannot  find  symbol  relative  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  best);	  double    simplex    =    comparator.compare(relativeSimplex,    best);    	non-compiled	[CE]  cannot  find  symbol  relative	81	None	replace
146	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  best);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(reflectedSimplex,  best);	  double    simplex    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	64	None	replace
147	[BUG]  [BUGGY]  Double  simplex  =  comparator.compare(simplex,  0,  original.length);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Double  simplex  =  comparator.compare(simplex,  0,  original.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Double  simplex  =  comparator.compare(simplex,  0,  original.length);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex.length);    	non-compiled	[CE]  cannot  find  symbol  original	55	None	replace
148	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflected.length);  [CE]  cannot  find  symbol  reflected  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflected.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  reflected.length);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex.length);    	non-compiled	[CE]  cannot  find  symbol  reflected	55	None	replace
149	[BUG]  [BUGGY]  ||(comparator!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  ||(comparator!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(comparator!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }	  ||(simplex!=    null    &&    simplex.length    >    0)||(comparator.compare(original[0])    ==    0))    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
150	[BUG]  [BUGGY]  ||(comparator!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  ||(comparator!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(comparator!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }	  ||(simplex!=    null    &&    simplex.length    >    0)||(comparator.compare(original[0])    ==    0))    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
151	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  continue;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
152	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple  ==  null)  {  continue;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
153	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple  >=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple  >=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  comparator.compare(simple);  if(simple  >=  null)  {  continue;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
154	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator,  1.0);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	144	None	replace
155	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  0,  1.0,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  0,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  0,  1.0,  1.0);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	144	None	replace
156	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator,  0.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  comparator,  0.0);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	144	None	replace
157	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  OptimizationException  	44	3	add
158	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  OptimizationException  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  OptimizationException  	44	3	add
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
160	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
162	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
164	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
166	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	44	2	add
167	[BUG]  [BUGGY]  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  [CE]  type  AssertionError  does  not  take  parameters  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  AssertionError>  simplex  =  new  AssertionError();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    AssertionError    <    AssertionError>    simplex    =    new    AssertionError();    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	97	None	replace
168	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  [CE]  type  AssertionError  does  not  take  parameters  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    AssertionError    <    AssertionError>    simplex    =    new    AssertionError();    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	97	None	replace
169	[BUG]  [BUGGY]  Double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  cannot  find  symbol  original  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(relative,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	122	None	replace
170	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  reflected);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded);    	non-compiled	[CE]  cannot  find  symbol  reflected	129	None	replace
171	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  reflectedSim);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	129	None	replace
172	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	129	None	replace
173	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  dim);  [CE]  cannot  find  symbol  dim  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  dim);	  Comparator    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  dim	57	None	replace
174	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  original);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  original);	  Comparator    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	133	None	replace
175	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  reflectedSimplex);	  Comparator    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	133	None	replace
176	[BUG]  [BUGGY]  if(compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
177	[BUG]  [BUGGY]  Comparator  <  T>  comp  =  comparator.compare(simplex,  null);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  comp  =  comparator.compare(simplex,  null);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  comp  =  comparator.compare(simplex,  null);	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
178	[BUG]  [BUGGY]  Comparator  <  T>  comparator  =  comparator.compare(simplex,  null);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  comparator  =  comparator.compare(simplex,  null);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  comparator  =  comparator.compare(simplex,  null);	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
179	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  1.0);	  double    simplex    =    comparator.compare(simplex,    0.0,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	108	None	replace
180	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0,  original.length);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0,  original.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  0,  original.length);	  double    simplex    =    comparator.compare(simplex,    0,    original.length);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	56	None	replace
181	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  0,  reflectedSimplex.length);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  0,  reflectedSimplex.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(reflectedSimplex,  0,  reflectedSimplex.length);	  double    simplex    =    comparator.compare(simplex,    0,    original.length);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	56	None	replace
182	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  original.length,  0);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  original.length,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  original.length,  0);	  double    simplex    =    comparator.compare(simplex,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  original	110	None	replace
183	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  size,  0);  [CE]  cannot  find  symbol  size  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  size,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  size,  0);	  double    simplex    =    comparator.compare(simplex,    0,    0);    	non-compiled	[CE]  cannot  find  symbol  size	110	None	replace
184	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  expanded);	  double    simplex    =    comparator.compare(simplex,    0.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	29	None	replace
185	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  original);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  original);	  double    simplex    =    comparator.compare(simplex,    0.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  original	29	None	replace
186	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  extended);  [CE]  cannot  find  symbol  extended  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  extended);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  extended);	  double    simplex    =    comparator.compare(simplex,    0.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  extended	29	None	replace
187	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  1.0);	  Comparator    simplex    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	116	None	replace
188	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0);	  Comparator    simplex    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	116	None	replace
189	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  expanded);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSima);    	non-compiled	[CE]  cannot  find  symbol  expanded	34	None	replace
190	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  extended);  [CE]  cannot  find  symbol  extended  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  extended);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  extended);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSima);    	non-compiled	[CE]  cannot  find  symbol  extended	34	None	replace
191	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  original);  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  original);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSima);    	non-compiled	[CE]  cannot  find  symbol  original	34	None	replace
192	[BUG]  [BUGGY]  Double  simplex  =  comparator.compare(simplex,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Double  simplex  =  comparator.compare(simplex,  1.0,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Double  simplex  =  comparator.compare(simplex,  1.0,  expanded);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSima);    	non-compiled	[CE]  cannot  find  symbol  expanded	34	None	replace
193	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  [CE]  cannot  find  symbol  siplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  siplex	15	None	replace
194	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	15	None	replace
195	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator,  reflected);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator,  reflected);	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	15	None	replace
196	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(original,  comparator);	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	15	None	replace
197	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	103	None	replace
198	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  0.0,  best);  [CE]  cannot  find  symbol  original  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  0.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  0.0,  best);	  double    simplex    =    comparator.compare(simplex,    0.0,    best);    	non-compiled	[CE]  cannot  find  symbol  original	107	None	replace
199	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	14	None	replace
200	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  siplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  siplex	14	None	replace
201	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  false,  true);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  false,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  false,  true);	  Comparator    simplex    =    comparator.compare(simplex,    true,    false);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	79	None	replace
202	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  true,  false,  reflectedSima);  [CE]  cannot  find  symbol  reflectedSima  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  true,  false,  reflectedSima);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  true,  false,  reflectedSima);	  Comparator    simplex    =    comparator.compare(simplex,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  reflectedSima	79	None	replace
203	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  false,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  false,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  false,  reflected);	  Comparator    simplex    =    comparator.compare(simplex,    false);    	non-compiled	[CE]  cannot  find  symbol  reflected	78	None	replace
204	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  iterateSimplex(original);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  iterateSimplex(original);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  iterateSimplex(original);	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex    >=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
205	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	106	None	replace
206	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[2];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[2];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[2];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	106	None	replace
207	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  dim);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(reflectedSimplex,  dim);	  double    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	24	None	replace
208	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  dim);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  dim);	  double    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	24	None	replace
209	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  gamma);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  gamma);	  double    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  original	24	None	replace
210	[BUG]  [BUGGY]  ||(comparator!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  ||(comparator!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(comparator!=  null  &&  simplex.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }	  ||(simplex!=    null    &&    simplex.length    >    0)||(comparator.compare(original[0])    >=    0))    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
211	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  reflected);  [CE]  cannot  find  symbol  simple  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  reflected);	  double    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  simple	117	None	replace
212	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  reflectedSimplex);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  reflectedSimplex);	  double    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  simple	117	None	replace
213	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  expanded);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  expanded);	  double    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  original	117	None	replace
214	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  reflected);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relative,  reflected);	  Comparator    simplex    =    comparator.compare(simple,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relative	113	None	replace
215	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflectedSim);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflectedSim);	  Comparator    simplex    =    comparator.compare(simple,    reflected);    	non-compiled	[CE]  cannot  find  symbol  simple	113	None	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	140	2	add
217	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	140	2	add
218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	140	2	add
219	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	140	2	add
220	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  unclosed  string  literal  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  	non-compiled	[CE]  unclosed  string  literal	140	None	add
221	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   ".     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   ".       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	140	None	add
222	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator  ==  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  if(comparator  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  if(comparator  ==  null)  {  incrementIterationsCounter();  }	  if(comparator!=    null)    {    if(simplex    ==    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
223	[BUG]  [BUGGY]  Set  <  RealPointValuePair>  simplex  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Set  <  RealPointValuePair>  simplex  =  Sets.newHashSet();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Set  <  RealPointValuePair>  simplex  =  Sets.newHashSet();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
224	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  original);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  original);	  double    simplex    =    comparator.compare(simple,    original);    	non-compiled	[CE]  cannot  find  symbol  original	118	None	replace
225	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  reflectedSimplex);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  reflectedSimplex);	  double    simplex    =    comparator.compare(simple,    original);    	non-compiled	[CE]  cannot  find  symbol  original	118	None	replace
226	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  simple);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  simple);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  simple);	  double    simplex    =    comparator.compare(simple,    original);    	non-compiled	[CE]  cannot  find  symbol  original	118	None	replace
227	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  syma);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  syma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  syma);	  double    simplex    =    comparator.compare(simple,    original);    	non-compiled	[CE]  cannot  find  symbol  original	118	None	replace
228	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	16	2	add
229	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	16	2	add
230	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	4	add
231	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	4	add
232	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  this.simplex.iterator();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  this.simplex.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iter  =  this.simplex.iterator();	  Iterator    <    RealPointValuePair>    iter    =    simplex.iterator();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
233	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  simplex,  comparator.iterator();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  simplex,  comparator.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iter  =  simplex,  comparator.iterator();	  Iterator    <    RealPointValuePair>    iter    =    simplex.iterator();    	non-compiled	[CE]  ';'  expected	94	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
235	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
236	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
237	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
239	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
241	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
243	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
244	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  khi);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  khi);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	4	None	replace
245	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSima);  [CE]  cannot  find  symbol  reflectedSima  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSima);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSima);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  reflectedSima	4	None	replace
246	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSimma);  [CE]  cannot  find  symbol  reflectedSimma  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSimma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSimma);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimma	4	None	replace
247	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  original	4	None	replace
248	[BUG]  [BUGGY]  while(simplex!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  while(simplex!=  null)  {  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	while(simplex!=  null)  {	  While(simplex!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
249	[BUG]  [BUGGY]  While(simplex  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  While(simplex  ==  null)  {  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(simplex  ==  null)  {	  While(simplex!=    null)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
250	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  originalSimplex);  [CE]  cannot  find  symbol  originalSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  originalSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  originalSimplex);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflected);    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	33	None	replace
251	[BUG]  [BUGGY]  Comparator  comp  =  comparator.getComparator();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comp  =  comparator.getComparator();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comp  =  comparator.getComparator();	  Comparator    comp    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
252	[BUG]  [BUGGY]  Comparator  comp  =  this.comparator.getSimplex();  [CE]  cannot  find  symbol  comparator  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comp  =  this.comparator.getSimplex();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comp  =  this.comparator.getSimplex();	  Comparator    comp    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol  comparator	109	None	replace
253	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(real);  [CE]  cannot  find  symbol  real  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(real);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(real);	  Comparator    simplex    =    comparator.getSimpleX(original);    	non-compiled	[CE]  cannot  find  symbol  real	59	None	replace
254	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[expanded]);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[expanded]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[expanded]);	  Comparator    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  simple	119	None	replace
255	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  expanded);  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  expanded);	  Comparator    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  original	119	None	replace
256	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  best);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  best);	  Comparator    comparator    =    comparator.compare(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
257	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(original);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(original);	  Comparator    comparator    =    comparator.compare(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
258	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  original);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  original);	  Comparator    comparator    =    comparator.compare(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
259	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflected);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflected	87	None	replace
260	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  best	87	None	replace
261	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  dim);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  dim);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  dim);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	87	None	replace
262	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  2.0,  comparator);  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  2.0,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    2.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	68	None	replace
263	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator,  gamma);	  double    simplex    =    evaluateNewSimplex(simplex,    2.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	68	None	replace
264	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator,  1.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  2.0,  comparator,  1.0);	  double    simplex    =    evaluateNewSimplex(simplex,    2.0,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	68	None	replace
265	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  original	101	None	replace
266	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	101	None	replace
267	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
268	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
269	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	83	None	replace
270	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.simpleX();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.simpleX();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.simpleX();	  Iterator    <    RealPointValuePair>    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
271	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.comparator.getSimpleX();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.comparator.getSimpleX();	  Iterator    <    RealPointValuePair>    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
272	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.compare(simplex);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.compare(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.compare(simplex);	  Iterator    <    RealPointValuePair>    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
273	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.getSimpleX();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.getSimpleX();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.getSimpleX();	  Comparator    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	9	None	replace
274	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(),  true);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(),  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(),  true);	  Comparator    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
275	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  original  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(original,  comparator);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  original	42	None	replace
276	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  siplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(comparator,  siplex);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  siplex	42	None	replace
277	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  expand);  [CE]  cannot  find  symbol  expand  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  expand);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  expand);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    simal);    	non-compiled	[CE]  cannot  find  symbol  expand	92	None	replace
278	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  expanded);	  Comparator    simplex    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	6	None	replace
279	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflectedSima);  [CE]  cannot  find  symbol  reflectedSima  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflectedSima);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflectedSima);	  double    simplex    =    comparator.compare(simplex,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSima	27	None	replace
280	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator  ==  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex);  if(comparator  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex);  if(comparator  ==  null)  {  continue;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	40	None	replace
281	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  original);  if(comparator!=  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  original);  if(comparator!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  original);  if(comparator!=  null)  {  continue;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	40	None	replace
282	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  original);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  original);	  double    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	25	None	replace
283	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    System.arraycopy(original,    0,    original,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	124	None	replace
284	[BUG]  [BUGGY]  if(comparator  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    System.arraycopy(original,    0,    original,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	124	None	replace
285	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[1]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[1]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[1]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    System.arraycopy(original,    0,    original,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	124	None	replace
286	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  0,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  0,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  0,  1.0,  1.0);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	replace
287	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0,  1.0);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  1.0,  1.0);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	12	None	replace
288	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  1.0);  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  1.0);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simple	12	None	replace
289	[BUG]  [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  ==  '  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  ==  '	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(s    	non-compiled	[CE]  illegal  line  end  in  character  literal	132	None	replace
290	[BUG]  [BUGGY]  if(comparator.compare(simplex,  comparator)  <  0)  {  incrementIterationsCounter();  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  comparator)  <  0)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  comparator)  <  0)  {  incrementIterationsCounter();  }	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(s    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	132	None	replace
291	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflected,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflected,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  reflected,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	52	None	replace
292	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  original,  comparator);  [CE]  cannot  find  symbol  original  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  original,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  original,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	52	None	replace
293	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	52	None	replace
294	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	50	None	replace
295	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflectedSimplex,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	50	None	replace
296	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  comparator);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeSimplex,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	50	None	replace
297	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    If(simplex    ==    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
298	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    If(simplex    ==    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
299	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    If(simplex    ==    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
300	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simble,  0,  original.length);  [CE]  cannot  find  symbol  simble  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simble,  0,  original.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simble,  0,  original.length);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  simble	54	None	replace
301	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  dim);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  dim);	  double    simplex    =    evaluateNewSimplex(relativeSimplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  original	37	None	replace
302	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  dim);  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected,  dim);	  double    simplex    =    evaluateNewSimplex(relativeSimplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  reflected	37	None	replace
303	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  expanded);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeSimplex,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeSimplex,  expanded);	  double    simplex    =    evaluateNewSimplex(relativeSimplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	37	None	replace
304	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  [CE]  cannot  assign  a  value  to  final  variable  simplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(s    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  simplex	82	None	replace
305	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  if(simplex!=  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    If(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
306	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(original);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(original);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.get(original);	  Iterator    <    RealPointValuePair>    simplex    =    comparator.get(simplex);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
307	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(relativeSimplex);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(relativeSimplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.get(relativeSimplex);	  Iterator    <    RealPointValuePair>    simplex    =    comparator.get(simplex);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
308	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  1.0,  comparator);  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflected,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflected,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	1	None	replace
309	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  1.0,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(reflectedSimplex,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(reflectedSimplex,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	1	None	replace
310	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  original);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  original);	  double    simplex    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	1	None	replace
311	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded,  false);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded,  false);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	121	None	replace
312	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  expanded,  true);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  expanded,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  expanded,  true);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  original	121	None	replace
313	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected,  true);  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflected,  true);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	121	None	replace
314	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  extended,  false);  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  extended,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  extended,  false);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	121	None	replace
315	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  originalSimplex);  [CE]  cannot  find  symbol  originalSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  originalSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  originalSimplex);	  Comparator    simplex    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  originalSimplex	91	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
317	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
318	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
319	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
320	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
321	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
322	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
323	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
324	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
325	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	70	2	add
326	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	88	None	replace
327	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	88	None	replace
328	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);  [CE]  type  AssertionError  does  not  take  parameters  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	19	None	replace
329	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex);  [CE]  type  AssertionError  does  not  take  parameters  [FE]      IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	19	None	replace
330	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  0,  comparator);  [CE]  type  AssertionError  does  not  take  parameters  [FE]        IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  0,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  0,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	19	None	replace
331	[BUG]  [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  type  AssertionError  does  not  take  parameters  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	AssertionError  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex    ==    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	71	None	replace
332	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflectedSimplex);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflectedSimplex);	  Comparator    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  simple	119	None	replace
333	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0.0,  reflected);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  0.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0.0,  reflected);	  double    simplex    =    comparator.compare(simplex,    0.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  simple	29	None	replace
334	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(sima,  0.0,  original);  [CE]  cannot  find  symbol  sima  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(sima,  0.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(sima,  0.0,  original);	  double    simplex    =    comparator.compare(simplex,    0.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  sima	29	None	replace
335	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0);	  Comparator    simplex    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simple	116	None	replace
336	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(SimplePointValuePair.class,  1.0);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(SimplePointValuePair.class,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(SimplePointValuePair.class,  1.0);	  Comparator    simplex    =    comparator.compare(simpleX,    1.0);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
337	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  siplex);  [CE]  cannot  find  symbol  siplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  siplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  siplex);	  double    simplex    =    evaluateNewSimplex(original,    siplex);    	non-compiled	[CE]  cannot  find  symbol  siplex	35	None	replace
338	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  best);  if(comparator!=  null)  {  return;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  best);  if(comparator!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  best);  if(comparator!=  null)  {  return;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    return;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	69	None	replace
339	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  dim);  [CE]  cannot  find  symbol  dim  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  dim);	  double    simplex    =    evaluateNewSimplex(relativeSimplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  dim	37	None	replace
340	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex!=  null)  {  continue;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	13	None	replace
341	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[best]);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[best]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[best]);	  Comparator    simplex    =    comparator.compare(simple,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	90	None	replace
342	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0,  reflected.length);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0,  reflected.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  0,  reflected.length);	  double    simplex    =    comparator.compare(simplex,    0,    original.length);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	56	None	replace
343	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0.0,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  0.0,  best);	  double    simplex    =    comparator.compare(simplex,    0.0,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	107	None	replace
344	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relativeSimplex);  if(comparator!=  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(relativeSimplex);  if(comparator!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(relativeSimplex);  if(comparator!=  null)  {  continue;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	40	None	replace
345	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  best);  if(comparator!=  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  best);  if(comparator!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  best);  if(comparator!=  null)  {  continue;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	40	None	replace
346	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  expanded);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  expanded);	  double    simplex    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  relative	65	None	replace
347	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  best,  true);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  best,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  best,  true);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	121	None	replace
348	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  preferred,  true);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  preferred,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  preferred,  true);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	121	None	replace
349	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  gamma);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  gamma);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relative	85	None	replace
350	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  1.0);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	85	None	replace
351	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  0.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  0.0);	  double    simplex    =    evaluateNewSimplex(comparator,    simal);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	84	None	replace
352	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  0);	  double    simplex    =    evaluateNewSimplex(comparator,    simal);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	84	None	replace
353	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  simal,  gamma);  [CE]  cannot  find  symbol  simal  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  simal,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  simal,  gamma);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  simal	4	None	replace
354	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  0);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	4	None	replace
355	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSimplex,  gamma);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSimplex,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  reflectedSimplex,  gamma);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	4	None	replace
356	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma,  reflectedSim);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	4	None	replace
357	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.getSimpleX(simplex);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.getSimpleX(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.getSimpleX(simplex);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex    >=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
358	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter()  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter()  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter()	  	non-compiled	[CE]  ';'  expected	70	None	add
359	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  reflected);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflected	125	None	replace
360	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  reflectedSim);  [CE]  cannot  find  symbol  reflectedSim  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  reflectedSim);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	125	None	replace
361	[BUG]  [BUGGY]  NullPointer  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  NullPointer  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	NullPointer  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
362	[BUG]  [BUGGY]  Set  <  RealPointValuePair>  simplex  =  Sets.newHashSet(simplex);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Set  <  RealPointValuePair>  simplex  =  Sets.newHashSet(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Set  <  RealPointValuePair>  simplex  =  Sets.newHashSet(simplex);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
363	[BUG]  [BUGGY]  Set  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Set  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Set  <  RealPointValuePair>  simplex  =  evaluateNewSimplex(simplex,  comparator);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    If(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
364	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	86	None	replace
365	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	86	None	replace
366	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  true);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  true);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  true);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	86	None	replace
367	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	16	None	add
368	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex!=  null)  {  return;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	42	None	replace
369	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  dim);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  dim  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(comparator,  dim);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(comparator,  dim);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  dim	42	None	replace
370	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  best);  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  best);	  double    simplex    =    evaluateNewSimplex(comparator,    siplex);    	non-compiled	[CE]  cannot  find  symbol  best	51	None	replace
371	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(relative);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(relative);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(relative);	  Comparator    simplex    =    comparator.getSimpleX(simple);    	non-compiled	[CE]  cannot  find  symbol  relative	98	None	replace
372	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[]  {  }  );  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[]  {  }  );  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[]  {  }  );	  Comparator    simplex    =    comparator.getSimpleX(simple);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
373	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  best);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  best);	  double    simplex    =    comparator.compare(simple,    original);    	non-compiled	[CE]  cannot  find  symbol  simple	118	None	replace
374	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter()  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter()  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter()	  	non-compiled	[CE]  ';'  expected	44	None	add
375	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
376	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflected);  [CE]  cannot  find  symbol  original  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflected);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  cannot  find  symbol  original	2	None	replace
377	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSimplex);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  cannot  find  symbol  original	2	None	replace
378	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSim);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  1.0,  comparator,  reflectedSim);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  cannot  find  symbol  original	2	None	replace
379	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  reflected);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  reflected);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  simple	11	None	replace
380	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0,  reflected);  [CE]  cannot  find  symbol  original  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(original,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(original,  1.0,  reflected);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  original	11	None	replace
381	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  comparator.itsSimplex.iterator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  comparator.itsSimplex.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iterator  =  comparator.itsSimplex.iterator();	  Iterator    <    RealPointValuePair>    iterator    =    simplex.iterator();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
382	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relativeSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(relativeSimplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(relativeSimplex);	  Comparator    comparator    =    comparator.compare(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
383	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  }	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	104	None	replace
384	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[1];  }	  if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	104	None	replace
385	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.get(simplex);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.get(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.get(simplex);	  if(comparator!=    null)    {    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
386	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	103	None	replace
387	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	103	None	replace
388	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected,  true,  false);  [CE]  cannot  find  symbol  reflected  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  reflected,  true,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  reflected,  true,  false);	  Comparator    simplex    =    comparator.compare(simplex,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  reflected	79	None	replace
389	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  expanded,  comparator);  [CE]  cannot  find  symbol  original  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(original,  expanded,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(original,  expanded,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  original	52	None	replace
390	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  0.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  0.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  0.0,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	52	None	replace
391	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  0,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	52	None	replace
392	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflected);	  double    simplex    =    comparator.compare(simplex,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	27	None	replace
393	[BUG]  [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  original  =  new  RealPointValuePair[0];  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	106	None	replace
394	[BUG]  [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[2];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[2];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[2];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	106	None	replace
395	[BUG]  [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	106	None	replace
396	[BUG]  [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[3];  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[3];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  original  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[3];	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	106	None	replace
397	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  reflected.length);  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  reflected.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0,  reflected.length);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex.length);    	non-compiled	[CE]  cannot  find  symbol  simple	55	None	replace
398	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  original.length);  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  original.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0,  original.length);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex.length);    	non-compiled	[CE]  cannot  find  symbol  simple	55	None	replace
399	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimplex(new  RealPointValuePair[]  {  }  );  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimplex(new  RealPointValuePair[]  {  }  );  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimplex(new  RealPointValuePair[]  {  }  );	  Comparator    simplex    =    comparator.getSimplex(relative);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
400	[BUG]  [BUGGY]  Comparator  comp  =  best.getSimplex();  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comp  =  best.getSimplex();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comp  =  best.getSimplex();	  Comparator    comp    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol  best	109	None	replace
401	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex  ==  null)  {  continue;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	14	None	replace
402	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  reflected);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	101	None	replace
403	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  null);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	101	None	replace
404	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  true);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  true);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  true);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	101	None	replace
405	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0,  reflected);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  1.0,  reflected);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	10	None	replace
406	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  reflected);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  reflected);	  Comparator    simplex    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	91	None	replace
407	[BUG]  [BUGGY]  ||(simplex!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  ||(simplex!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(simplex!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  ==  0))  {  incrementIterationsCounter();  }	  ||(simplex!=    null    &&    simplex.length    >    0)||(comparator.compare(original[0])    ==    0))    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
408	[BUG]  [BUGGY]  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  comparator  =  new  RealPointValuePair[1];	  RealPointValuePair[]    simplex    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    	non-compiled	[CE]  incompatible  types	105	None	replace
409	[BUG]  [BUGGY]  While(s  simplex!=  null)  {  incrementIterationsCounter();  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  While(s  simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(s  simplex!=  null)  {  incrementIterationsCounter();  }	  While(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  ')'  expected	22	None	replace
410	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  1.0);	  double    simplex    =    comparator.compare(simplex,    0.0,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	108	None	replace
411	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  1.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0.0,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0.0,  1.0,  reflected);	  double    simplex    =    comparator.compare(simplex,    0.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	108	None	replace
412	[BUG]  [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s!=  ')'  expected  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s!=  ')'  expected  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s!=  ')'  expected	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(s    	non-compiled	[CE]  ')'  expected	132	None	replace
413	[BUG]  [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s!=  '  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s!=  '	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(s    	non-compiled	[CE]  illegal  line  end  in  character  literal	132	None	replace
414	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  comparator);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	50	None	replace
415	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(negative,  comparator);  [CE]  cannot  find  symbol  negative  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(negative,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(negative,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  negative	50	None	replace
416	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	102	None	replace
417	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  1.0,  best);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(reflectedSimplex,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(reflectedSimplex,  1.0,  best);	  double    simplex    =    comparator.compare(simplex,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	114	None	replace
418	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  2.0,  simal);  [CE]  cannot  find  symbol  simal  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  2.0,  simal);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  2.0,  simal);	  double    simplex    =    evaluateNewSimplex(simplex,    2.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simal	68	None	replace
419	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(SimplePointValuePair.class);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.get(SimplePointValuePair.class);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.get(SimplePointValuePair.class);	  Iterator    <    RealPointValuePair>    simplex    =    comparator.get(simplex);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
420	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	144	None	replace
421	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  reflected);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	144	None	replace
422	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  best);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  best);	  Comparator    simplex    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	5	None	replace
423	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  0);  [CE]  cannot  find  symbol  relative  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  0);	  double    simplex    =    comparator.compare(simple,    0);    	non-compiled	[CE]  cannot  find  symbol  relative	127	None	replace
424	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  reflected);  [CE]  cannot  find  symbol  original  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  1.0,  reflected);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  original	32	None	replace
425	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  1.0,  reflected);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  1.0,  reflected);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  relative	32	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
427	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }	  	compilable	  [FE]  AssertionError  	46	2	add
428	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0,  reflected);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  1.0,  reflected);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflectedSima);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	34	None	replace
429	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  dim);  [CE]  cannot  find  symbol  dim  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  dim);	  double    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  dim	24	None	replace
430	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(best,  dim);  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(best,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(best,  dim);	  double    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  best	24	None	replace
431	[BUG]  [BUGGY]  Comparator  comparator  =  getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  getComparator();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  getComparator();	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
432	[BUG]  [BUGGY]  Comparator  comparator  =  new  Comparator(simplex).getSimplex();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  new  Comparator(simplex).getSimplex();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  new  Comparator(simplex).getSimplex();	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
433	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex  ==  null)  {  return;  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	43	None	replace
434	[BUG]  [BUGGY]  ||(simplex!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  ||(simplex!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	||(simplex!=  null  &&  original.length  >  0)||(comparator.compare(original[0])  >=  0))  {  incrementIterationsCounter();  }	  ||(simplex!=    null    &&    simplex.length    >    0)||(comparator.compare(original[0])    >=    0))    {    incrementIterationsCounter();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
435	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[0];  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[0];  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[0];  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	139	None	replace
436	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[2];  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[2];  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  comparator  =  new  RealPointValuePair[2];  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	139	None	replace
437	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  initial  =  simplex;  comparator  =  new  RealPointValuePair[1];  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  initial  =  simplex;  comparator  =  new  RealPointValuePair[1];  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  initial  =  simplex;  comparator  =  new  RealPointValuePair[1];  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  incompatible  types	139	None	replace
438	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	89	None	replace
439	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  0.0,  1.0);	  double    simplex    =    comparator.compare(simplex,    0,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	28	None	replace
440	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator);	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	15	None	replace
441	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    System.arraycopy(original,    0,    original,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	124	None	replace
442	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }	  if(relativeSimplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	76	None	replace
443	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(s  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(s  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  simplex  =  new  RealPointValuePair[1];  System.arraycopy(s	  if(relativeSimplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  ')'  expected	76	None	replace
444	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  original);  [CE]  cannot  find  symbol  relative  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  original);	  double    simplex    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relative	25	None	replace
445	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter()  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter()  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter()	  	non-compiled	[CE]  ';'  expected	72	None	add
446	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
447	[BUG]  [BUGGY]  Comparator  simplux  =  comparator.compare(simplex,  best);  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplux  =  comparator.compare(simplex,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplux  =  comparator.compare(simplex,  best);	  Comparator    simplux    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol  best	7	None	replace
448	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	138	None	replace
449	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simpleX!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simpleX!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simpleX!=  null)  {  return;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	138	None	replace
450	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  null);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  null);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  null);	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
451	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  null)+  0;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  null)+  0;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  null)+  0;	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
452	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  best);  [CE]  cannot  find  symbol  best  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  best);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    simal);    	non-compiled	[CE]  cannot  find  symbol  best	92	None	replace
453	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(null,  best);  [CE]  cannot  find  symbol  best  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(null,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(null,  best);	  double    simplex    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  best	64	None	replace
454	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  1.0,  best);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  1.0,  best);	  double    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  relative	142	None	replace
455	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  original);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  1.0,  original);	  double    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	142	None	replace
456	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  best,  true);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  best,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  best,  true);	  Comparator    simplex    =    comparator.compare(simplex,    best,    true);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	80	None	replace
457	[BUG]  [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
458	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simplex!=  null)  {  continue;	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
459	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(new  RealPointValuePair[]  {  0.0,  1.0,  0.0  }  );  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(new  RealPointValuePair[]  {  0.0,  1.0,  0.0  }  );  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(new  RealPointValuePair[]  {  0.0,  1.0,  0.0  }  );	  double    simplex    =    comparator.compare(simple,    1.0,    0.0);    	non-compiled	[CE]  incompatible  types	128	None	replace
460	[BUG]  [BUGGY]  while(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  while(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	while(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  While(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	61	None	replace
461	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simpleX,  1.0,  1.0);  [CE]  cannot  find  symbol  simpleX  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simpleX,  1.0,  1.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simpleX,  1.0,  1.0);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	12	None	replace
462	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0,  reflected);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflected	12	None	replace
463	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  original  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(original,  1.0,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(original,  1.0,  reflectedSimplex);	  double    simplex    =    comparator.compare(simplex,    1.0,    reflected);    	non-compiled	[CE]  cannot  find  symbol  original	33	None	replace
464	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  reflected);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0,  reflected);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  simple	54	None	replace
465	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflected);  [CE]  cannot  find  symbol  reflected  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  reflected);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  reflected	54	None	replace
466	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  System.arraycopy(s  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  System.arraycopy(s  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  System.arraycopy(s	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(s    	non-compiled	[CE]  ')'  expected	82	None	replace
467	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
468	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
469	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
470	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  dim);  [CE]  cannot  find  symbol  simple  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  dim);	  Comparator    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  simple	57	None	replace
471	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  dim);  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relativeSimplex,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relativeSimplex,  dim);	  Comparator    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	57	None	replace
472	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  comparator[0]);  [CE]  array  required,  but  Comparator<RealPointValuePair>  found  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  comparator[0]);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  comparator[0]);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    comparator[0]);    return;    }    	non-compiled	[CE]  array  required,  but  Comparator<RealPointValuePair>  found	77	None	replace
473	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.compare(simplex,  original);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  comparator.compare(simplex,  original);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  comparator.compare(simplex,  original);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
474	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0,  best);  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  1.0,  1.0,  best);	  Comparator    simplex    =    comparator.compare(simplex,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  best	12	None	replace
475	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  reflected);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  reflected);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relative	85	None	replace
476	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativePair,  reflected);  [CE]  cannot  find  symbol  relativePair  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativePair,  reflected);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativePair,  reflected);	  double    simplex    =    comparator.compare(relativeSimplex,    reflected);    	non-compiled	[CE]  cannot  find  symbol  relativePair	85	None	replace
477	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimplex(real);  [CE]  cannot  find  symbol  real  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimplex(real);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimplex(real);	  Comparator    simplex    =    comparator.getSimplex(relative);    	non-compiled	[CE]  cannot  find  symbol  real	143	None	replace
478	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  allSimplex.iterator();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iter  =  allSimplex.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iter  =  allSimplex.iterator();	  Iterator    <    RealPointValuePair>    iter    =    simplex.iterator();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
479	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  0.0,  original);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  0.0,  original);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  0.0,  original);	  double    simplex    =    comparator.compare(simplex,    0.0,    reflectedSimplex);    	non-compiled	[CE]  cannot  find  symbol  simple	29	None	replace
480	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  continue;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	131	None	replace
481	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(simple);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.get(simple);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.get(simple);	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	131	None	replace
482	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  it  =  comparator.iterator();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  it  =  comparator.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  it  =  comparator.iterator();	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
483	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(this.simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(this.simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(this.simplex);	  Comparator    comparator    =    comparator.compare(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
484	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  reflected);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  reflected);	  Comparator    comparator    =    comparator.compare(simplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	41	None	replace
485	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  System.arraycopy(original,  0,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  System.arraycopy(original,  0,  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  System.arraycopy(original,  0,	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
486	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
487	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original[0]);  return;  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original[0]);  return;  }	  if(relativeSimplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    simplex    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	76	None	replace
488	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
489	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  increaseIterationsCounter();  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  increaseIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  increaseIterationsCounter();  }	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
490	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter()  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter()  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter()	  	non-compiled	[CE]  ';'  expected	46	None	add
491	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  best);  [CE]  cannot  find  symbol  best  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  best);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  cannot  find  symbol  best	2	None	replace
492	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  0.0);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  0.0);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    reflected);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	2	None	replace
493	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	4	add
494	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	134	4	add
495	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simple!=  null)  {  return;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simple);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	138	None	replace
496	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  allSimplex.iterator();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  allSimplex.iterator();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  iterator  =  allSimplex.iterator();	  Iterator    <    RealPointValuePair>    iterator    =    simplex.iterator();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
497	[BUG]  [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex    ==    null)    {    incrementIterationsCounter();    }    if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex        ==        null)        {        incrementIterationsCounter();        }        if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  if(simplex!=  null)  {  incrementIterationsCounter();  }  if(simplex  >=  null)  {  incrementIterationsCounter();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	add
498	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  reflectedSimplex);	  double    simplex    =    evaluateNewSimplex(comparator,    dimplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	126	None	replace
499	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
500	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
501	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  parameters.get(simplex);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  parameters.get(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  parameters.get(simplex);	  Iterator    <    RealPointValuePair>    simplex    =    comparator.get(simplex);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
502	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0,  best);  [CE]  cannot  find  symbol  best  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  0.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  0.0,  best);	  double    simplex    =    comparator.compare(simplex,    0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  best	28	None	replace
503	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  dim);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  dim);	  double    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  relative	24	None	replace
504	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	43	None	replace
505	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.get(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.get(simplex);	  if(comparator!=    null)    {    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	38	None	replace
506	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  simplex  =  comparator.get(simplex);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  RealPointValuePair>  simplex  =  comparator.get(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  RealPointValuePair>  simplex  =  comparator.get(simplex);	  if(comparator!=    null)    {    if(simplex!=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
507	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(simplex,  null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(simplex,  null);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(simplex,  null);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	139	None	replace
508	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.get(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.get(simplex);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.get(simplex);	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	130	None	replace
509	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(siplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(siplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(siplex!=  null)  {  continue;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  simple	130	None	replace
510	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	add	if(comparator!=  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex    >=    null)    {    incrementIterationsCounter();    }    	compilable	  [FE]  AssertionError  	49	2	replace
511	[BUG]  [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator!=  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex    >=    null)    {    incrementIterationsCounter();    }    	compilable	  [FE]  AssertionError  	49	2	replace
512	[BUG]  [BUGGY]  if(simplx!=  null)  {  incrementIterationsCounter();  }  [CE]  cannot  find  symbol  simplx  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplx!=  null)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplx!=  null)  {  incrementIterationsCounter();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    if(simplex    >=    null)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol  simplx	49	None	replace
513	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[0],  true);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[0],  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  new  RealPointValuePair[0],  true);	  Comparator    simplex    =    comparator.compare(simple,    expanded,    true);    	non-compiled	[CE]  cannot  find  symbol  simple	121	None	replace
514	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex  ==  null)  {  continue;  }  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex  ==  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex  ==  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	14	None	replace
515	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
516	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex  ==  null)  {  return;  }  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
517	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    AssertionError    <    AssertionError>    simplex    =    new    AssertionError();    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
518	[BUG]  [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex  ==  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex  ==  null)  {  incrementIterationsCounter();  }  AssertionError  <  AssertionError>  simplex  =  new  AssertionError();  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    AssertionError    <    AssertionError>    simplex    =    new    AssertionError();    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
519	[BUG]  [BUGGY]  double  simal  =  evaluateNewSimplex(comparator,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simal  =  evaluateNewSimplex(comparator,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simal  =  evaluateNewSimplex(comparator,  gamma);	  double    simplex    =    evaluateNewSimplex(comparator,    simal);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	84	None	replace
520	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  this.comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Iterator  <  RealPointValuePair>  simplex  =  this.comparator.getSimpleX();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Iterator  <  RealPointValuePair>  simplex  =  this.comparator.getSimpleX();	  Iterator    <    RealPointValuePair>    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
521	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simple);  if(comparator!=  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simple);  if(comparator!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simple);  if(comparator!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
522	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(siplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(siplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(siplex!=  null)  {  return;  }	  if(comparator!=    null)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	137	None	replace
523	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  new  RealPointValuePair[0]);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  new  RealPointValuePair[0]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  new  RealPointValuePair[0]);	  Comparator    simplex    =    comparator.compare(simplex,    maximum);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	58	None	replace
524	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  simplex  =  comparator.getSimpleX();  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  comparator.getSimpleX();	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
525	[BUG]  [BUGGY]  final  RealPointValuePair[]  simplex  =  comparator.compare(simplex,  null);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  final  RealPointValuePair[]  simplex  =  comparator.compare(simplex,  null);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	final  RealPointValuePair[]  simplex  =  comparator.compare(simplex,  null);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	106	None	replace
526	[BUG]  [BUGGY]  Composite  <?>  simplex  =  comparator.compare(simplex,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Composite  <?>  simplex  =  comparator.compare(simplex,  null);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Composite  <?>  simplex  =  comparator.compare(simplex,  null);	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[0];    comparator    =    new    RealPointValuePair[1];    }    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
527	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  expanded);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative,  expanded);	  double    simplex    =    evaluateNewSimplex(relativeSimplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  relative	37	None	replace
528	[BUG]  [BUGGY]  Comparator  comparator  =  best.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  best.getComparator();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  best.getComparator();	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
529	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.getComparator();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.getComparator();	  Comparator    comparator    =    comparator.getSimplex();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
530	[BUG]  [BUGGY]  Comparator  comp  =  comparator.getSimpleX();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comp  =  comparator.getSimpleX();  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comp  =  comparator.getSimpleX();	  Comparator    simplex    =    comparator.getSimpleX();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
531	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	13	None	replace
532	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	13	None	replace
533	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  null);  if(comparator!=  null)  {  continue;  }  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  null);  if(comparator!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  comparator  =  comparator.compare(simplex,  null);  if(comparator!=  null)  {  continue;  }	  Comparator    comparator    =    comparator.compare(simplex);    if(comparator!=    null)    {    continue;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	40	None	replace
534	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  khi,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  khi,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  khi,  gamma);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	4	None	replace
535	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma,  khi);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  1.0,  comparator,  gamma,  khi);	  double    simplex    =    evaluateNewSimplex(simplex,    1.0,    comparator,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	4	None	replace
536	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  1.0,  0.0,  reflectedSimplex);	  double    simplex    =    comparator.compare(simplex,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	27	None	replace
537	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best,  false);  [CE]  cannot  find  symbol  best  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best,  false);	  Comparator    simplex    =    comparator.compare(simplex,    false);    	non-compiled	[CE]  cannot  find  symbol  best	78	None	replace
538	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  best,  false);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  best,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  best,  false);	  Comparator    simplex    =    comparator.compare(simplex,    false);    	non-compiled	[CE]  cannot  find  symbol  simple	78	None	replace
539	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  dim);  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  dim);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relative,  dim);	  Comparator    simplex    =    comparator.compare(original,    dim);    	non-compiled	[CE]  cannot  find  symbol  relative	57	None	replace
540	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  best);  [CE]  cannot  find  symbol  best  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  best);	  double    simplex    =    evaluateNewSimplex(original,    siplex);    	non-compiled	[CE]  cannot  find  symbol  best	35	None	replace
541	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  siplex);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relative,  siplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relative,  siplex);	  double    simplex    =    evaluateNewSimplex(original,    siplex);    	non-compiled	[CE]  cannot  find  symbol  relative	35	None	replace
542	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeAssignment,  comparator);  [CE]  cannot  find  symbol  relativeAssignment  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeAssignment,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeAssignment,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeAssignment	50	None	replace
543	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  gamma);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  0,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  0,  gamma);	  double    simplex    =    comparator.compare(simplex,    0,    reflectedSimplex);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	54	None	replace
544	[BUG]  [BUGGY]  if(comparator.compare(simplex,  best)  <  0)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [CE]  cannot  find  symbol  best  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  best)  <  0)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  best)  <  0)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  simplex;  System.arraycopy(original,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    simplex;    System.arraycopy(original,    0,    original,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  best	124	None	replace
545	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  gamma);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  gamma);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  gamma);	  double    simplex    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	65	None	replace
546	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simplex,  new  RealPointValuePair[0]);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simplex,  new  RealPointValuePair[0]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simplex,  new  RealPointValuePair[0]);	  double    simplex    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	65	None	replace
547	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[0]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[0]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.getSimpleX(new  RealPointValuePair[0]);	  Comparator    simplex    =    comparator.getSimpleX(relativeSimplex);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
548	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeComparator,  1.0,  comparator);  [CE]  cannot  find  symbol  relativeComparator  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relativeComparator,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativeComparator,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeComparator	1	None	replace
549	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(relativePair,  1.0,  comparator);  [CE]  cannot  find  symbol  relativePair  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(relativePair,  1.0,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(relativePair,  1.0,  comparator);	  double    simplex    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativePair	1	None	replace
550	[BUG]  [BUGGY]  if(comparator.compare(simplex,  best,  null)  <  0)  {  incrementIterationsCounter();  }  [CE]  cannot  find  symbol  best  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  best,  null)  <  0)  {  incrementIterationsCounter();  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  best,  null)  <  0)  {  incrementIterationsCounter();  }	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol  best	136	None	replace
551	[BUG]  [BUGGY]  Comparator  <  T>  comparator  =  comparator.compare(simplex,  null)-  0;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  comparator  =  comparator.compare(simplex,  null)-  0;  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  comparator  =  comparator.compare(simplex,  null)-  0;	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
552	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
553	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex!=  null)  {  continue;  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex!=  null)  {  continue;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex!=  null)  {  continue;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
554	[BUG]  [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  ==  ')'  expected  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  ==  ')'  expected  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(comparator.compare(simplex,  null)  <  0)  {  incrementIterationsCounter();  }  else  {  Comparator  simplex  =  evaluateNewSimplex(simplex,  comparator);  if(s  ==  ')'  expected	  if(comparator.compare(simplex,    null)    <    0)    {    incrementIterationsCounter();    }    else    {    Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(s    	non-compiled	[CE]  ')'  expected	132	None	replace
555	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  expanded);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  expanded);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  expanded	144	None	replace
556	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  best);  [CE]  cannot  find  symbol  best  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(comparator,  1.0,  1.0,  best);	  double    simplex    =    evaluateNewSimplex(comparator,    1.0,    1.0);    	non-compiled	[CE]  cannot  find  symbol  best	144	None	replace
557	[BUG]  [BUGGY]  Comparator  simplux  =  comparator.compare(simplex,  best.getSimplex());  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplux  =  comparator.compare(simplex,  best.getSimplex());  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplux  =  comparator.compare(simplex,  best.getSimplex());	  Comparator    simplux    =    comparator.getSimplex();    	non-compiled	[CE]  cannot  find  symbol  best	7	None	replace
558	[BUG]  [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplx!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  simplx  [FE]    IllegalArgumentException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(     "     ");    }    if(simplex  ==  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException(   "     ");  }  if(simplx!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=        null)        {        incrementIterationsCounter();        }        else        {        throw        new        IllegalArgumentException(       "       ");        }        if(simplex    ==    null)    {    incrementIterationsCounter();    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    if(simplx!=  null)  {  incrementIterationsCounter();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  simplx	18	None	add
559	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simpleX  ==  null)  {  return;  }  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple);  if(simpleX  ==  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple);  if(simpleX  ==  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simple);    if(simplex    ==    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  simple	88	None	replace
560	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  best);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  best);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relative,  best);	  Comparator    simplex    =    comparator.compare(relative,    original);    	non-compiled	[CE]  cannot  find  symbol  relative	112	None	replace
561	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  new  RealPointValuePair[expanded]);  [CE]  cannot  find  symbol  simple  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  new  RealPointValuePair[expanded]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  new  RealPointValuePair[expanded]);	  double    simplex    =    comparator.compare(simple,    expanded);    	non-compiled	[CE]  cannot  find  symbol  simple	117	None	replace
562	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	123	None	replace
563	[BUG]  [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(relativeSimplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(original,  0,  simplex,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	123	None	replace
564	[BUG]  [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	if(simplex!=  null)  {  incrementIterationsCounter();  }  else  {  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  System.arraycopy(simplex,  0,  original,  original[0]);  return;  }	  if(simplex!=    null)    {    incrementIterationsCounter();    }    else    {    final    RealPointValuePair[]    original    =    new    RealPointValuePair[1];    System.arraycopy(simplex,    0,    simplex,    original[0]);    return;    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	123	None	replace
565	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  khi,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  khi,  comparator);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  khi,  comparator);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	125	None	replace
566	[BUG]  [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  khi);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  khi);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  evaluateNewSimplex(simplex,  gamma,  comparator,  khi);	  double    simplex    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	125	None	replace
567	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0,  relativeSimplex.length);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relativeSimplex,  0,  relativeSimplex.length);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relativeSimplex,  0,  relativeSimplex.length);	  double    simplex    =    comparator.compare(simplex,    0,    original.length);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	56	None	replace
568	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair[best]);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair[best]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair[best]);	  double    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	142	None	replace
569	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair(best));  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair(best));  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair(best));	  Comparator    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	133	None	replace
570	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  old);  [CE]  cannot  find  symbol  simple  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  old);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  old);	  Comparator    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	133	None	replace
571	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair[best]);  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair[best]);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  1.0,  new  RealPointValuePair[best]);	  Comparator    simplex    =    comparator.compare(simple,    1.0,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	133	None	replace
572	[BUG]  [BUGGY]  While(simplex!=  null  &&  simplex.length  >  0)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  While(simplex!=  null  &&  simplex.length  >  0)  {  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	While(simplex!=  null  &&  simplex.length  >  0)  {	  While(simplex!=    null)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
573	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  best);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
574	[BUG]  [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  <  T>  simplex  =  comparator.compare(simplex,  expanded);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    comparator.compare(simplex);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
575	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best,  true,  false);  [CE]  cannot  find  symbol  best  [FE]                    AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simplex,  best,  true,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simplex,  best,  true,  false);	  Comparator    simplex    =    comparator.compare(simplex,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  best	79	None	replace
576	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded,  true,  false);  [CE]  cannot  find  symbol  simple  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  expanded,  true,  false);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  expanded,  true,  false);	  Comparator    simplex    =    comparator.compare(simplex,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  simple	79	None	replace
577	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  true,  false,  reflectedSimplex);  [CE]  cannot  find  symbol  simple  [FE]                        AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(simple,  true,  false,  reflectedSimplex);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(simple,  true,  false,  reflectedSimplex);	  Comparator    simplex    =    comparator.compare(simplex,    true,    false);    	non-compiled	[CE]  cannot  find  symbol  simple	79	None	replace
578	[BUG]  [BUGGY]  double  simplex  =  comparator.compare(relative,  1.0,  0.0);  [CE]  cannot  find  symbol  relative  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  double  simplex  =  comparator.compare(relative,  1.0,  0.0);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	double  simplex  =  comparator.compare(relative,  1.0,  0.0);	  double    simplex    =    comparator.compare(simple,    1.0,    0.0);    	non-compiled	[CE]  cannot  find  symbol  relative	128	None	replace
579	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded,  comparator);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	42	None	replace
580	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded);  if(simplex!=  null)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded);  if(simplex!=  null)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  expanded);  if(simplex!=  null)  {  return;  }	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	42	None	replace
581	[BUG]  [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);  [BUGGY]        final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);	  Comparator    simplex    =    evaluateNewSimplex(simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	15	None	replace
582	[BUG]  [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  best,  true);  [CE]  cannot  find  symbol  relative  [FE]                      AssertionError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {      [BUGGY]  Comparator  simplex  =  comparator.compare(relative,  best,  true);  [BUGGY]      incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {    [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	66	66	2	replace	Comparator  simplex  =  comparator.compare(relative,  best,  true);	  Comparator    simplex    =    comparator.compare(simplex,    best,    true);    	non-compiled	[CE]  cannot  find  symbol  relative	80	None	replace
