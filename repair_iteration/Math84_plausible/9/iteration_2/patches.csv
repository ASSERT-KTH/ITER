bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  reflected);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(label,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
2	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  best);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(label,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
3	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  2.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  2.0,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
4	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflects);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflects);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflects);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    blue);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
5	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected.length);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  reflected.length);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    blue);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
6	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  reflected)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  reflected)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  reflected)  <  =  0)  {	  if    (comparator.compare(linked,    reflected)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
7	[BUG]  [BUGGY]  if  (comparator.compare(related,  reflected)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(related,  reflected)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(related,  reflected)  <  =  0)  {	  if    (comparator.compare(linked,    reflected)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
8	[BUG]  [BUGGY]  if  (relativeSimplex.compare(linked,  reflected)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (relativeSimplex.compare(linked,  reflected)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (relativeSimplex.compare(linked,  reflected)  <  =  0)  {	  if    (comparator.compare(linked,    reflected)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
9	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  reflected);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative,  reflected);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
10	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  1.0);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  1.0);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative,  1.0);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
11	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  0);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative,  0);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
12	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(original);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(original);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(original);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
13	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  comparator)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  comparator)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  khi,  comparator)  <  0)  {	  if    (comparator.compare(original,    khi)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	19	None	replace
14	[BUG]  [BUGGY]  if  (comparator.compare(original,  reflected)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(original,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  reflected)  <  0)  {	  if    (comparator.compare(original,    khi)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	19	None	replace
15	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  comparator)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  comparator)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  khi,  comparator)  <  =  0)  {	  if    (comparator.compare(original,    khi)    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
16	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  reflected);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
17	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
18	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
19	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  0);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  0);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
20	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
21	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
22	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
23	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.0,  comparator,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.0,  comparator,  gamma);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.0,  comparator,  gamma);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
24	[BUG]  [BUGGY]  if  (comparator.compare(syma,  khi)  <  0)  {  [CE]  cannot  find  symbol  syma  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(syma,  khi)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(syma,  khi)  <  0)  {	  if    (comparator.compare(simplex,    khi)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  syma	17	None	replace
25	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
26	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
27	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.7,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.7,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.7,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    k,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
28	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  reflected);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    g2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
29	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    g2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
30	[BUG]  [BUGGY]  if(relative.compareTo(relative)  >=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(relative)  >=  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative)  >=  0)  {  return;  }	  if(relative.compareTo(relative)!=    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
31	[BUG]  [BUGGY]  if(relative.compareTo(simplex)!=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(simplex)!=  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(simplex)!=  0)  {  return;  }	  if(relative.compareTo(relative)!=    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
32	[BUG]  [BUGGY]  if  (comparator.compare(relative,  gamma)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  gamma)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  gamma)  <  =  0)  {	  if    (comparator.compare(relative,    khi)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
33	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  reflected)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  reflected)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  reflected)  <  =  0)  {	  if    (comparator.compare(relative,    khi)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
34	[BUG]  [BUGGY]  if  (comparator.compare(relative,  khi,  comparator)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  khi,  comparator)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  khi,  comparator)  <  =  0)  {	  if    (comparator.compare(reflected,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
35	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  khi,  comparator)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  khi,  comparator)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  khi,  comparator)  <  =  0)  {	  if    (comparator.compare(reflected,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
36	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  khi)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  khi)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  khi)  <  =  0)  {	  if    (comparator.compare(reflected,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
37	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  relative);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  relative);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  relative);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
38	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  reflected);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
39	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  reflected);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
40	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  reflects);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  reflects);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  reflects);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
41	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comp);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comp);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comp);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
42	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparer);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparer);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparer);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
43	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
44	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
45	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
46	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  gamma);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
47	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
48	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  preferred);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  preferred);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  preferred);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
49	[BUG]  [BUGGY]  if  (comparator.compare(syma,  reflected)  <  0)  {  [CE]  cannot  find  symbol  syma  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(syma,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(syma,  reflected)  <  0)  {	  if    (comparator.compare(simplex,    reflectedSimplex)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  syma	44	None	replace
50	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  siplex)  <  0)  {  [CE]  cannot  find  symbol  siplex  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  siplex)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  siplex)  <  0)  {	  if    (comparator.compare(simplex,    reflected)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  siplex	45	None	replace
51	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  dimplex)  <  0)  {  [CE]  cannot  find  symbol  dimplex  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  dimplex)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  dimplex)  <  0)  {	  if    (comparator.compare(simplex,    reflected)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  dimplex	45	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	add	if  (comparator.compare(reflected,  reflected)  <  0)  {	  if    (comparator.compare(relative,    reflected)    <    0)    {    	compilable	  [FE]  AssertionError  	41	3	replace
53	[BUG]  [BUGGY]  if  (comparator.compare(reflected,  reflected)  <  0)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflected,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflected,  reflected)  <  0)  {	  if    (comparator.compare(relative,    reflected)    <    0)    {    	compilable	  [FE]  AssertionError  	41	3	replace
54	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relative,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
55	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  gamma);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
56	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0,  comparator);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
57	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  gamma);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
58	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  reflects);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  reflects);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  reflects);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
59	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(reflected,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
60	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  reflected);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
61	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  gamma);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
62	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  reflects);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  reflects);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  reflects);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
63	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  reflected,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  reflected,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  reflected,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
64	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  comp);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  comp);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  comp);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
65	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best.comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best.comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  best.comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    reflected.comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
66	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  reflected,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  reflected,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  reflected,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    reflected,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
67	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  bluma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  bluma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  bluma,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    reflected,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
68	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
69	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(ref,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(ref,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(ref,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
70	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  khi,  comparator)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  khi,  comparator)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  khi,  comparator)  <  0)  {	  if    (comparator.compare(related,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	39	None	replace
71	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  reflected);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    gamma,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
72	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
73	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(label,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
74	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(label,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(label,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
75	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  khi);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
76	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.5,  khi);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
77	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
78	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.1,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.1,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.1,  comparator);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
79	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  gamma);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
80	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(reflected,  best);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
81	[BUG]  [BUGGY]  if  (reflect.compare(original,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  reflect  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (reflect.compare(original,  khi,  comparator)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (reflect.compare(original,  khi,  comparator)  <  0)  {	  if    (comparator.compare(reflect,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflect	40	None	replace
82	[BUG]  [BUGGY]  if  (comparator.compare(reflect,  khi,  best)  <  0)  {  [CE]  cannot  find  symbol  reflect  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(reflect,  khi,  best)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(reflect,  khi,  best)  <  0)  {	  if    (comparator.compare(reflect,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflect	40	None	replace
83	[BUG]  [BUGGY]  if(relative.compareTo(relative,  khi)  ==  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(relative,  khi)  ==  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative,  khi)  ==  0)  {  return;  }	  if(relative.compareTo(relative)    ==    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
84	[BUG]  [BUGGY]  if(relative.compareTo(simplex)  ==  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(simplex)  ==  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(simplex)  ==  0)  {  return;  }	  if(relative.compareTo(relative)    ==    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
85	[BUG]  [BUGGY]  if(relative.compareTo(relative)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(relative)  <  =  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative)  <  =  0)  {  return;  }	  if(relative.compareTo(relative)    ==    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
86	[BUG]  [BUGGY]  if  (relative.compare(reflected,  khi)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (relative.compare(reflected,  khi)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (relative.compare(reflected,  khi)  <  =  0)  {	  if    (comparator.compare(relative,    reflected)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
87	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflects);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflects);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflects);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
88	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  best)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  khi,  best)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	42	None	replace
89	[BUG]  [BUGGY]  if  (comparator.compare(relative,  original)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  original)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  original)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	42	None	replace
90	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma,  reflected);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
91	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  gamma,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  gamma,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(reflected,  gamma,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
92	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  gamma,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  gamma,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  gamma,  reflected);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
93	[BUG]  [BUGGY]  if  (relative.compare(original,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (relative.compare(original,  khi,  comparator)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (relative.compare(original,  khi,  comparator)  <  0)  {	  if    (comparator.compare(relative,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	38	None	replace
94	[BUG]  [BUGGY]  if  (comparator.compare(relative,  khi,  reflected)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  khi,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  khi,  reflected)  <  0)  {	  if    (comparator.compare(relative,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	38	None	replace
95	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  bluma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  bluma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  bluma,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    bluma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
96	[BUG]  [BUGGY]  double  gamma  =  reflected.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  double  gamma  =  reflected.doubleValue();  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	double  gamma  =  reflected.doubleValue();	  double    gamma    =    best.doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
97	[BUG]  [BUGGY]  double  gamma  =  original.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  double  gamma  =  original.doubleValue();  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	double  gamma  =  original.doubleValue();	  double    gamma    =    best.doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
98	[BUG]  [BUGGY]  double  gamma  =  best.doubleValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  double  gamma  =  best.doubleValue()  +  1;  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	double  gamma  =  best.doubleValue()  +  1;	  double    gamma    =    best.doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
99	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  khi)  <  =  0)  {	  if    (comparator.compare(original,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
100	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparator.doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparator.doubleValue());  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparator.doubleValue());	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    size);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
101	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  2.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
102	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  4.0,  comparator);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    0.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
103	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  0);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  0);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
104	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  blue);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  blue);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  blue);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
105	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
106	[BUG]  [BUGGY]  if(relative.compareTo(relative,  khi)!=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(relative,  khi)!=  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative,  khi)!=  0)  {  return;  }	  if(relative.compareTo(relative)!=    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
107	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(related,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(related,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(related,  khi);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
108	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  1.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  1.0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  1.0,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
109	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(normalized,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(normalized,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(normalized,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
110	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  bluma);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  bluma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  bluma);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
111	[BUG]  [BUGGY]  if  (comparator.compare(relative,  reflected)  ==  0)  {  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  reflected)  ==  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  reflected)  ==  0)  {	  if    (comparator.compare(relative,    reflected)    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	33	None	replace
112	[BUG]  [BUGGY]  if  (comparator.compare(relative,  reflects)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  reflects)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  reflects)  <  =  0)  {	  if    (comparator.compare(relative,    khi)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
113	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
114	[BUG]  [BUGGY]  if  (comparator.compare(simpleX,  best)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(simpleX,  best)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simpleX,  best)  <  =  0)  {	  if    (comparator.compare(simpleX,    best)    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
115	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    reflectedSimplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
116	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  reflects,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  reflects,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  reflects,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    reflected,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
117	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  mirrored,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  mirrored,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  mirrored,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    reflected,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
118	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  compiler);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  compiler);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  compiler);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
119	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  best);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
120	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  bluma);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  bluma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  bluma);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
121	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  0.2,  comparator);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
122	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  1.0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  1.0,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  1.0,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    g2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
123	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  bluma);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  bluma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  bluma);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    g2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
124	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  chi);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  chi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  chi);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
125	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  comp);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  comp);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  gamma,  comp);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
126	[BUG]  [BUGGY]  if  (comparator.compare(original,  reflected,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(original,  reflected,  best)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(original,  reflected,  best)  <  0)  {	  if    (comparator.compare(original,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	42	None	replace
127	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  reflects);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  reflects);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  reflects);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(label,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
128	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  original);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  original);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
129	[BUG]  [BUGGY]  if(relative.compareTo(relative)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(relative)  <  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative)  <  0)  {  return;  }	  if(relative.compareTo(relative)    ==    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
130	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflected.comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflected.comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  reflected.comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    reflected.comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
131	[BUG]  [BUGGY]  if  (comparator.compare(old,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  old  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(old,  khi,  comparator)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(old,  khi,  comparator)  <  0)  {	  if    (comparator.compare(related,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  old	39	None	replace
132	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  simulated);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  simulated);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  simulated);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
133	[BUG]  [BUGGY]  if  (comparator.compare(linked,  reflected)  <  0)  {  [CE]  cannot  find  symbol  linked  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(linked,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(linked,  reflected)  <  0)  {	  if    (comparator.compare(linked,    reflected)    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  linked	58	None	replace
134	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  blue);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  blue);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.0,  blue);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    blue);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
135	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  ref);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  ref);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  ref);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
136	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  false);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  false);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
137	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  0.0);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  0.0);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative,  0.0);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
138	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  0.5);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  0.5);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative,  0.5);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
139	[BUG]  [BUGGY]  if  (comparator.compare(ref,  khi,  reflected)  <  0)  {  [CE]  cannot  find  symbol  ref  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(ref,  khi,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(ref,  khi,  reflected)  <  0)  {	  if    (comparator.compare(reflect,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  ref	40	None	replace
140	[BUG]  [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  false);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  false);	  final    RealPointValuePair    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
141	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  khi);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
142	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
143	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  kil,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  kil,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  kil,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    khi,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
144	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  gamma,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  gamma,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  gamma,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    gamma,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
145	[BUG]  [BUGGY]  if  (comparator.compare(related,  best)  <  0)  {  [CE]  cannot  find  symbol  related  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(related,  best)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(related,  best)  <  0)  {	  if    (comparator.compare(reflected,    best)    <    =    0)    {    	non-compiled	[CE]  cannot  find  symbol  related	43	None	replace
146	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  4.0,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
147	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
148	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(related,  1.0,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(related,  1.0,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(related,  1.0,  best);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    1.0,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
149	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi,  reflected);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
150	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  khi,  best);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
151	[BUG]  [BUGGY]  if  (comparator.compare(relative,  khi,  reflectedSimplex)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  khi,  reflectedSimplex)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  khi,  reflectedSimplex)  <  0)  {	  if    (comparator.compare(relative,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	38	None	replace
152	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  khi,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(related,  khi,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
153	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  0);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  0);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(original,  0);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(original,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
154	[BUG]  [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  Object>  comparator  =  comparator.compare(relative,  khi);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  Object>  comparator  =  comparator.compare(relative,  khi);	  Comparator    <    Object>    comparator    =    comparator.compare(relative);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
155	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflected,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflected,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  reflected,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relative,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
156	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  compiler);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  compiler);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  compiler);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
157	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relativeComparator,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relativeComparator,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relativeComparator,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
158	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  reflectedSimplex)  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  reflectedSimplex)  <  =  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(simplex,  reflectedSimplex)  <  =  0)  {	  if    (comparator.compare(simplex,    best)    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
159	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  comparator,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  comparator,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  blue,  comparator,  gamma);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    blue,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
160	[BUG]  [BUGGY]  if  (comparator.compare(locale,  khi,  comparator)  <  0)  {  [CE]  cannot  find  symbol  locale  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(locale,  khi,  comparator)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(locale,  khi,  comparator)  <  0)  {	  if    (comparator.compare(related,    khi,    comparator)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  locale	39	None	replace
161	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  reflected,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  reflected,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(simplex,  reflected,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    reflected,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
162	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relative,  gamma);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
163	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(relativeSimplex,  gamma,  khi);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
164	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  gamma);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(label,  gamma);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(relativeSimplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
165	[BUG]  [BUGGY]  if  (comparator.compare(related,  reflected)  <  0)  {  [CE]  cannot  find  symbol  related  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(related,  reflected)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(related,  reflected)  <  0)  {	  if    (comparator.compare(simplex,    reflected)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  related	45	None	replace
166	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(locale,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(locale,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(locale,  khi);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(label,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
167	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  composite);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  composite);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  khi,  composite);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    khi,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
168	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  0.2,  khi);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.0,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
169	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(simplex,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
170	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  g2,  khi);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    g2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
171	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  khi);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  khi);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(relative,  1.0,  khi);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(relative,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
172	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  top);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  top);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.0,  top);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    1.0,    blue);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
173	[BUG]  [BUGGY]  if(relative.compareTo(relative,  khi)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if(relative.compareTo(relative,  khi)  <  0)  {  return;  }  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if(relative.compareTo(relative,  khi)  <  0)  {  return;  }	  if(relative.compareTo(relative)    ==    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
174	[BUG]  [BUGGY]  if  (comparator.compare(relative,  reflectedSimplex)  <  0)  {  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  if  (comparator.compare(relative,  reflectedSimplex)  <  0)  {  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	if  (comparator.compare(relative,  reflectedSimplex)  <  0)  {	  if    (comparator.compare(relative,    reflected)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  relative	41	None	replace
175	[BUG]  [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);  [BUGGY]        final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	final  RealPointValuePair[]  reflected  =  evaluateNewSimplex(original,  1.0,  comparator,  best);	  final    RealPointValuePair[]    reflected    =    evaluateNewSimplex(original,    1.0,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
176	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi,  reflected);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
177	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(relative,  khi,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(relative,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
178	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(related,  khi,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  compos  =  comparator.compare(related,  khi,  best);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  compos  =  comparator.compare(related,  khi,  best);	  Comparator    <    RealPointValuePair>    compos    =    comparator.compare(reflected,    khi);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
179	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.2,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      while  (true)  {  incrementIterationsCounter();  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.2,  comparator);  [BUGGY]      if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	74	74	2	replace	Comparator  <  RealPointValuePair>  comparator  =  evaluateNewSimplex(original,  1.2,  comparator);	  Comparator    <    RealPointValuePair>    comparator    =    evaluateNewSimplex(original,    0.2,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
