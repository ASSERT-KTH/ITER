bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	add	final  double[]  xSmallest  =  original[1].getPointRef();	final  double[]  xSmallest  =  original[0].getPointRef();  	compilable	  [FE]  OptimizationException  	24	4	replace
2	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef();  [FE]  OptimizationException  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	final  double[]  xSmallest  =  original[1].getPointRef();	final  double[]  xSmallest  =  original[0].getPointRef();  	compilable	  [FE]  OptimizationException  	24	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[0].getPoint();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	add	final  double[]  xSmallest  =  original[0].getPoint();	final  double[]  xSmallest  =  original[0].getPointRef();  	compilable	  [FE]  AssertionError  	24	2	replace
4	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getPoint();  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[0].getPoint();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	final  double[]  xSmallest  =  original[0].getPoint();	final  double[]  xSmallest  =  original[0].getPointRef();  	compilable	  [FE]  AssertionError  	24	2	replace
5	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getOriginal();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[0].getOriginal();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	final  double[]  xSmallest  =  original[0].getOriginal();	final  double[]  xSmallest  =  original[0].getPointRef();  	non-compiled	[CE]  cannot  find  symbol	24	None	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  xSmallest  [FE]          AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	  	final  double[]  xSmallest  =  original[0].getPointRef();  	non-compiled	[CE]  cannot  find  symbol  xSmallest	24	None	replace
7	[BUG]  [BUGGY]    final  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  double[]  coeff  =  original[0].getPointRef();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  double[]  coeff  =  original[0].getPointRef();		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
8	[BUG]  [BUGGY]    final  int  n  =  original[0].getPointRef();  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  int  n  =  original[0].getPointRef();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  int  n  =  original[0].getPointRef();		non-compiled	[CE]  incompatible  types	25	None	add
9	[BUG]  [BUGGY]    final  double[]  coeff  =  original[1].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  double[]  coeff  =  original[1].getPointRef();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  double[]  coeff  =  original[1].getPointRef();		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
10	[BUG]  [BUGGY]    final  double[]  coeff  =  original[0].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  double[]  coeff  =  original[0].getRealPointValuePair();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  double[]  coeff  =  original[0].getRealPointValuePair();		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
11	[BUG]  [BUGGY]    final  double[]  coeff  =  original[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  double[]  coeff  =  original[0].getCoeff();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  double[]  coeff  =  original[0].getCoeff();		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
12	[BUG]  [BUGGY]    RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator);  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator);		non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
13	[BUG]  [BUGGY]    final  double[]  coeff  =  original[0].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  double[]  coeff  =  original[0].getCoef();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  double[]  coeff  =  original[0].getCoef();		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
14	[BUG]  [BUGGY]    RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff);  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff);		non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
15	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getValue();  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[0].getValue();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	final  double[]  xSmallest  =  original[0].getValue();	final  double[]  xSmallest  =  original[0].getPointRef();  	non-compiled	[CE]  incompatible  types	24	None	replace
16	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointValue();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointValue();  [BUGGY]  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	final  double[]  xSmallest  =  original[0].getPointValue();	final  double[]  xSmallest  =  original[0].getPointRef();  	non-compiled	[CE]  cannot  find  symbol	24	None	replace
17	[BUG]  [BUGGY]    final  double[]  coeff  =  comparator.evaluate(original,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    final  double[]  coeff  =  comparator.evaluate(original,  coeff);  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    final  double[]  coeff  =  comparator.evaluate(original,  coeff);		non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	add
18	[BUG]  [BUGGY]    int  n  =  original[0].getPointRef();  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  [BUGGY]    int  n  =  original[0].getPointRef();  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	115	115	2	replace	    int  n  =  original[0].getPointRef();		non-compiled	[CE]  incompatible  types	25	None	add
