bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  contracted);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
2	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  reflected,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  reflected,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  reflected,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
3	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  expanded);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
4	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  best,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
5	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(original,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(original,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
6	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.iterateSimplex(original);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.iterateSimplex(original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contract.iterateSimplex(original);	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
7	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expanded);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expanded);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
8	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  extended);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  extended);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  extended);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
9	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.compare(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.compare(original,  contracted);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflected.compare(original,  contracted);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
10	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contract  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contract  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contract  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contract    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	82	None	replace
11	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
12	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex.get(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex.get(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex.get(contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
13	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.get(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.get(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.get(contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
14	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  );  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  );	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
15	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  );  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  );	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
16	[BUG]  [BUGGY]  if(best.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
17	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best,  expanded  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best,  expanded  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best,  expanded  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
18	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
19	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
20	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
21	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {	  if    (comparator.compare(simplex,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	84	None	replace
22	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(original,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(original,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
23	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  contracted);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
24	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
25	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)implemented.clone();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)implemented.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)implemented.clone();	  RealPointValuePair    best    =(RealPointValuePair)consume.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
26	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.evaluateNewSimplex(original,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.evaluateNewSimplex(original,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
27	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
28	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
29	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
30	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
31	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  extended);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  extended);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  extended);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
32	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  expanded);	  Comparator    <    RealPointValuePair>    comp    =    contracted.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
33	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    contracted.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
34	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  expanded.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  expanded.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  expanded.iterate();	  Comparator    <    RealPointValuePair>    best    =    expanded.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
35	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contract.iterate();	  Comparator    <    RealPointValuePair>    best    =    expanded.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
36	[BUG]  [BUGGY]  if(contracted.compare(original,  best)  ==  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(original,  best)  ==  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(original,  best)  ==  0)  {  return;  }	  if(contracted.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
37	[BUG]  [BUGGY]  if(contracted.compare(original,  best)!=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(original,  best)!=  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(original,  best)!=  0)  {  return;  }	  if(contracted.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
38	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  expanded.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  expanded.iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  expanded.iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    expanded.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
39	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contract.iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    expanded.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
40	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflected.iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    expanded.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
41	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
42	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
43	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
44	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
45	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
46	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
47	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
48	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  this.comparator.get(contracted);	  Comparator    <    RealPointValuePair>    best    =    this.comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
49	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(original,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  this.comparator.get(original,  contracted);	  Comparator    <    RealPointValuePair>    best    =    this.comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
50	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex.get(original);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex.get(original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex.get(original);	  Comparator    <    RealPointValuePair>    best    =    this.comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
51	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(original,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(original,  contracted);	  Comparator    <    RealPointValuePair>    best    =    iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
52	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(contracted);	  Comparator    <    RealPointValuePair>    best    =    iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
53	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(reflected);	  Comparator    <    RealPointValuePair>    best    =    iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
54	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate(original);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate(original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterate(original);	  Comparator    <    RealPointValuePair>    best    =    iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
55	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.iterate();	  Comparator    <    RealPointValuePair>    best    =    comparator.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
56	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.comparator.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.comparator.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.comparator.iterate();	  Comparator    <    RealPointValuePair>    best    =    comparator.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
57	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
58	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
59	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
60	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.iterate()  :  null;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflected.iterate()  :  null;  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflected.iterate()  :  null;	  Comparator    <    RealPointValuePair>    best    =    contracted.iterate()    :    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate()  :  null;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate()  :  null;  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterate()  :  null;	  Comparator    <    RealPointValuePair>    best    =    contracted.iterate()    :    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
62	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  1);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  1);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
63	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  2);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  2);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
64	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    ==    0)    {    	non-compiled	[CE]  incompatible  types	75	None	replace
65	[BUG]  [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  ==  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    ==    0)    {    	non-compiled	[CE]  incompatible  types	75	None	replace
66	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])  ==  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[best])  ==  0)  {	  if(comparison.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	65	None	replace
67	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])!=  0)  {  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])!=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[best])!=  0)  {	  if(comparison.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	65	None	replace
68	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best  +  1])  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best  +  1])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[best  +  1])  <  0)  {	  if(comparison.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
69	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])  >=  0)  {  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best])  >=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[best])  >=  0)  {	  if(comparison.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	65	None	replace
70	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best  +  1])  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best  +  1])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[best  +  1])  <  0)  {	  if(comparator.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	63	None	replace
71	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])  ==  0)  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[best])  ==  0)  {	  if(comparator.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	63	None	replace
72	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])!=  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])!=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[best])!=  0)  {	  if(comparator.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	63	None	replace
73	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  comparator)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  comparator)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  comparator)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	47	None	replace
74	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  expanded)  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  expanded)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  expanded)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	47	None	replace
75	[BUG]  [BUGGY]  if  (comparison.compare(original,  gamma)  <  0)  {  [CE]  cannot  find  symbol  comparison  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  gamma)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  gamma)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	47	None	replace
76	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  compator)  <  0)  {  [CE]  cannot  find  symbol  compator  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  compator)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  compator)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  compator	47	None	replace
77	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.get(original,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
78	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  original);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
79	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(original,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(original,  comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
80	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  null);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  null);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
81	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
82	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  null);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  null);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
83	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate();	  Comparator    <    RealPointValuePair>    best    =    reflectedSimplex.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
84	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	87	None	replace
85	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  cannot  find  symbol  comparison  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	87	None	replace
86	[BUG]  [BUGGY]  if(Comparator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  non-static  method  compare(T,T)  cannot  be  referenced  from  a  static  context  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(Comparator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(Comparator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  non-static  method  compare(T,T)  cannot  be  referenced  from  a  static  context	87	None	replace
87	[BUG]  [BUGGY]  if(compator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  cannot  find  symbol  compator  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(compator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(compator.compare(original,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  compator	87	None	replace
88	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  0);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  0);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
89	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  1);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  1);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
90	[BUG]  [BUGGY]  Comparator  <?>  comp  =  contracted.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <?>  comp  =  contracted.compare(contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <?>  comp  =  contracted.compare(contracted,  best);	  if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
91	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  new  RealPointValuePair[]  {  0  }  );  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  new  RealPointValuePair[]  {  0  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  new  RealPointValuePair[]  {  0  }  );	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
92	[BUG]  [BUGGY]  if(best)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    return;    }    	non-compiled	[CE]  incompatible  types	81	None	replace
93	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  0  }  );	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
94	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
95	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  reflected  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  reflected  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  reflected  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
96	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
97	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  false);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  false);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
98	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(expanded,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(expanded,  true);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(expanded,  true);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
99	[BUG]  [BUGGY]  if  (comparator.compare(original,  simplex)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  simplex)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  simplex)  <  0)  {	  if    (comparator.compare(original,    reflectedSimplex)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	49	None	replace
100	[BUG]  [BUGGY]  if  (comparator.compare(original,  simplified)  <  0)  {  [CE]  cannot  find  symbol  simplified  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  simplified)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  simplified)  <  0)  {	  if    (comparator.compare(original,    reflectedSimplex)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  simplified	49	None	replace
101	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    	non-compiled	[CE]  incompatible  types	97	None	replace
102	[BUG]  [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    	non-compiled	[CE]  incompatible  types	97	None	replace
103	[BUG]  [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    	non-compiled	[CE]  incompatible  types	97	None	replace
104	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )>  0)  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )>  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )>  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	12	None	replace
106	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.length  >  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.length  >  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.length  >  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	12	None	replace
107	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflectedSimplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(relativeSimplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
108	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relativeSimplex,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relativeSimplex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relativeSimplex,  expanded);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(relativeSimplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
109	[BUG]  [BUGGY]  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(compare.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(compare.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
110	[BUG]  [BUGGY]  if(compare.compare(original,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(compare.compare(original,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(compare.compare(original,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(compare.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
111	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(original,  expanded);	  Comparator    <    RealPointValuePair>    best    =    contracted.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
112	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(this);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(this);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(this);	  Comparator    <    RealPointValuePair>    best    =    contracted.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
113	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(simplex);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(simplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
114	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  0)  {	  if    (comparison.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
115	[BUG]  [BUGGY]  if  (comparison.compare(simplex,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(simplex,  new  RealPointValuePair[]  {  0  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(simplex,  new  RealPointValuePair[]  {  0  }  )  <  0)  {	  if    (comparison.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
116	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compilator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
117	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  +  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  +  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  +  1]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compilator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
118	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  -  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  -  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  -  1]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compilator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
119	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(constraint,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(constraint,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(constraint,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(constraint,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
120	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(constraint,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
121	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	85	None	replace
122	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  extended  }  )  <  0)  {  [CE]  cannot  find  symbol  extended  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  extended  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  extended  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  extended	85	None	replace
123	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  reflected  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  reflected  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  reflected  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	85	None	replace
124	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  best,  expanded  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	85	None	replace
125	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  reflectedSimplex)  <  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  reflectedSimplex)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  khi,  reflectedSimplex)  <  0)  {	  if    (comparator.compare(original,    khi,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	115	None	replace
126	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  expanded)  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  expanded)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  khi,  expanded)  <  0)  {	  if    (comparator.compare(original,    khi,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	115	None	replace
127	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  best,  contracted)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  best,  contracted)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  khi,  best,  contracted)  <  0)  {	  if    (comparator.compare(original,    khi,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	115	None	replace
128	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(simplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
129	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluate(original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluate(original,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluate(original,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(simplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
130	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.size()    ])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
131	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.size()    ])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
132	[BUG]  [BUGGY]  if(compiler.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(compiler.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(compiler.compare(original,  new  RealPointValuePair[original.size()  ])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.size()    ])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
133	[BUG]  [BUGGY]  if(original.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(original.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(original.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.size()    ])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
134	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
135	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
136	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  If(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  If(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  ';'  expected	78	None	add
137	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator  ==  null)  {  if(comparator.compare(contracted,  better)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator  ==  null)  {  if(comparator.compare(contracted,  better)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator  ==  null)  {  if(comparator.compare(contracted,  better)  <  0)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
138	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  comparator);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
139	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  contracted);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	compilable	  [FE]  AssertionError  	52	2	replace
141	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	compilable	  [FE]  AssertionError  	52	2	replace
142	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(simplex!=  null)  {  if(compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(simplex!=  null)  {  if(compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
143	[BUG]  [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  if(receiver.compare(contracted,  best)  <  0)  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  if(receiver.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  best)  <  0)  {  if(receiver.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	52	None	replace
144	[BUG]  [BUGGY]  if(contracted.compare(best,  contracted)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(best,  contracted)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(best,  contracted)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
145	[BUG]  [BUGGY]  if(constant.compare(contracted,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(constant.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(constant.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
146	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  total);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  total);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  total);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    total);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
147	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  extended);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  extended);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  extended);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    total);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
148	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  contracted.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  contracted.compare(contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  contracted.compare(contracted,  best);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
149	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  best);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
150	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  preferred.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  preferred.compare(contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  preferred.compare(contracted,  best);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
151	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  expanded);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
152	[BUG]  [BUGGY]  if(comparison.compare(best,  new  RealPointValuePair[contracted])  <  0)  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(best,  new  RealPointValuePair[contracted])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(best,  new  RealPointValuePair[contracted])  <  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
153	[BUG]  [BUGGY]  if(contracted.compare(original,  new  RealPointValuePair[best])  <  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(original,  new  RealPointValuePair[best])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(original,  new  RealPointValuePair[best])  <  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
154	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  Gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  Gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  Gamma);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(gamma,    original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
155	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  comparator;  }  [CE]  cannot  find  symbol  implemented  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  comparator;  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  comparator;  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    comparator;    }    	non-compiled	[CE]  cannot  find  symbol  implemented	107	None	replace
156	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    comparator;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
157	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    comparator;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
158	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.compare(simplex,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.compare(simplex,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.compare(simplex,  gamma);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(simplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
159	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(simplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
160	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflected,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflected,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(reflected,  expanded);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
161	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  contracted.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  contracted.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  contracted.iterate();	  Comparator    <    RealPointValuePair>    best    =    reflected.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
162	[BUG]  [BUGGY]  For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    RealPointValuePair    best    =    iterator.next();    }    	non-compiled	[CE]  ')'  expected	94	None	replace
163	[BUG]  [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    RealPointValuePair    best    =    iterator.next();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
164	[BUG]  [BUGGY]  Pentru(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Pentru(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Pentru(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    RealPointValuePair    best    =    iterator.next();    }    	non-compiled	[CE]  ')'  expected	94	None	replace
165	[BUG]  [BUGGY]  if(expanded  <  0)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded  <  0)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded  <  0)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	113	None	replace
166	[BUG]  [BUGGY]  if(expanded  <  0  ||  comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded  <  0  ||  comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded  <  0  ||  comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
167	[BUG]  [BUGGY]  if(expanded  <  0)  {  if(comparator.compare(contracted,  extended)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded  <  0)  {  if(comparator.compare(contracted,  extended)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded  <  0)  {  if(comparator.compare(contracted,  extended)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	113	None	replace
168	[BUG]  [BUGGY]  if(expanded  <  0)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded  <  0)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded  <  0)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	113	None	replace
169	[BUG]  [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {	  if    (contracted.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
170	[BUG]  [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )>  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )>  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )>  0)  {	  if    (contracted.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	13	None	replace
171	[BUG]  [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )||  contracted.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )||  contracted.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )||  contracted.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (contracted.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	13	None	replace
172	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  comparator.comparator;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  comparator.comparator;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  comparator.comparator;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
173	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  not  a  statement	4	None	replace
174	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  contracted;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  contracted;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  contracted;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
175	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  best)  ==  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  best)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  best)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	89	None	replace
176	[BUG]  [BUGGY]  if  (comparator.compare(original,  best,  contracted)  ==  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  best,  contracted)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best,  contracted)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	89	None	replace
177	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma)  ==  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	89	None	replace
178	[BUG]  [BUGGY]  if  (comparator.compare(original,  reflectedSimplex)  ==  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  reflectedSimplex)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  reflectedSimplex)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	89	None	replace
179	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compilator.size()  ]);	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
180	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
181	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  -  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  -  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  -  1]);	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
182	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false,  false);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false,  false);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
183	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false,  true);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  false,  true);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
184	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true,  true);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  true,  true);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
185	[BUG]  [BUGGY]  For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(attr.getValue()    ==    comparator)    {    return;    }    	non-compiled	[CE]  ')'  expected	96	None	replace
186	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(attr.getValue()    ==    comparator)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
187	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValu  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValu  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValu	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(attr.getValue()    ==    comparator)    {    return;    }    	non-compiled	[CE]  ')'  expected	96	None	replace
188	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  closed);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  closed);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  closed);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    closed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
189	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    closed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
190	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  extended,  closed);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  extended,  closed);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  extended,  closed);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    closed);    	non-compiled	[CE]  class,  interface,  or  enum  expected	72	None	replace
191	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
192	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
193	[BUG]  [BUGGY]  if  (comparator.compare(original,  best,  gamma)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  best,  gamma)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best,  gamma)  <  0)  {	  if    (comparator.compare(original,    gamma,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	48	None	replace
194	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  best,  contracted)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  best,  contracted)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  best,  contracted)  <  0)  {	  if    (comparator.compare(original,    gamma,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	48	None	replace
195	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  best,  contracted.length)  <  0)  {  [CE]  cannot  find  symbol  length  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  best,  contracted.length)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  best,  contracted.length)  <  0)  {	  if    (comparator.compare(original,    gamma,    best)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
196	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(gamma,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(gamma,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(gamma,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
197	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
198	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  reflectedSimplex  }  )  <  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  reflectedSimplex  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  reflectedSimplex  }  )  <  0)  {	  if    (comparison.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	30	None	replace
199	[BUG]  [BUGGY]  if  (consume.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  cannot  find  symbol  consume  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (consume.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (consume.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparison.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  consume	30	None	replace
200	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  1]);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  1]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    -    1]);    	non-compiled	[CE]  ']'  expected	10	None	replace
201	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  +  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  +  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[comparator.size()  +  1]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[comparator.size()    -    1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
202	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  extended.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  extended.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  extended.iterate();	  Comparator    <    RealPointValuePair>    best    =    extended.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
203	[BUG]  [BUGGY]  if(contracted.compare(original,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(original,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(original,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
204	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
205	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
206	[BUG]  [BUGGY]  if(best.compare(contracted,  new  RealPointValuePair[]  {  contracted)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best.compare(contracted,  new  RealPointValuePair[]  {  contracted)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best.compare(contracted,  new  RealPointValuePair[]  {  contracted)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
207	[BUG]  [BUGGY]  if(comparator.compare(constracted,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(constracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(constracted,  best)  <  0)  {  return;  }	  if(comparator.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
208	[BUG]  [BUGGY]  if(comparator.compare(retracted,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(retracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(retracted,  best)  <  0)  {  return;  }	  if(comparator.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
209	[BUG]  [BUGGY]  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  expanded)  <  0)  {  return;  }	  if(comparator.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
210	[BUG]  [BUGGY]  if  (Comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [CE]  non-static  method  compare(T,T)  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (Comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (Comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )  <  0)  {	  if    (comparator.compare(relative,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  non-static  method  compare(T,T)  cannot  be  referenced  from  a  static  context	86	None	replace
211	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  best;  }  [CE]  cannot  find  symbol  implemented  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  best;  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  best;  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    best;    }    	non-compiled	[CE]  cannot  find  symbol  implemented	106	None	replace
212	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    best;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
213	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  =	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    best;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
214	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  false);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  false);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(constraint,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	83	None	replace
215	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  expanded  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  expanded  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  expanded  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    expanded    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
216	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  expanded  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    expanded    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
217	[BUG]  [BUGGY]  if  (comparator.compare(original,  best,  expanded)  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  best,  expanded)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best,  expanded)  <  0)  {	  if    (comparator.compare(original,    best,    contracted)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	50	None	replace
218	[BUG]  [BUGGY]  if  (comparator.compare(original,  reflectedSimplex,  best)  <  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  reflectedSimplex,  best)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  reflectedSimplex,  best)  <  0)  {	  if    (comparator.compare(original,    best,    contracted)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	50	None	replace
219	[BUG]  [BUGGY]  if  (comparator.compare(original,  reflectedSimma,  best)  <  0)  {  [CE]  cannot  find  symbol  reflectedSimma  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  reflectedSimma,  best)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  reflectedSimma,  best)  <  0)  {	  if    (comparator.compare(original,    best,    contracted)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimma	50	None	replace
220	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  reflected);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
221	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  preferred);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  preferred);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  preferred);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
222	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  better);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  better);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  better);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
223	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)coordinate.clone();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)coordinate.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)coordinate.clone();	  RealPointValuePair    best    =(RealPointValuePair)covered.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
224	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  closed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  closed  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  closed  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
225	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  closed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  closed  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  closed  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
226	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  closed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  closed  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  new  RealPointValuePair[]  {  closed  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
227	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  '  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  '	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  illegal  line  end  in  character  literal	95	None	replace
228	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple!=  '  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple!=  '	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  illegal  line  end  in  character  literal	95	None	replace
229	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simpl  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simpl  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simpl	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  ')'  expected	95	None	replace
230	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
231	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  false);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  false);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
232	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  ]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
233	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  +  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  +  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  +  1]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
234	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  -  1]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  -  1]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compator.size()  -  1]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
235	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original,  expanded);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original,  expanded);	  Comparator    <    RealPointValuePair>    best    =    contracted.compareTo(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
236	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original,  reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original,  reflectedSimplex);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(original,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.compareTo(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
237	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSima.compareTo(original);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSima.compareTo(original);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSima.compareTo(original);	  Comparator    <    RealPointValuePair>    best    =    contracted.compareTo(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
238	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  reflected,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
239	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  reflected);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
240	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(expanded,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(expanded,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(expanded,  original);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
241	[BUG]  [BUGGY]  if(comparator.compare(original,  best)!=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  best)!=  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  best)!=  0)  {  return;  }	  if(comparator.compare(contracted,    best)!=    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
242	[BUG]  [BUGGY]  Comparator  <?>  comp  =  comparator.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <?>  comp  =  comparator.compare(contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <?>  comp  =  comparator.compare(contracted,  best);	  if(comparator.compare(contracted,    best)!=    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
243	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  comparator);	  Comparator    <    RealPointValuePair>    comp    =    best.compare(contracted,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
244	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  best.compare(contracted,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  best.compare(contracted,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  comp  =  best.compare(contracted,  comparator);	  Comparator    <    RealPointValuePair>    comp    =    best.compare(contracted,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
245	[BUG]  [BUGGY]  if(comparator.compare(original,  best)  ==  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  best)  ==  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  best)  ==  0)  {  return;  }	  if(comparator.compare(contracted,    best)    ==    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
246	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {	  if    (comparator.compare(best,    new    RealPointValuePair[]    {    contracted    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	31	None	replace
247	[BUG]  [BUGGY]  if  (comparator.compare(best,  new  RealPointValuePair[]  {  expanded  }  )  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(best,  new  RealPointValuePair[]  {  expanded  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(best,  new  RealPointValuePair[]  {  expanded  }  )  <  0)  {	  if    (comparator.compare(best,    new    RealPointValuePair[]    {    contracted    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	31	None	replace
248	[BUG]  [BUGGY]  if(relativeComparator!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [CE]  cannot  find  symbol  relativeComparator  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(relativeComparator!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(relativeComparator!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(relativeComparator,    comparator);    }    	non-compiled	[CE]  cannot  find  symbol  relativeComparator	104	None	replace
249	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  initial.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [CE]  cannot  find  symbol  implemented  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  initial.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  initial.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(relativeComparator,    comparator);    }    	non-compiled	[CE]  cannot  find  symbol  implemented	104	None	replace
250	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(relativeComparator,    comparator);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	104	None	replace
251	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expanded,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expanded,  comparator);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
252	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(simplex,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(simplex,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
253	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	compilable	  [FE]  AssertionError  	51	2	add
255	[BUG]  [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	compilable	  [FE]  AssertionError  	51	2	add
256	[BUG]  [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	add	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	compilable	  [FE]  AssertionError  	51	2	add
258	[BUG]  [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	compilable	  [FE]  AssertionError  	51	2	add
259	[BUG]  [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(compare.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  compare  [FE]          AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(compare.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(compare.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  compare	51	None	add
260	[BUG]  [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
261	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  expanded);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
262	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  extended);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  extended);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  extended);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
263	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(this,  reflected);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
264	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[contracted])  <  0)  {  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[contracted])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[contracted])  <  0)  {	  if(comparator.compare(best,    new    RealPointValuePair[contracted])    <    0)    {    	non-compiled	[CE]  incompatible  types	66	None	replace
265	[BUG]  [BUGGY]  if(comparator.compare(best,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(best,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(best,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(best,    new    RealPointValuePair[contracted])    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	66	None	replace
266	[BUG]  [BUGGY]  if(contracted.compare(best,  new  RealPointValuePair[comparator])  <  0)  {  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(best,  new  RealPointValuePair[comparator])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(best,  new  RealPointValuePair[comparator])  <  0)  {	  if(comparator.compare(best,    new    RealPointValuePair[contracted])    <    0)    {    	non-compiled	[CE]  incompatible  types	66	None	replace
267	[BUG]  [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    realPointValuePair[iterator.next()]    =    iterator.next();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
268	[BUG]  [BUGGY]  For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	For(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    realPointValuePair[iterator.next()]    =    iterator.next();    }    	non-compiled	[CE]  ')'  expected	93	None	replace
269	[BUG]  [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  original.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  original.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	for(Iterator  <  RealPointValuePair>  iterator  =  original.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    realPointValuePair[iterator.next()]    =    iterator.next();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
270	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  expanded  }  )  <  0)  {  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  expanded  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  expanded  }  )  <  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  expanded	29	None	replace
271	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  reflectedSimplex  }  )  <  0)  {  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  reflectedSimplex  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  reflectedSimplex  }  )  <  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	29	None	replace
272	[BUG]  [BUGGY]  if(implemented  ==  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented  ==  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented  ==  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.comparator	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    	non-compiled	[CE]  not  a  statement	105	None	replace
273	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  }  [CE]  cannot  find  symbol  implemented  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    	non-compiled	[CE]  cannot  find  symbol  implemented	105	None	replace
274	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
275	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
276	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
277	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  0,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  0,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(contracted,  0,  comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
278	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
279	[BUG]  [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  best)  <  0)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	55	None	replace
280	[BUG]  [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  best)  <  0)  {  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  best)  <  0)  {  if(comparator.compare(contracted,  best)  ==  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	55	None	replace
281	[BUG]  [BUGGY]  if(contracted!=  null)  {  if(contracted.compare(original,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted!=  null)  {  if(contracted.compare(original,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null)  {  if(contracted.compare(original,  best)  <  0)  {  return;  }	  if(contracted.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
282	[BUG]  [BUGGY]  if(comparator!=  null)  {  if(contracted.compare(original,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator!=  null)  {  if(contracted.compare(original,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator!=  null)  {  if(contracted.compare(original,  best)  <  0)  {  return;  }	  if(contracted.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
283	[BUG]  [BUGGY]  if(contracted!=  null  ||  contracted.compare(original,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted!=  null  ||  contracted.compare(original,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null  ||  contracted.compare(original,  best)  <  0)  {  return;  }	  if(contracted.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
284	[BUG]  [BUGGY]  if  (comparator.compare(original,  uniquex)  <  0)  {  [CE]  cannot  find  symbol  uniquex  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  uniquex)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  uniquex)  <  0)  {	  if    (comparator.compare(original,    reflectedSimplex)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  uniquex	49	None	replace
285	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )>  0)  {  [CE]  cannot  find  symbol  comparison  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )>  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )>  0)  {	  if    (comparison.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	30	None	replace
286	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )  >=  0)  {  [CE]  cannot  find  symbol  comparison  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )  >=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  best  }  )  >=  0)  {	  if    (comparison.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	30	None	replace
287	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(simplex,  gamma,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(simplex,  gamma,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(simplex,  gamma,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
288	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(global,  gamma,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(global,  gamma,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(global,  gamma,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
289	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(null,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(null,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(null,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
290	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  contracted,  new  RealPointValuePair[]  {  expanded  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  contracted,  new  RealPointValuePair[]  {  expanded  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  contracted,  new  RealPointValuePair[]  {  expanded  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
291	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  original);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
292	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  expected);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  expected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  gamma,  expected);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
293	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [CE]  cannot  find  symbol  preferred  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  preferred	29	None	replace
294	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )>  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )>  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best  }  )>  0)  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	29	None	replace
295	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  expected);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  expected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  expected);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
296	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.get(contracted,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.get(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
297	[BUG]  [BUGGY]  if(contracted.compare(best,  new  RealPointValuePair[])  <  0)  {  [CE]  array  dimension  missing  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(best,  new  RealPointValuePair[])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(best,  new  RealPointValuePair[])  <  0)  {	  if(comparator.compare(best,    new    RealPointValuePair[contracted])    <    0)    {    	non-compiled	[CE]  array  dimension  missing	66	None	replace
298	[BUG]  [BUGGY]  if(comparator.compare(contracted,  original,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  original,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  original,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	87	None	replace
299	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.length  -  1])  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.length  -  1])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[original.length  -  1])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	87	None	replace
300	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.length])  ==  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.length])  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[original.length])  ==  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.length])    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	87	None	replace
301	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(label,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(label,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(label,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(simplex,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
302	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  reflected);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
303	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(this,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(this,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	99	None	replace
304	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  0);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
305	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  best  =  comparator.compare(original,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
306	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(null,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(null,  true);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(null,  true);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
307	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  gamma  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  gamma  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  expanded,  new  RealPointValuePair[]  {  gamma  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    expanded    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
308	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  labels.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    =    best;    }    	non-compiled	[CE]  ')'  expected	106	None	replace
309	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[original.size()  ])  <  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.size()    ])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
310	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.size()  ])  >=  0)  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[original.size()  ])  >=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[original.size()  ])  >=  0)  {	  if(comparator.compare(contracted,    new    RealPointValuePair[original.size()    ])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
311	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
312	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(simplex);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(simplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(simplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
313	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(simplex);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(simplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(simplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
314	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  return;  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  return;  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
315	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  return  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  return  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  ==  return	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
316	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
317	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getVal  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getVal  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getVal	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(attr.getValue()    ==    comparator)    {    return;    }    	non-compiled	[CE]  ')'  expected	96	None	replace
318	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  original.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  original.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  original.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.getValue()  ==  comparator)  {  return;  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(attr.getValue()    ==    comparator)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
319	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
320	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	55	None	replace
321	[BUG]  [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	55	None	replace
322	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
323	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[best]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[best]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[best]);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
324	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  expanded,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  expanded,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  expanded,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
325	[BUG]  [BUGGY]  if(contracted.compare(comparator,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(comparator,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(comparator,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
326	[BUG]  [BUGGY]  if(contracted.compare(best,  comp)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(best,  comp)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(best,  comp)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
327	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [CE]  cannot  find  symbol  preferred  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {	  if    (comparator.compare(simplex,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  preferred	84	None	replace
328	[BUG]  [BUGGY]  if  (compare(original,  gamma,  comparator)  <  0)  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (compare(original,  gamma,  comparator)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (compare(original,  gamma,  comparator)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
329	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  comp)  <  0)  {  [CE]  cannot  find  symbol  comp  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  comp)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  comp)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comp	47	None	replace
330	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compareTo(original);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compareTo(original);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compareTo(original);	  Comparator    <    RealPointValuePair>    best    =    contracted.compareTo(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
331	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.compareTo(original);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.compareTo(original);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.compareTo(original);	  Comparator    <    RealPointValuePair>    best    =    contracted.compareTo(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
332	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expected);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expected);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
333	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  contracted);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(constraint,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
334	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(constraint,  expanded);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(constraint,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
335	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterate();	  Comparator    <    RealPointValuePair>    best    =    reflectedSimplex.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
336	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted);	  Comparator    <    RealPointValuePair>    comp    =    best.compare(contracted,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
337	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  closed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  closed  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  closed  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
338	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  gamma  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  gamma  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  gamma  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
339	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  sealed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  sealed  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  closed,  new  RealPointValuePair[]  {  sealed  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
340	[BUG]  [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  reflectedSimplex.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  reflectedSimplex.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	for(Iterator  <  RealPointValuePair>  iterator  =  reflectedSimplex.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    realPointValuePair[iterator.next()]    =    iterator.next();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
341	[BUG]  [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  realPointValuePair[iterator.next()]  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    realPointValuePair[iterator.next()]    =    iterator.next();    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
342	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  contracted);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
343	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(constraint,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(constraint,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(constraint,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
344	[BUG]  [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best],  contracted)  <  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(original,  new  RealPointValuePair[best],  contracted)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(original,  new  RealPointValuePair[best],  contracted)  <  0)  {	  if(comparison.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	65	None	replace
345	[BUG]  [BUGGY]  if(implemented  ==  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [CE]  cannot  find  symbol  implemented  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented  ==  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented  ==  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator,  comparator);  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(relativeComparator,    comparator);    }    	non-compiled	[CE]  cannot  find  symbol  implemented	104	None	replace
346	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator);  }  [CE]  cannot  find  symbol  implemented  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator);  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(relativeComparator);  }	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(relativeComparator,    comparator);    }    	non-compiled	[CE]  cannot  find  symbol  implemented	104	None	replace
347	[BUG]  [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  reflectedSimplex.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  for(Iterator  <  RealPointValuePair>  iterator  =  reflectedSimplex.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	for(Iterator  <  RealPointValuePair>  iterator  =  reflectedSimplex.iterator();  iterator.hasNext();)  {  RealPointValuePair  best  =  iterator.next();  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    RealPointValuePair    best    =    iterator.next();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
348	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  compare  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(simplex!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(simplex!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  compare	52	None	replace
349	[BUG]  [BUGGY]  if(comparator!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  compare  [FE]      AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  compare	52	None	replace
350	[BUG]  [BUGGY]  if  (comparison.compare(original,  best)  ==  0)  {  [CE]  cannot  find  symbol  comparison  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  best)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  best)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	89	None	replace
351	[BUG]  [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	                if(comparator.compare(contracted,        best)        <        0)        {        return;        }        if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,  best)  <  0)  {  return;  }  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
352	[BUG]  [BUGGY]  if(compare.compare(contracted,  best)>  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(compare.compare(contracted,  best)>  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(compare.compare(contracted,  best)>  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(compare.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
353	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  new  RealPointValuePair[]  {  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  new  RealPointValuePair[]  {  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  new  RealPointValuePair[]  {  }  );	  Comparator    <    RealPointValuePair>    comp    =    contracted.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
354	[BUG]  [BUGGY]  if(comparator.compare(simplex,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(simplex,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(simplex,  best)  <  0)  {  return;  }	  if(comparator.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
355	[BUG]  [BUGGY]  if(comparator.compare(original,  contracted)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  contracted)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  contracted)  <  0)  {  return;  }	  if(comparator.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
356	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(original,  gamma);	  if(comparator.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
357	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(recovered);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(recovered);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(recovered);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
358	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(implemented);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(implemented);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(implemented);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
359	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  ==  0))  {  return;  }  [CE]  array  dimension  missing  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  ==  0))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  ==  0))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    return;    }    	non-compiled	[CE]  array  dimension  missing	81	None	replace
360	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  ==  0  }  ))  {  return;  }  [CE]  array  dimension  missing  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  ==  0  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  ==  0  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    return;    }    	non-compiled	[CE]  array  dimension  missing	81	None	replace
361	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    	non-compiled	[CE]  ')'  expected	105	None	replace
362	[BUG]  [BUGGY]  if  (comparator.compare(original,  best,  khi)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  best,  khi)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  best,  khi)  <  0)  {	  if    (comparator.compare(original,    khi,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	115	None	replace
363	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  expanded);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(original,  expanded);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
364	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  expanded  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  expanded  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  new  RealPointValuePair[]  {  expanded  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
365	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)coordinates.clone();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)coordinates.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)coordinates.clone();	  RealPointValuePair    best    =(RealPointValuePair)covered.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
366	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compiler.size()  ]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compiler.size()  ]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[compiler.size()  ]);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[compilator.size()    ]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
367	[BUG]  [BUGGY]  if(contracted!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
368	[BUG]  [BUGGY]  if(contracted  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
369	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
370	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
371	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	112	None	replace
372	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	112	None	replace
373	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	112	None	replace
374	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	112	None	replace
375	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  extended);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  extended);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  extended);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
376	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  compressed);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  compressed);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  compressed);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
377	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  reflected);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
378	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(relativeSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(relativeSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.iterateSimplex(relativeSimplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(relativeSimplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
379	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(relativeSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(relativeSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(relativeSimplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(relativeSimplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
380	[BUG]  [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])  >=  0)  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(original,  new  RealPointValuePair[best])  >=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(original,  new  RealPointValuePair[best])  >=  0)  {	  if(comparator.compare(original,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	63	None	replace
381	[BUG]  [BUGGY]  if  (comparator.compare(best,  new  RealPointValuePair[]  {  closed  }  )  <  0)  {  [CE]  cannot  find  symbol  closed  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(best,  new  RealPointValuePair[]  {  closed  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(best,  new  RealPointValuePair[]  {  closed  }  )  <  0)  {	  if    (comparator.compare(best,    new    RealPointValuePair[]    {    contracted    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  closed	31	None	replace
382	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  contract.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  contract.compare(contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  contract.compare(contracted,  best);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
383	[BUG]  [BUGGY]  if(comparison.compare(best,  new  RealPointValuePair[best])  <  0)  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(best,  new  RealPointValuePair[best])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(best,  new  RealPointValuePair[best])  <  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
384	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  cannot  find  symbol  comparison  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	64	None	replace
385	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[best])!=  0)  {  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[best])!=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[best])!=  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
386	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateNewSimplex(original);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateNewSimplex(original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateNewSimplex(original);	  Comparator    <    RealPointValuePair>    best    =    iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
387	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expanded  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expanded	113	None	replace
388	[BUG]  [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  expansed  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expansed!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  expansed	113	None	replace
389	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(relative,  reflected);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(relative,  reflected);  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(relative,  reflected);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
390	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contract  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contract  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contract  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
391	[BUG]  [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  final  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	final  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
392	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  preferred;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  preferred;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  preferred;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
393	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  best;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  best;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  best;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
394	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  comparable;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  comparable;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  comparable;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
395	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  comparator  }  )  <  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  comparator  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  comparator  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	85	None	replace
396	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  contracted  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  contracted  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  contracted  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	85	None	replace
397	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  null,  false);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  null,  false);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  null,  false);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    true,    false);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
398	[BUG]  [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )  <  =  0)  {	  if    (comparison.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
399	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.get(comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.get(comparator);	  Comparator    <    RealPointValuePair>    best    =    contracted.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
400	[BUG]  [BUGGY]  if(comparator.compare(contracted,  best)>  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  best)>  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  best)>  0)  {  return;  }	  if(comparator.compare(contracted,    best)!=    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
401	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  preferred);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  preferred);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  preferred);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    gamma);    	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	replace
402	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(original,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(original,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  preferred.compare(original,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(original,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
403	[BUG]  [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )&&  comparator.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )&&  comparator.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  )&&  comparator.compare(original,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (comparison.compare(contracted,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	14	None	replace
404	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  new  RealPointValuePair[]  {  comparator  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  new  RealPointValuePair[]  {  comparator  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  new  RealPointValuePair[]  {  comparator  }  );	  Comparator    <    RealPointValuePair>    comp    =    best.compare(contracted,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
405	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  new  RealPointValuePair[comparator]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  new  RealPointValuePair[comparator]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  preferred.compare(contracted,  new  RealPointValuePair[comparator]);	  Comparator    <    RealPointValuePair>    comp    =    best.compare(contracted,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
406	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    comp    =    contracted.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
407	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  new  Double(best));  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  new  Double(best));  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  contracted.compare(contracted,  new  Double(best));	  Comparator    <    RealPointValuePair>    comp    =    contracted.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
408	[BUG]  [BUGGY]  if(compare.compare(best,  new  RealPointValuePair[original.length])  <  0)  {  [CE]  cannot  find  symbol  compare  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(compare.compare(best,  new  RealPointValuePair[original.length])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(compare.compare(best,  new  RealPointValuePair[original.length])  <  0)  {	  if(comparator.compare(best,    new    RealPointValuePair[contracted])    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  compare	66	None	replace
409	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relative);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relative);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.iterateSimplex(relative);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(reflected);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
410	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(comparator);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
411	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(realPointValuePair);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(realPointValuePair);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compareTo(realPointValuePair);	  Comparator    <    RealPointValuePair>    best    =    comparator.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
412	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[]  {  0  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	81	None	replace
413	[BUG]  [BUGGY]  if(comparison.compare(best,  new  RealPointValuePair[])  <  0)  {  [CE]  array  dimension  missing  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(best,  new  RealPointValuePair[])  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(best,  new  RealPointValuePair[])  <  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  array  dimension  missing	64	None	replace
414	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[best])  >=  0)  {  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[best])  >=  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[best])  >=  0)  {	  if(comparison.compare(contracted,    new    RealPointValuePair[best])    <    0)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
415	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[0]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[0]);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  new  RealPointValuePair[0]);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
416	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  gamma,  original);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
417	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.compare(original,  gamma,  comparator);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contract.compare(original,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contract.compare(original,  gamma,  comparator);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    gamma,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
418	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  0,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(contracted,    0,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	68	None	replace
419	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  }  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(simple  }	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(simple    	non-compiled	[CE]  ')'  expected	95	None	replace
420	[BUG]  [BUGGY]  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
421	[BUG]  [BUGGY]  if(contracted.compare(best,  comparator)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(best,  comparator)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(best,  comparator)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(contracted.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
422	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(label,  true);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(label,  true);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(label,  true);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    true);    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
423	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.get  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.get  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(Iterator  <  RealPointValuePair>  iterator  =  contracted.iterator();  iterator.hasNext();)  {  Comparator  <  RealPointValuePair>  best  =  iterator.next();  if(attr.get	  if(implemented!=    null)    {    for(Iterator    <    RealPointValuePair>    iterator    =    contracted.iterator();    iterator.hasNext();)    {    Comparator    <    RealPointValuePair>    best    =    iterator.next();    if(attr.getValue()    ==    comparator)    {    return;    }    	non-compiled	[CE]  ')'  expected	96	None	replace
424	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  compressed,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  compressed,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.evaluateNewSimplex(original,  compressed,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    comp    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
425	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  contracted);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(contracted,  contracted);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
426	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(contracted);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.compare(contracted);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.compare(contracted);	  Comparator    <    RealPointValuePair>    comparator    =    comparator.compare(contracted,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
427	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  this.comparator;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  =  this.comparator;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  =  this.comparator;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
428	[BUG]  [BUGGY]  ((  RealPointValuePair)implemented).comparator  /  comparator;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  ((  RealPointValuePair)implemented).comparator  /  comparator;  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	((  RealPointValuePair)implemented).comparator  /  comparator;	  ((    RealPointValuePair)implemented).comparator    =    comparator;    	non-compiled	[CE]  not  a  statement	4	None	replace
429	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  gamma,  best)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  gamma,  best)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(simplex,  gamma,  best)  <  0)  {	  if    (comparator.compare(original,    gamma,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	48	None	replace
430	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  best)  <  0  ||  comparator.compare(original,  khi)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  best)  <  0  ||  comparator.compare(original,  khi)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  best)  <  0  ||  comparator.compare(original,  khi)  <  0)  {	  if    (comparator.compare(original,    gamma,    best)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	48	None	replace
431	[BUG]  [BUGGY]  if  (comparator.compare(original,  compressed)  <  0)  {  [CE]  cannot  find  symbol  compressed  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  compressed)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  compressed)  <  0)  {	  if    (comparator.compare(original,    reflectedSimplex)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  compressed	49	None	replace
432	[BUG]  [BUGGY]  if(comparator.compare(contracted,  best)  >=  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  best)  >=  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  best)  >=  0)  {  return;  }	  if(contracted.compare(original,    best)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
433	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(compiler);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.get(compiler);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  this.comparator.get(compiler);	  Comparator    <    RealPointValuePair>    best    =    this.comparator.get(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	110	None	replace
434	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {	  if    (comparator.compare(best,    new    RealPointValuePair[]    {    contracted    }    )    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	31	None	replace
435	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  contract  }  )  <  0)  {  [CE]  cannot  find  symbol  contract  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  contract  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  contract  }  )  <  0)  {	  if    (comparator.compare(best,    new    RealPointValuePair[]    {    contracted    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  contract	31	None	replace
436	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparison.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  comparison  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(simplex!=  null)  {  if(comparison.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(simplex!=  null)  {  if(comparison.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  comparison	52	None	replace
437	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(comparator,  gamma,  original);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(comparator,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(comparator,  gamma,  original);	  Comparator    <    RealPointValuePair>    best    =    contracted.compare(original,    gamma,    comparator);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
438	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  this.comparator.iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
439	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex();	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
440	[BUG]  [BUGGY]  if  (comparator.compare(locale,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [CE]  cannot  find  symbol  locale  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(locale,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(locale,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {	  if    (comparator.compare(locale,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  locale	102	None	replace
441	[BUG]  [BUGGY]  if  (comparator.compare(locale,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [CE]  cannot  find  symbol  locale  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(locale,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(locale,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {	  if    (comparator.compare(locale,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  locale	102	None	replace
442	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  compressed  }  )  <  0)  {  [CE]  cannot  find  symbol  compressed  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  compressed  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  best,  compressed  }  )  <  0)  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    best,    expanded    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  compressed	85	None	replace
443	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  reflectedSimplex);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
444	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  best);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
445	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expected);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contracted.compare(original,  expected);	  Comparator    <    RealPointValuePair>    best    =    comparator.compare(original,    contracted);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
446	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  sealed  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  sealed  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  gamma,  new  RealPointValuePair[]  {  sealed  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    new    RealPointValuePair[]    {    closed    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
447	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)restricted.clone();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)restricted.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)restricted.clone();	  RealPointValuePair    best    =(RealPointValuePair)constrainted.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
448	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.iterateSimplex(original);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  this.comparator.iterateSimplex(original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  this.comparator.iterateSimplex(original);	  Comparator    <    RealPointValuePair>    best    =    comparator.iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
449	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  contracted,  best);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  contracted,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  contracted,  best);	  Comparator    <    RealPointValuePair>    comp    =    comparator.compare(contracted,    expanded,    best);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
450	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)recovered.clone();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)recovered.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	RealPointValuePair  best  =(RealPointValuePair)recovered.clone();	  RealPointValuePair    best    =(RealPointValuePair)covered.clone();    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
451	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [CE]  '}'  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(best  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
452	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best))  {  return;  }  [CE]  '}'  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  best))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best)    <    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	114	None	replace
453	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  contracted)  <  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  contracted)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  contracted)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	47	None	replace
454	[BUG]  [BUGGY]  if  (comparator.compare(original,  gamma,  cut)  <  0)  {  [CE]  cannot  find  symbol  cut  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  gamma,  cut)  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  gamma,  cut)  <  0)  {	  if    (comparator.compare(original,    gamma)    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  cut	47	None	replace
455	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0))  {  return;  }  [CE]  '}'  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  0))  {  return;  }	  if(comparator.compare(contracted,    best)    ==    0)    {    return;    }    	non-compiled	[CE]  '}'  expected	44	None	replace
456	[BUG]  [BUGGY]  if(comparison.compare(contracted,  best)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  best)  <  0)  {  return;  }	  if(comparator.compare(contracted,    best)    ==    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
457	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate()  :  null;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate()  :  null;  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterate()  :  null;	  Comparator    <    RealPointValuePair>    best    =    contracted.iterate()    :    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
458	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  expanded.iterate()  :  null;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  expanded.iterate()  :  null;  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  expanded.iterate()  :  null;	  Comparator    <    RealPointValuePair>    best    =    contracted.iterate()    :    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
459	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  contracted  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
460	[BUG]  [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparison.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparison.compare(contracted,  new  RealPointValuePair[]  {  best  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
461	[BUG]  [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  preferred  }  ))  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator.compare(contracted,  new  RealPointValuePair[]  {  preferred  }  ))  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator.compare(contracted,  new  RealPointValuePair[]  {  preferred  }  ))  {  return;  }	  if(comparator.compare(contracted,    new    RealPointValuePair[]    {    best    }    ))    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
462	[BUG]  [BUGGY]  if(contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.compareTo(original,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.compareTo(original,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(contracted.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.compareTo(original,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (contracted.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	13	None	replace
463	[BUG]  [BUGGY]  if(implied!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  implied  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implied!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implied!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	          if(comparator.compare(contracted,    best)    <    0)    {    return;    }    If(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  implied	55	None	replace
464	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    if(comparator  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  }	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
465	[BUG]  [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  0  }  ))  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  0  }  ))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(simplex,  new  RealPointValuePair[]  {  0  }  ))  {	  if    (comparator.compare(contracted,    new    RealPointValuePair[]    {    0    }    ))    {    	non-compiled	[CE]  incompatible  types	97	None	replace
466	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed,  gamma);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed,  gamma);	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    gamma,    expanded);    	non-compiled	[CE]  class,  interface,  or  enum  expected	41	None	replace
467	[BUG]  [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  return;  }  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(comparator  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(comparator  ==  null)  {  if(comparator.compare(contracted,  new  RealPointValuePair[best])  <  0)  {  return;  }	  if(comparator    ==    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  incompatible  types	79	None	replace
468	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(implemented);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterateSimplex(implemented);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterateSimplex(implemented);	  Comparator    <    RealPointValuePair>    best    =    iterateSimplex(original);    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
469	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex(simplex);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex(simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex(simplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(simplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
470	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contractual.iterate();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  contractual.iterate();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  contractual.iterate();	  Comparator    <    RealPointValuePair>    best    =    extended.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
471	[BUG]  [BUGGY]  if(expanded.compareTo(contracted)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded.compareTo(contracted)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded.compareTo(contracted)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
472	[BUG]  [BUGGY]  if(expanded.compareTo(comparator)  <  0)  {  return;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(expanded.compareTo(comparator)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(expanded.compareTo(comparator)  <  0)  {  return;  }	  if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
473	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed,  new  RealPointValuePair[]  {  contracted  }  );  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed,  new  RealPointValuePair[]  {  contracted  }  );  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.evaluateNewSimplex(original,  compressed,  new  RealPointValuePair[]  {  contracted  }  );	  Comparator    <    RealPointValuePair>    best    =    comparator.evaluateNewSimplex(original,    expanded,    new    RealPointValuePair[]    {    contracted    }    );    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
474	[BUG]  [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.equals(original))  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.equals(original))  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  new  RealPointValuePair[]  {  0  }  )&&  contracted.equals(original))  {	  if    (comparator.compare(original,    new    RealPointValuePair[]    {    0    }    )    <    0)    {    	non-compiled	[CE]  incompatible  types	12	None	replace
475	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best.	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    	non-compiled	[CE]  <identifier>  expected	105	None	replace
476	[BUG]  [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if(implemented!=  null)  {  for(int  i  =  0,  len  =  original.length;  i  <  len;  ++i)  {  Comparator  <  RealPointValuePair>  best  =  new  Comparator  <  RealPointValuePair>(labels[i]);  best	  if(implemented!=    null)    {    for(int    i    =    0,    len    =    original.length;    i    <    len;    ++i)    {    Comparator    <    RealPointValuePair>    best    =    new    Comparator    <    RealPointValuePair>(labels[i]);    best.comparator    	non-compiled	[CE]  not  a  statement	105	None	replace
477	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [CE]  cannot  find  symbol  comparison  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  contracted  }  )  <  0)  {	  if    (comparison.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  comparison	30	None	replace
478	[BUG]  [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [CE]  cannot  find  symbol  preferred  [FE]                  AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparison.compare(original,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparison.compare(original,  new  RealPointValuePair[]  {  preferred  }  )  <  0)  {	  if    (comparison.compare(original,    new    RealPointValuePair[]    {    best    }    )    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  preferred	30	None	replace
479	[BUG]  [BUGGY]  if  (comparator.compare(original,  khi,  best)  ==  0)  {  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  khi,  best)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  khi,  best)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	89	None	replace
480	[BUG]  [BUGGY]  if  (comparator.compare(original,  blue,  best)  ==  0)  {  [CE]  cannot  find  symbol  blue  [FE]              AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  if  (comparator.compare(original,  blue,  best)  ==  0)  {  [BUGGY]          return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	if  (comparator.compare(original,  blue,  best)  ==  0)  {	  if    (comparator.compare(original,    best)    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  blue	89	None	replace
481	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate(reflectedSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  iterate(reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  iterate(reflectedSimplex);	  Comparator    <    RealPointValuePair>    best    =    reflectedSimplex.iterate();    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
482	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex(relativeSimplex);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        simplex  =  reflectedSimplex;  }  return;  }  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);      [BUGGY]  Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex(relativeSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	90	90	2	replace	Comparator  <  RealPointValuePair>  best  =  reflectedSimplex.iterateSimplex(relativeSimplex);	  Comparator    <    RealPointValuePair>    best    =    contracted.iterateSimplex(relativeSimplex);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
