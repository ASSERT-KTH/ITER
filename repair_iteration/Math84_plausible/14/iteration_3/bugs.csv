bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
2	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
3	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  *  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  *  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  *  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
4	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(),  comparator,  n);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(),  comparator,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoeff(),  comparator,  n);	  final    double[]    coeff    =    original[0].getCoeff(),    comparator);    	non-compiled	[CE]  ';'  expected	90	None	replace
5	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(),  comparator,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(),  comparator,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoeff(),  comparator,  false);	  final    double[]    coeff    =    original[0].getCoeff(),    comparator);    	non-compiled	[CE]  <identifier>  expected	90	None	replace
6	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff(),  comparator);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getCoeff(),  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getCoeff(),  comparator);	  final    double[]    coeff    =    original[0].getCoeff(),    comparator);    	non-compiled	[CE]  ';'  expected	90	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  simplex  =  new  RealPointValuePair[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex    =    new    RealPointValuePair[n    /    1];    simplex  =  new  RealPointValuePair[n  /  1];	  	compilable	  [FE]  AssertionError  	5	2	add
8	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  simplex  =  new  RealPointValuePair[n  /  1];  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  simplex  =  new  RealPointValuePair[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    simplex  =  new  RealPointValuePair[n  /  1];	  	compilable	  [FE]  AssertionError  	5	2	add
9	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  Simplex  =  new  RealPointValuePair[n  /  1];  [CE]  cannot  find  symbol  Simplex  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  Simplex  =  new  RealPointValuePair[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    Simplex  =  new  RealPointValuePair[n  /  1];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	5	None	add
10	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double  n  =  original[n  /  1];  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double  n  =  original[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    double  n  =  original[n  /  1];	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	5	None	add
11	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double[]  coeff  =  original[n  /  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double[]  coeff  =  original[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    double[]  coeff  =  original[n  /  1];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	5	None	add
12	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double[]  xOriginal  =  original[n  /  1];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double[]  xOriginal  =  original[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    double[]  xOriginal  =  original[n  /  1];	  	non-compiled	[CE]  incompatible  types	5	None	add
13	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator[0].getCoeff();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator[0].getCoeff();	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	55	None	replace
14	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[coeff  +  1];  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[coeff  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[coeff  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
15	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[c  +  1];  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[c  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[c  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
16	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[0];  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[0];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[0];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
17	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getRealPointValue();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[1].getRealPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[1].getRealPointValue();	  final    double[]    xOriginal    =    original[0].getRealPointValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
18	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getRealPointValue();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getRealPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0],  comparator.getRealPointValue();	  final    double[]    xOriginal    =    original[0].getRealPointValue();    	non-compiled	[CE]  ';'  expected	45	None	replace
19	[BUG]  [BUGGY]  final  double[]  original  =  original[0].getRealPointValue();  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  original  =  original[0].getRealPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  original  =  original[0].getRealPointValue();	  final    double[]    xOriginal    =    original[0].getRealPointValue();    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	45	None	replace
20	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  +  1];  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    xOriginal    =    original[n    +    2];    	non-compiled	[CE]  incompatible  types	18	None	replace
21	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  +  2];  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  +  2];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    xOriginal    =    original[n    +    2];    	non-compiled	[CE]  incompatible  types	18	None	replace
22	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  +  3];  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  +  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  +  3];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    xOriginal    =    original[n    +    2];    	non-compiled	[CE]  incompatible  types	18	None	replace
23	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  *  2];  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  *  2];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    xOriginal    =    original[n    +    2];    	non-compiled	[CE]  incompatible  types	18	None	replace
24	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff,  comparator;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff,  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1]  +  coeff,  comparator;	  simplex    =    new    RealPointValuePair[n    -    1]    +    coeff;    	non-compiled	[CE]  ';'  expected	59	None	replace
25	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff,  comparator);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1]  +  coeff,  comparator);	  simplex    =    new    RealPointValuePair[n    -    1]    +    coeff;    	non-compiled	[CE]  ';'  expected	59	None	replace
26	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  -  1]  +  n;  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  -  1]  +  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  -  1]  +  n;	  simplex    =    new    RealPointValuePair[n    -    1]    +    coeff;    	non-compiled	[CE]  possible  loss  of  precision	59	None	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex  =  new  RealPointValuePair[n  *  4];	  simplex    =    new    RealPointValuePair[n    *    3];    	compilable	  [FE]  NullPointerException  	4	4	replace
28	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  4];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  *  4];	  simplex    =    new    RealPointValuePair[n    *    3];    	compilable	  [FE]  NullPointerException  	4	4	replace
29	[BUG]  [BUGGY]  double[]  original  =  comparator.getValue(xSmallest,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  original  =  comparator.getValue(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  original  =  comparator.getValue(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
30	[BUG]  [BUGGY]  Double[]  original  =  comparator.getValue(xSmallest,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  original  =  comparator.getValue(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  original  =  comparator.getValue(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
31	[BUG]  [BUGGY]  final  double[]  original  =  comparator.getValue(xSmallest,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  original  =  comparator.getValue(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  original  =  comparator.getValue(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
32	[BUG]  [BUGGY]  n  =  comparator.getValue(xSmallest,  n);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  comparator.getValue(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  comparator.getValue(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	78	None	replace
33	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double  n  =  xSmallest.length;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double  n  =  xSmallest.length;	  final    int    n    =    xSmallest.length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	60	None	replace
34	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  int  n  =  xSmallest.length  -  1;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  int  n  =  xSmallest.length  -  1;	  final    int    n    =    xSmallest.length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	60	None	replace
35	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  2;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  int  n  =  xSmallest.length  -  2;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  int  n  =  xSmallest.length  -  2;	  final    int    n    =    xSmallest.length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	60	None	replace
36	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  int  n  =  xSmallest.length  +  1;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  int  n  =  xSmallest.length  +  1;	  final    int    n    =    xSmallest.length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	60	None	replace
37	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoef(n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoef(n);	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	41	None	replace
38	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefs();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefs();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefs();	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	41	None	replace
39	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef(),  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoef(),  coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoef(),  coeff;	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	41	None	replace
40	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	22	None	replace
41	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	22	None	replace
42	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(n,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	22	None	replace
43	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[c  +  1];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[c  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[c  +  1];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
44	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[0];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[0];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[0];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
45	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  *  1];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  *  1];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
46	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.getCoef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.getCoef();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
47	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef()  +  n;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoef()  +  n;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoef()  +  n;	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
48	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  false);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  false);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
49	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  xSmallest);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  xSmallest);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
50	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  true);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  true);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator,  true);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
51	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[str.length  +  1];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[str.length  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[str.length  +  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[str    +    1];    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
52	[BUG]  [BUGGY]  n  =  n  +  1;  double[]  coeff  =  comparator.getCoeff();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  +  1;  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  +  1;  double[]  coeff  =  comparator.getCoeff();	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	74	None	replace
53	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(n,  xSmallest  +  1]);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(n,  xSmallest  +  1]);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(n,  xSmallest  +  1]);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair(xSmallest,    n    +    1]);    	non-compiled	[CE]  ')'  expected	102	None	replace
54	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  1);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair(xSmallest,    n    +    1]);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
55	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  1],  comparator);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  1],  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  1],  comparator);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair(xSmallest,    n    +    1]);    	non-compiled	[CE]  ')'  expected	102	None	replace
56	[BUG]  [BUGGY]  double[]  coeff  =  original[n  +  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
57	[BUG]  [BUGGY]  final  double[]  coeff  =  original[n  +  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
58	[BUG]  [BUGGY]  Double[]  coeff  =  original[n  +  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  original[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  original[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
59	[BUG]  [BUGGY]  n  =  n  +  2;  double[]  coeff  =  original[n  +  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                      NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  +  2;  double[]  coeff  =  original[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  +  2;  double[]  coeff  =  original[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	19	None	replace
60	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[0].getRealPointValuePair();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	29	None	replace
61	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getRealPointValuePair();	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	56	None	replace
62	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getValueRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getValueRef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getValueRef();	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	56	None	replace
63	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[n].getCoeff();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[n].getCoeff();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
64	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[n].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[n].getRealPointValuePair();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
65	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getValueRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[n].getValueRef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[n].getValueRef();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
66	[BUG]  [BUGGY]  double[]  coeff  =  original[n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
67	[BUG]  [BUGGY]  n  =  n  -  1;  double[]  coeff  =  original[n  -  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  -  1;  double[]  coeff  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  -  1;  double[]  coeff  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	52	None	replace
68	[BUG]  [BUGGY]  final  double[]  coeff  =  original[n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
69	[BUG]  [BUGGY]  Double[]  coeff  =  original[n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
70	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[1];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
71	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n];  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[n];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
72	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(original[0]);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(original[0]);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(original[0]);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
73	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  -  1];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    xOriginal    =    original[n    -    1];    	non-compiled	[CE]  incompatible  types	53	None	replace
74	[BUG]  [BUGGY]  Double[]  xOriginal  =  original[n  -  1];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  xOriginal  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  xOriginal  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    xOriginal    =    original[n    -    1];    	non-compiled	[CE]  incompatible  types	53	None	replace
75	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  *  n  -  1];  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  *  n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  *  n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    xOriginal    =    original[n    -    1];    	non-compiled	[CE]  incompatible  types	53	None	replace
76	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getRealPointValuePair();	  final    double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	21	None	replace
77	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  n  +  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	26	None	replace
78	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  2);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  2);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	26	None	replace
79	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator,  n);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator,  n);	  final    double[]    coeff    =    original[0].getCoef(),    comparator);    	non-compiled	[CE]  ';'  expected	13	None	replace
80	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator,  false);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator,  false);	  final    double[]    coeff    =    original[0].getCoef(),    comparator);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getCoef(),  comparator);	  final    double[]    coeff    =    original[0].getCoef(),    comparator);    	non-compiled	[CE]  ';'  expected	13	None	replace
82	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getPointRef()  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[1].getPointRef()  +  coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[1].getPointRef()  +  coeff;	  final    double[]    xOriginal    =    original[1].getPointRef();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	43	None	replace
83	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[2].getPointRef();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[2].getPointRef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[2].getPointRef();	  final    double[]    xOriginal    =    original[1].getPointRef();    	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	43	None	replace
84	[BUG]  [BUGGY]  n  =  n  *  2;  double[]  coeff  =  comparator.getCoeff();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  *  2;  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  *  2;  double[]  coeff  =  comparator.getCoeff();	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	35	None	replace
85	[BUG]  [BUGGY]  int  n  =  coeff[0].getPointRef()  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  coeff[0].getPointRef()  +  1;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  coeff[0].getPointRef()  +  1;	  int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
86	[BUG]  [BUGGY]  int  n  =  coeff[1].getPointRef();  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  coeff[1].getPointRef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  coeff[1].getPointRef();	  int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
87	[BUG]  [BUGGY]  int  n  =  coeff[0].getPointRef().length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  coeff[0].getPointRef().length;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  coeff[0].getPointRef().length;	  int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
88	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	95	None	replace
89	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	95	None	replace
90	[BUG]  [BUGGY]  n  =  comparator.evaluate(xSmallest,  n);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  comparator.evaluate(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	95	None	replace
91	[BUG]  [BUGGY]  double[]  original  =  comparator.equals(xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  original  =  comparator.equals(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  original  =  comparator.equals(xSmallest);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	73	None	replace
92	[BUG]  [BUGGY]  final  double[]  original  =  comparator.equals(xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  original  =  comparator.equals(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  original  =  comparator.equals(xSmallest);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	73	None	replace
93	[BUG]  [BUGGY]  n  =  n  +  2;  double[]  original  =  comparator.equals(xSmallest,  coeff);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  +  2;  double[]  original  =  comparator.equals(xSmallest,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  +  2;  double[]  original  =  comparator.equals(xSmallest,  coeff);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	73	None	replace
94	[BUG]  [BUGGY]  Double[]  original  =  comparator.equals(xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  original  =  comparator.equals(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  original  =  comparator.equals(xSmallest);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	73	None	replace
95	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[0].getCoefFactory();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[0].getCoefFactory();	  final    double[]    coeff    =    original[0].getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	86	None	replace
96	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory().coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory().coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoefFactory().coeff;	  final    double[]    coeff    =    original[0].getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	86	None	replace
97	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  -  1];  [CE]  cannot  find  symbol  Simplex  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    Simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol  Simplex	51	None	replace
98	[BUG]  [BUGGY]  n  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    Simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	51	None	replace
99	[BUG]  [BUGGY]  n  =  new  RealPointValuePair[n  -  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  new  RealPointValuePair[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    Simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	51	None	replace
100	[BUG]  [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  n);	  RealPointValuePair    original    =    evaluateNewSimplex(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	80	None	replace
101	[BUG]  [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  gamma);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  gamma);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  gamma);	  RealPointValuePair    original    =    evaluateNewSimplex(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	80	None	replace
102	[BUG]  [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  false);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  false);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	RealPointValuePair  original  =  evaluateNewSimplex(xSmallest,  coeff,  comparator,  false);	  RealPointValuePair    original    =    evaluateNewSimplex(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	80	None	replace
103	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator[0].getRealPointValuePair();	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	68	None	replace
104	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  *  1];  [CE]  cannot  find  symbol  Simplex  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  *  1];	  simplex    =    new    RealPointValuePair[n    *    1];    Simplex    =    new    RealPointValuePair[n    *    1];    	non-compiled	[CE]  cannot  find  symbol  Simplex	32	None	replace
105	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  *  2];  [CE]  cannot  find  symbol  Simplex  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  *  2];	  simplex    =    new    RealPointValuePair[n    *    1];    Simplex    =    new    RealPointValuePair[n    *    1];    	non-compiled	[CE]  cannot  find  symbol  Simplex	32	None	replace
106	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  *  3];  [CE]  cannot  find  symbol  Simplex  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  *  3];	  simplex    =    new    RealPointValuePair[n    *    1];    Simplex    =    new    RealPointValuePair[n    *    1];    	non-compiled	[CE]  cannot  find  symbol  Simplex	32	None	replace
107	[BUG]  [BUGGY]  n  =  new  RealPointValuePair[n  *  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  new  RealPointValuePair[n  *  1];	  simplex    =    new    RealPointValuePair[n    *    1];    Simplex    =    new    RealPointValuePair[n    *    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	32	None	replace
108	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[oeff  +  1]  -  coeff;  [CE]  cannot  find  symbol  oeff  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[oeff  +  1]  -  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[oeff  +  1]  -  coeff;	  simplex    =    new    RealPointValuePair[str    +    1]    -    coeff;    	non-compiled	[CE]  cannot  find  symbol  oeff	10	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex    =    new    RealPointValuePair[n    *    3];    simplex  =  new  RealPointValuePair[n  *  3];	  	compilable	  [FE]  AssertionError  	3	2	add
110	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    simplex  =  new  RealPointValuePair[n  *  3];	  	compilable	  [FE]  AssertionError  	3	2	add
111	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  Simplex  =  new  RealPointValuePair[n  *  3];  [CE]  cannot  find  symbol  Simplex  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  Simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    Simplex  =  new  RealPointValuePair[n  *  3];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	3	None	add
112	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  original[n  *  3];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  original[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    double[]  coeff  =  original[n  *  3];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	add
113	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  final  double[]  coeff  =  original[n  *  3];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  final  double[]  coeff  =  original[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    final  double[]  coeff  =  original[n  *  3];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	add
114	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  comparator.getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    double[]  coeff  =  comparator.getCoeff();	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	add
115	[BUG]  [BUGGY]  double[]  original  =  comparator.equals(xSmallest,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  original  =  comparator.equals(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  original  =  comparator.equals(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	66	None	replace
116	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  *  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  *  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
117	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  -  1],  coeff;  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  -  1],  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  -  1],  coeff;	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
118	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getCoefF();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getCoefF();	  final    double[]    coeff    =    original[0].getCoefF();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	89	None	replace
119	[BUG]  [BUGGY]  n  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  new  RealPointValuePair[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	15	None	replace
120	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[1].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[1].getCoeff();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[1].getCoeff();	  final    double[]    coeff    =    comparator[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	40	None	replace
121	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getPointRef().clone();  [CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[1].getPointRef().clone();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[1].getPointRef().clone();	  final    double[]    xOriginal    =    original[0].getPointRef().clone();    	non-compiled	[CE]  variable  xOriginal  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	87	None	replace
122	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getRef().clone();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getRef().clone();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getRef().clone();	  final    double[]    xOriginal    =    original[0].getPointRef().clone();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
124	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
126	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];	  	compilable	  [FE]  AssertionError  	30	2	add
128	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  3];	  	compilable	  [FE]  AssertionError  	30	2	add
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  3];	  	compilable	  [FE]  AssertionError  	30	2	add
130	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  3];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  3];	  	compilable	  [FE]  AssertionError  	30	2	add
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];	  	compilable	  [FE]  AssertionError  	30	2	add
132	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];	  	compilable	  [FE]  AssertionError  	30	2	add
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];	  	compilable	  [FE]  AssertionError  	49	2	add
134	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];	  	compilable	  [FE]  AssertionError  	49	2	add
135	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    double[]  coeff  =  original[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	add
136	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  final  double[]  coeff  =  original[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  final  double[]  coeff  =  original[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    final  double[]  coeff  =  original[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	add
137	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  xSmallest.getCoeff();  simplex  =  new  RealPointValuePair[n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  xSmallest.getCoeff();  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    double[]  coeff  =  xSmallest.getCoeff();  simplex  =  new  RealPointValuePair[n  -  1];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	add
138	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  [CE]  cannot  find  symbol  Simplex  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	49	None	add
139	[BUG]  [BUGGY]  double[]  coeff  =  original[n  *  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  *  1];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    original[n    *    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	33	None	replace
140	[BUG]  [BUGGY]  double[]  coeff  =  original[n  *  2];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  *  2];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    original[n    *    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	33	None	replace
141	[BUG]  [BUGGY]  Double[]  coeff  =  original[n  *  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  original[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  original[n  *  1];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    original[n    *    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	33	None	replace
142	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.getCoeff(xSmallest);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
143	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.getCoeff(n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.getCoeff(n);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
144	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  2];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  2];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[original.length    +    1];    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
145	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  1],  coeff);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  1],  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  1],  coeff);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[original.length    +    1];    	non-compiled	[CE]  ';'  expected	75	None	replace
146	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  3];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  3];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[original.length    +    1];    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
147	[BUG]  [BUGGY]  double  n  =  original[n  -  1];  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double  n  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double  n  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double    n    =    original[n    -    1];    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
148	[BUG]  [BUGGY]  n  =  original[n  -  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double    n    =    original[n    -    1];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	77	None	replace
149	[BUG]  [BUGGY]  final  double  n  =  original[n  -  1];  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double  n  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double  n  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double    n    =    original[n    -    1];    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
150	[BUG]  [BUGGY]  Double  n  =  original[n  -  1];  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double  n  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double  n  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double    n    =    original[n    -    1];    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
151	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex  =  new  RealPointValuePair[n  /  2];	  simplex    =    new    RealPointValuePair[n    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
152	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  /  2];	  simplex    =    new    RealPointValuePair[n    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
153	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex  =  new  RealPointValuePair[n  -  2];	  simplex    =    new    RealPointValuePair[n    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
154	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  2];	  simplex    =    new    RealPointValuePair[n    *    2];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	4	replace
155	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeffs(n);	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	23	None	replace
156	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  /  n;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  /  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  +  1]  /  n;	  simplex    =    new    RealPointValuePair[coeff    +    1]    -    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
157	[BUG]  [BUGGY]  double  coeff  =  new  RealPointValuePair[coeff  +  1]  -  n;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double  coeff  =  new  RealPointValuePair[coeff  +  1]  -  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double  coeff  =  new  RealPointValuePair[coeff  +  1]  -  n;	  simplex    =    new    RealPointValuePair[coeff    +    1]    -    n;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	8	None	replace
158	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  -  coeff;  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  -  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  +  1]  -  coeff;	  simplex    =    new    RealPointValuePair[coeff    +    1]    -    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
159	[BUG]  [BUGGY]  double  x  =  new  RealPointValuePair[coeff  +  1]  -  n;  [CE]  possible  loss  of  precision  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double  x  =  new  RealPointValuePair[coeff  +  1]  -  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double  x  =  new  RealPointValuePair[coeff  +  1]  -  n;	  simplex    =    new    RealPointValuePair[coeff    +    1]    -    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
160	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  /  1];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  /  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[coeff    +    1];    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
161	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  *  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  *  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[coeff    +    1];    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
162	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	97	None	replace
163	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	97	None	replace
164	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    null);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	97	None	replace
165	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff()  /  n;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff()  /  n;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff()  /  n;	  double[]    coeff    =    comparator.getCoeff()    +    n;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
166	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff()  *  n;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff()  *  n;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff()  *  n;	  double[]    coeff    =    comparator.getCoeff()    +    n;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
167	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff()  +  n  +  1;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff()  +  n  +  1;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff()  +  n  +  1;	  double[]    coeff    =    comparator.getCoeff()    +    n;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	63	None	replace
168	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getValue();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getValue();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getValue();	          final    double[]    coeff    =    xSmallest.getValue();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
169	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getValue(xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getValue(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getValue(xSmallest);	          final    double[]    coeff    =    xSmallest.getValue();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
170	[BUG]  [BUGGY]  final  double[]  coeff  =  xSmallest.getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  xSmallest.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  xSmallest.getCoeff();	          final    double[]    coeff    =    xSmallest.getValue();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
171	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff);	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
172	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getRealPointValuePair();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[1].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[1].getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
173	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getRealPointValuePair();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0],  comparator.getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  ';'  expected	65	None	replace
174	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  n);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	91	None	replace
175	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(original,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(original,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(original,  n);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	91	None	replace
176	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(origin,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(origin,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(origin,  n);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	91	None	replace
177	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(n,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(n,  coeff);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	91	None	replace
178	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  +  1]  -  coeff,  comparator;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  +  1]  -  coeff,  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  +  1]  -  coeff,  comparator;	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
179	[BUG]  [BUGGY]  double[]  coeff  =  original[n  +  2];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  +  2];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    2];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
180	[BUG]  [BUGGY]  final  double[]  coeff  =  original[n  +  2];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[n  +  2];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    2];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
181	[BUG]  [BUGGY]  double[]  coeff  =  original[n  +  3];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  +  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  +  3];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    2];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
182	[BUG]  [BUGGY]  int  n  =  original[1].getPointRef().length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  original[1].getPointRef().length;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  original[1].getPointRef().length;	  int    n    =    original[1].getPointRef();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
183	[BUG]  [BUGGY]  int  n  =  original[1].getPointRef()  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  original[1].getPointRef()  +  1;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  original[1].getPointRef()  +  1;	  int    n    =    original[1].getPointRef();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	72	None	replace
184	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefFactory().coeff;	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	99	None	replace
185	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefFactory().translate(xSmallest,  n);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	99	None	replace
186	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	96	None	replace
187	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  *  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  *  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  *  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	96	None	replace
188	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(original,  n);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	88	None	replace
189	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(origin,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(origin,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(origin,  n);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	88	None	replace
190	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  /  1];  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[n  /  1];	  simplex    =    new    RealPointValuePair[n    /    1];    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
191	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
192	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  true);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
193	[BUG]  [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator,  n);	  RealPointValuePair    original    =    evaluateNewSimplex(original,    coeff,    comparator);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	79	None	replace
194	[BUG]  [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator,  xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator,  xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	RealPointValuePair  original  =  evaluateNewSimplex(original,  coeff,  comparator,  xSmallest);	  RealPointValuePair    original    =    evaluateNewSimplex(original,    coeff,    comparator);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	79	None	replace
195	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  *  1];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  *  1];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    xOriginal    =    original[n    *    1];    	non-compiled	[CE]  incompatible  types	34	None	replace
196	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  *  3];  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  *  3];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    xOriginal    =    original[n    *    1];    	non-compiled	[CE]  incompatible  types	34	None	replace
197	[BUG]  [BUGGY]  Double[]  xOriginal  =  original[n  *  1];  [CE]  incompatible  types  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  xOriginal  =  original[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  xOriginal  =  original[n  *  1];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    xOriginal    =    original[n    *    1];    	non-compiled	[CE]  incompatible  types	34	None	replace
198	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(original,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(original,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	71	None	replace
199	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  original);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  original);	  final    double[]    coeff    =    comparator.getCoeff(original);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	71	None	replace
200	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  find  symbol  Simplex  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    Simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  find  symbol  Simplex	16	None	replace
201	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  2];  [CE]  cannot  find  symbol  Simplex  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  +  2];	  simplex    =    new    RealPointValuePair[n    +    2];    Simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  find  symbol  Simplex	16	None	replace
202	[BUG]  [BUGGY]  n  =  new  RealPointValuePair[n  +  2];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  new  RealPointValuePair[n  +  2];	  simplex    =    new    RealPointValuePair[n    +    2];    Simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	16	None	replace
203	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  3];  [CE]  cannot  find  symbol  Simplex  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  +  3];	  simplex    =    new    RealPointValuePair[n    +    2];    Simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  find  symbol  Simplex	16	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];	  	compilable	  [FE]  AssertionError  	14	2	add
205	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];	  	compilable	  [FE]  AssertionError  	14	2	add
206	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];	  	compilable	  [FE]  AssertionError  	14	2	add
207	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];	  	compilable	  [FE]  AssertionError  	14	2	add
208	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];	  	compilable	  [FE]  AssertionError  	14	2	add
209	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];	  	compilable	  [FE]  AssertionError  	14	2	add
210	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  double[]  coeff  =  original[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  double[]  coeff  =  original[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    double[]  coeff  =  original[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	14	None	add
211	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  double[]  coeff  =  original[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  double[]  coeff  =  original[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    double[]  coeff  =  original[n  +  1];  simplex  =  new  RealPointValuePair[n  +  2];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	14	None	add
212	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  1);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  1);	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n    *    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	94	None	replace
213	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  2);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  2);	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n    *    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	94	None	replace
214	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  3);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  3);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  3);	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n    *    1);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	94	None	replace
215	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  final    double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	70	None	replace
216	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest);	  double[]    coeff    =    comparator.getCoeff(n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	82	None	replace
217	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  +  coeff,  comparator;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  +  coeff,  comparator;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef()  +  coeff,  comparator;	  final    double[]    xOriginal    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	64	None	replace
218	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  +  coeff,  comparator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  +  coeff,  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef()  +  coeff,  comparator);	  final    double[]    xOriginal    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  ';'  expected	64	None	replace
219	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  *  coeff;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  *  coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef()  *  coeff;	  final    double[]    xOriginal    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	64	None	replace
220	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[1].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[1].getCoef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[1].getCoef();	  final    double[]    coeff    =    comparator[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	11	None	replace
221	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef(),  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef(),  coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[0].getCoef(),  coeff;	  final    double[]    coeff    =    comparator[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	11	None	replace
222	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  comparator);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  comparator);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
223	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  null);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  null);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff,  null);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
224	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  coeff);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
225	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[1].getCoeff();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[1].getCoeff();	  double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	57	None	replace
226	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getPointRef(),  comparator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[1].getPointRef(),  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[1].getPointRef(),  comparator);	  double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  ';'  expected	57	None	replace
227	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(xSmallest,  coeff);	  double[]    coeff    =    comparator.getCoeff(coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	81	None	replace
228	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getCoef(),  comparator;	  final    double[]    coeff    =    original[1].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	12	None	replace
229	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  n;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  n;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  n;	  final    double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	24	None	replace
230	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  xSmallest;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  xSmallest;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  xSmallest;	  final    double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	24	None	replace
231	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeffs();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.getCoeffs();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.getCoeffs();	  double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	92	None	replace
232	[BUG]  [BUGGY]  double[]  coeff  =  original[1].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[1].getCoef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[1].getCoef();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	69	None	replace
233	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[oeff  +  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[oeff  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[oeff  +  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[simpleff    +    1];    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
234	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }	  simplex    =    new    RealPointValuePair[n    -    1];    simplex    =    new    RealPointValuePair[n    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
235	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }	  simplex    =    new    RealPointValuePair[n    -    1];    simplex    =    new    RealPointValuePair[n    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	50	4	replace
236	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {	  simplex    =    new    RealPointValuePair[n    -    1];    simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
237	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  return  evaluateNewSimplex(original[0],  coeff,  comparator);  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  return  evaluateNewSimplex(original[0],  coeff,  comparator);  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  return  evaluateNewSimplex(original[0],  coeff,  comparator);  }	  simplex    =    new    RealPointValuePair[n    -    1];    simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
238	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[n].getCoef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[n].getCoef();	  final    double[]    coeff    =    original[n].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	42	None	replace
239	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getPointValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[1].getPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[1].getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
240	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getPointValue();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0],  comparator.getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  ';'  expected	44	None	replace
241	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[0].getPointValue();  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  coeff[0].getPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  coeff[0].getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  array  required,  but  double  found	44	None	replace
242	[BUG]  [BUGGY]  int  n  =  original[0].getPointRef().length  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  original[0].getPointRef().length  +  1;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  original[0].getPointRef().length  +  1;	  int    n    =    original[0].getPointRef().length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	36	None	replace
243	[BUG]  [BUGGY]  int  n  =  original[0].getPointRef().length  -  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  int  n  =  original[0].getPointRef().length  -  1;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	int  n  =  original[0].getPointRef().length  -  1;	  int    n    =    original[0].getPointRef().length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	36	None	replace
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex    =    new    RealPointValuePair[n    *    2];    simplex  =  new  RealPointValuePair[n  *  2];	  	compilable	  [FE]  AssertionError  	1	2	add
245	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    simplex  =  new  RealPointValuePair[n  *  2];	  	compilable	  [FE]  AssertionError  	1	2	add
246	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  Simplex  =  new  RealPointValuePair[n  *  2];  [CE]  cannot  find  symbol  Simplex  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  Simplex  =  new  RealPointValuePair[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    Simplex  =  new  RealPointValuePair[n  *  2];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	1	None	add
247	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  original[n  *  2];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  original[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    double[]  coeff  =  original[n  *  2];	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	add
248	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  xOriginal  =  original[n  *  2];  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  xOriginal  =  original[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    double[]  xOriginal  =  original[n  *  2];	  	non-compiled	[CE]  incompatible  types	1	None	add
249	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2)];  [CE]  ']'  expected  [FE]            NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2)];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    simplex  =  new  RealPointValuePair[n  *  2)];	  	non-compiled	[CE]  ']'  expected	1	None	add
250	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[xSmallest.length  +  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[xSmallest.length  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[xSmallest.length  +  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[c    +    1];    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
251	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[xSmallest  +  1];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[xSmallest  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[xSmallest  +  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[c    +    1];    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
252	[BUG]  [BUGGY]  n  =  n  -  1;  double[]  coeff  =  comparator.getCoeff();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  -  1;  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  -  1;  double[]  coeff  =  comparator.getCoeff();	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	54	None	replace
253	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.evaluate(xSmallest,  n,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
254	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  true);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
255	[BUG]  [BUGGY]  double  n  =  original[0].getPointRef()  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double  n  =  original[0].getPointRef()  +  1;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double  n  =  original[0].getPointRef()  +  1;	  int    n    =    original[0].getPointRef()    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	37	None	replace
256	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(xSmallest,  coeff);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(xSmallest,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(xSmallest,  coeff);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
257	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(xSmallest,  coeff,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(xSmallest,  coeff,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(xSmallest,  coeff,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
258	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(coeff,  n);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(coeff,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1];  double[]  original  =  comparator.getValue(coeff,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
259	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	95	None	replace
260	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  else  {  [CE]  reached  end  of  file  while  parsing  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  else  {  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  else  {	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
261	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  else  {  for(int  i  =  0;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  else  {  for(int  i  =  0;  i  <  n;  ++i)  {  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  }  else  {  for(int  i  =  0;  i  <  n;  ++i)  {	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
262	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[0].getCoef(coeff);	  final    double[]    coeff    =    comparator[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	11	None	replace
263	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];	  	compilable	  [FE]  AssertionError  	30	2	add
264	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  2];  simplex  =  new  RealPointValuePair[n  *  2];	  	compilable	  [FE]  AssertionError  	30	2	add
265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[0];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[0];  simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
266	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[0];  simplex  =  new  RealPointValuePair[n  *  1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[0];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[0];  simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
267	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  original);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  original);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
268	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  xSmallest.length);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  xSmallest.length);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  xSmallest.length);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
269	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[0].getCoefF();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[0].getCoefF();	  final    double[]    coeff    =    original[0].getCoefF();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	89	None	replace
270	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	91	None	replace
271	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[2];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[2];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[0];    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
272	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
273	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
274	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN,  false);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN,  false);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  Double.NaN,  false);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    false);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	compilable	  [FE]  AssertionError  	15	3	replace
276	[BUG]  [BUGGY]  if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	compilable	  [FE]  AssertionError  	15	3	replace
277	[BUG]  [BUGGY]  SimplePointValuePair  original  =  new  SimplePointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  original  =  new  SimplePointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  original  =  new  SimplePointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
278	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoefFactory();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoefFactory();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
279	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoef(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoef(coeff);	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
280	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoef(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoef(n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoef(n);	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
281	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(original);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefFactory(original);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	99	None	replace
282	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefFactory(n);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	99	None	replace
283	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  if(n  >  0)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(original[0],  coeff);  e.printStackTrace();  }  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(RealPointValuePair,double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  if(n  >  0)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(original[0],  coeff);  e.printStackTrace();  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    if(n  >  0)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(original[0],  coeff);  e.printStackTrace();  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(RealPointValuePair,double)	5	None	add
284	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  if(n  >  0)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(original[0],  coeff);  for(int  j  =  0;  j  <  n;  ++j)  {  simplex[  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  if(n  >  0)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(original[0],  coeff);  for(int  j  =  0;  j  <  n;  ++j)  {  simplex[  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    if(n  >  0)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(original[0],  coeff);  for(int  j  =  0;  j  <  n;  ++j)  {  simplex[	  	non-compiled	[CE]  ']'  expected	5	None	add
285	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getPointValuePair();	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	56	None	replace
286	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  *  n  +  1]  -  n;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  *  n  +  1]  -  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  *  n  +  1]  -  n;	  simplex    =    new    RealPointValuePair[coeff    +    1]    -    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
287	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  /  1]  -  n;  [CE]  possible  loss  of  precision  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  /  1]  -  n;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  /  1]  -  n;	  simplex    =    new    RealPointValuePair[coeff    +    1]    -    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];	  	compilable	  [FE]  AssertionError  	14	2	add
289	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];	  	compilable	  [FE]  AssertionError  	14	2	add
290	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  find  symbol  Simplex  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];	  	non-compiled	[CE]  cannot  find  symbol  Simplex	14	None	add
291	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  -  1];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[coeff  -  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[coeff    +    1];    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
292	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getCoef()  /  comparator;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getCoef()  /  comparator;	  final    double[]    coeff    =    original[1].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	12	None	replace
293	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getCoefFactory();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getCoefFactory();	  final    double[]    coeff    =    original[0].getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	86	None	replace
294	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  -  1]  +  coeff;  [CE]  cannot  find  symbol  Simplex  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  -  1]  +  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  -  1]  +  coeff;	  simplex    =    new    RealPointValuePair[n    -    1]    +    coeff;    	non-compiled	[CE]  cannot  find  symbol  Simplex	59	None	replace
295	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  xOriginal  =  original[n  -  1]  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  xOriginal  =  original[n  -  1]  +  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1];  double[]  xOriginal  =  original[n  -  1]  +  coeff;	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    xOriginal    =    original[n    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
296	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  xOriginal  =  original[n  -  1]  *  coeff;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double[]  xOriginal  =  original[n  -  1]  *  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1];  double[]  xOriginal  =  original[n  -  1]  *  coeff;	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    xOriginal    =    original[n    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	53	None	replace
297	[BUG]  [BUGGY]  n  =  n  *  1;  double[]  coeff  =  comparator.getCoeff();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  *  1;  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  *  1;  double[]  coeff  =  comparator.getCoeff();	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	35	None	replace
298	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  /  coeff;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef()  /  coeff;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef()  /  coeff;	  final    double[]    xOriginal    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	64	None	replace
299	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[simpleff  *  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[simpleff  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[simpleff  *  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[simpleff    +    1];    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
300	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  -  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  -  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  -  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
301	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  2);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  2);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
302	[BUG]  [BUGGY]  double[]  coeff  =  original[n  +  0];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  +  0];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  +  0];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    2];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];	  	compilable	  [FE]  AssertionError  	49	2	add
304	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];	  	compilable	  [FE]  AssertionError  	49	2	add
305	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[0].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[0].getPointRef();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    double[]  coeff  =  original[0].getPointRef();	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	add
306	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator;	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator;    	non-compiled	[CE]  ';'  expected	7	None	replace
307	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[0]  -  coeff,  comparator;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[0]  -  coeff,  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[0]  -  coeff,  comparator;	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator;    	non-compiled	[CE]  ';'  expected	7	None	replace
308	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  -  n,  comparator;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  -  n,  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  +  1]  -  n,  comparator;	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator;    	non-compiled	[CE]  ';'  expected	7	None	replace
309	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double  n  =  original[n  -  1]  +  coeff;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1];  double  n  =  original[n  -  1]  +  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1];  double  n  =  original[n  -  1]  +  coeff;	  simplex    =    new    RealPointValuePair[n    -    1];    double    n    =    original[n    -    1];    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	77	None	replace
310	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff;  double  n  =  original[n  -  1];  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff;  double  n  =  original[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1]  +  coeff;  double  n  =  original[n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double    n    =    original[n    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	77	None	replace
311	[BUG]  [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
312	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[0]  -  coeff,  comparator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[0]  -  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[0]  -  coeff,  comparator);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
313	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  -  n,  comparator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[coeff  +  1]  -  n,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[coeff  +  1]  -  n,  comparator);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
314	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[original.length  +  1];  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[original.length  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[original.length  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
315	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[simpleff  +  1];  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[simpleff  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[simpleff  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
316	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  n  +  1);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	88	None	replace
317	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[0].getRealPointValuePair();  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  coeff[0].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  coeff[0].getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  array  required,  but  double  found	65	None	replace
318	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[0].getRealPointValue();  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  coeff[0].getRealPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  coeff[0].getRealPointValue();	  final    double[]    xOriginal    =    original[0].getRealPointValue();    	non-compiled	[CE]  array  required,  but  double  found	45	None	replace
319	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[c  -  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[c  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[c  -  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
320	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[len  -  1];  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[len  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[len  -  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
321	[BUG]  [BUGGY]  double[]  coeff  =  initial[n  +  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  initial[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  initial[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
322	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[coeff  +  1];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[coeff  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[coeff  +  1];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
323	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[original.length  +  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[original.length  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[original.length  +  1];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
324	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[0  +  1];  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[0  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[0  +  1];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
325	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.getCoeff(coeff);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
326	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getValueFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getValueFactory();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getValueFactory();	          final    double[]    coeff    =    xSmallest.getValue();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
327	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getValue(n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getValue(n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getValue(n);	          final    double[]    coeff    =    xSmallest.getValue();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	61	None	replace
328	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  1],  coeff,  comparator);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  1],  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[original.length  +  1],  coeff,  comparator);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[original.length    +    1];    	non-compiled	[CE]  ';'  expected	75	None	replace
329	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  }  [CE]  cannot  find  symbol  Simplex  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  Simplex  =  new  RealPointValuePair[n  -  1];  }	  simplex    =    new    RealPointValuePair[n    -    1];    Simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol  Simplex	51	None	replace
330	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  find  symbol  Simplex  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    Simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  find  symbol  Simplex	16	None	replace
331	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  double[]  original  =  comparator.equals(xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  double[]  original  =  comparator.equals(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1];  double[]  original  =  comparator.equals(xSmallest);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	73	None	replace
332	[BUG]  [BUGGY]  double[]  original  =  comparator.equals(xSmallest,  coeff);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  original  =  comparator.equals(xSmallest,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  original  =  comparator.equals(xSmallest,  coeff);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	73	None	replace
333	[BUG]  [BUGGY]  double[]  coeff  =  comparator[0].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator[0].getCoef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator[0].getCoef();	  double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	68	None	replace
334	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  original);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  original);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  original);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	96	None	replace
335	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  n  +  1,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  null,  n  +  1,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  null,  n  +  1,  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	96	None	replace
336	[BUG]  [BUGGY]  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }	  simplex    =    new    RealPointValuePair[n    -    1];    simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
337	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  return  evaluateNewSimplex(xSmallest,  Double.NaN,  false);  }  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  return  evaluateNewSimplex(xSmallest,  Double.NaN,  false);  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  return  evaluateNewSimplex(xSmallest,  Double.NaN,  false);  }	  simplex    =    new    RealPointValuePair[n    -    1];    simplex    =    new    RealPointValuePair[n    -    1];    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
338	[BUG]  [BUGGY]  final  int  n  =  coeff.length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  int  n  =  coeff.length;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  int  n  =  coeff.length;	  final    int    n    =    xSmallest.length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	60	None	replace
339	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  original  =  comparator.equals(xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  original  =  comparator.equals(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  *  2];  double[]  original  =  comparator.equals(xSmallest);	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	66	None	replace
340	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  original  =  comparator.equals(xSmallest,  coeff);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  original  =  comparator.equals(xSmallest,  coeff);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  *  2];  double[]  original  =  comparator.equals(xSmallest,  coeff);	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    original    =    comparator.equals(xSmallest);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	66	None	replace
341	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoef(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoef(coeff);	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	41	None	replace
342	[BUG]  [BUGGY]  n  =  n  +  2;  double[]  coeff  =  comparator.getCoeff();  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  n  +  2;  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  n  +  2;  double[]  coeff  =  comparator.getCoeff();	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	74	None	replace
343	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	98	None	replace
344	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  double[]  xOriginal  =  original[n  +  1];  [CE]  incompatible  types  [FE]              NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  +  1];  double[]  xOriginal  =  original[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  +  1];  double[]  xOriginal  =  original[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    xOriginal    =    original[n    +    2];    	non-compiled	[CE]  incompatible  types	18	None	replace
345	[BUG]  [BUGGY]  Double[]  xOriginal  =  original[n  +  2];  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  xOriginal  =  original[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  xOriginal  =  original[n  +  2];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    xOriginal    =    original[n    +    2];    	non-compiled	[CE]  incompatible  types	18	None	replace
346	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
347	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  else  {  for(int  i  =  0,  n  =  0;  i  <  n;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  else  {  for(int  i  =  0,  n  =  0;  i  <  n;  ++i)  {  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  else  {  for(int  i  =  0,  n  =  0;  i  <  n;  ++i)  {	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
348	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  else  {  return  evaluateNewSimplex(original,  Double.NaN,  false);  }  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  else  {  return  evaluateNewSimplex(original,  Double.NaN,  false);  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  double[]  coeff  =  original[n  -  1];  }  else  {  return  evaluateNewSimplex(original,  Double.NaN,  false);  }	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
349	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  comparator.getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    double[]  coeff  =  comparator.getCoeff();	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	add
350	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  true);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
351	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef().toArray(new  double[original.length]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef().toArray(new  double[original.length]);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef().toArray(new  double[original.length]);	  final    double[]    xOriginal    =    original[0].getPointRef().clone();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
352	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  0,  n  +  1]);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  0,  n  +  1]);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  0,  n  +  1]);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair(xSmallest,    n    +    1]);    	non-compiled	[CE]  ')'  expected	102	None	replace
353	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex    =    new    RealPointValuePair[n    *    3];    simplex  =  new  RealPointValuePair[n  *  4];	  	compilable	  [FE]  AssertionError  	3	2	add
354	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  simplex  =  new  RealPointValuePair[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    simplex  =  new  RealPointValuePair[n  *  4];	  	compilable	  [FE]  AssertionError  	3	2	add
355	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  original  =  comparator.equals(xSmallest);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  original  =  comparator.equals(xSmallest);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    double[]  original  =  comparator.equals(xSmallest);	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	add
356	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n));  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n));  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n));	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  ';'  expected	98	None	replace
357	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex  =  new  RealPointValuePair[n  /  3];	  simplex    =    new    RealPointValuePair[n    *    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
358	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  /  3];	  simplex    =    new    RealPointValuePair[n    *    3];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	4	replace
359	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  0);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  0);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  0);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
360	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
361	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n,  xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n,  xSmallest);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    coeff);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
362	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeffs(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeffs(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeffs(coeff);	  double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	92	None	replace
363	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[0].getCoeff(coeff);	  final    double[]    coeff    =    comparator[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	40	None	replace
364	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
365	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  simplex  =  new  RealPointValuePair[n  +  2];  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
366	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  double[]  coeff  =  comparator.getCoeff();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    +    2];    simplex  =  new  RealPointValuePair[n  +  2];  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        +        2];        simplex    =    new    RealPointValuePair[n    +    2];    if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  double[]  coeff  =  comparator.getCoeff();	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
367	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  -  1];  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  -  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[n    -    1];    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
368	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  -  1]);  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  -  1]);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  -  1]);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[n    -    1];    	non-compiled	[CE]  ')'  expected	58	None	replace
369	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getPointRef(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getPointRef(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getPointRef(coeff);	  double[]    coeff    =    comparator.getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	56	None	replace
370	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator,  xSmallest);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator,  xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator,  xSmallest);	  final    double[]    coeff    =    original[0].getCoef(),    comparator);    	non-compiled	[CE]  ';'  expected	13	None	replace
371	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef(),  comparator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[1].getPointRef(),  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[1].getPointRef(),  comparator);	  final    double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  ';'  expected	21	None	replace
372	[BUG]  [BUGGY]  double[]  coeff  =  new  double[n  +  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  new  double[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  new  double[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
373	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  2);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  2);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  2);	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	add
374	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    2];    double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	1	None	add
375	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[xSmallest.length  +  1];  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[xSmallest.length  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[xSmallest.length  +  1];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
376	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  +  2];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  +  2];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  SimplePointValuePair[n  +  2];	  SimplePointValuePair    originalx    =    new    SimplePointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
377	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  true);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  true);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  true);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n,    true);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	28	None	replace
378	[BUG]  [BUGGY]  double[]  coeff  =  comparator[1].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator[1].getPointRef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator[1].getPointRef();	  double[]    coeff    =    original[1].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	57	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }	  	compilable	  [FE]  AssertionError  	49	2	add
380	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }	  	compilable	  [FE]  AssertionError  	49	2	add
381	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  for(int  i  =  0;  i  <  =  n;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    -    1];    simplex  =  new  RealPointValuePair[n  -  1];  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  for(int  i  =  0;  i  <  =  n;  ++i)  {  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        -        1];        simplex    =    new    RealPointValuePair[n    -    1];    if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  -  1];  simplex  =  new  RealPointValuePair[n  -  1];  }  else  {  for(int  i  =  0;  i  <  =  n;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
382	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	compilable	  [FE]  AssertionError  	15	2	replace
383	[BUG]  [BUGGY]  if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  <  2)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	compilable	  [FE]  AssertionError  	15	2	replace
384	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	compilable	  [FE]  NullPointerException  	15	4	replace
385	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [FE]  NullPointerException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  +  2];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	compilable	  [FE]  NullPointerException  	15	4	replace
386	[BUG]  [BUGGY]  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  <  =  0)  {  simplex  =  new  RealPointValuePair[n  +  1];  }  else  {  simplex  =  new  RealPointValuePair[n  +  1];  }	  simplex    =    new    RealPointValuePair[n    +    2];    simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
387	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFraction();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefFraction();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefFraction();	  final    double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	41	None	replace
388	[BUG]  [BUGGY]  final  double[]  original  =  original[0].getRealPointValuePair();  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  original  =  original[0].getRealPointValuePair();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  original  =  original[0].getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	65	None	replace
389	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory().comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory().comparator;  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoefFactory().comparator;	  final    double[]    coeff    =    original[0].getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	86	None	replace
390	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  3;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  int  n  =  xSmallest.length  -  3;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  int  n  =  xSmallest.length  -  3;	  final    int    n    =    xSmallest.length;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	60	None	replace
391	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex  =  new  RealPointValuePair[n  *  2  +  1];	  simplex    =    new    RealPointValuePair[n    *    2];    	compilable	  [FE]  NullPointerException  	2	4	replace
392	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2  +  1];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  2  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  *  2  +  1];	  simplex    =    new    RealPointValuePair[n    *    2];    	compilable	  [FE]  NullPointerException  	2	4	replace
393	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  0,  n  +  1,  n);	  double[]    coeff    =    comparator.evaluate(xSmallest,    0,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	84	None	replace
394	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[xSmallest  +  1]  -  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[xSmallest  +  1]  -  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[xSmallest  +  1]  -  coeff;	  simplex    =    new    RealPointValuePair[str    +    1]    -    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
395	[BUG]  [BUGGY]  double[]  xOriginal  =  original[n  *  4];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  xOriginal  =  original[n  *  4];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  xOriginal  =  original[n  *  4];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    xOriginal    =    original[n    *    1];    	non-compiled	[CE]  incompatible  types	34	None	replace
396	[BUG]  [BUGGY]  double[]  coeff  =  original[n  +  n];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  +  n];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  +  n];	  simplex    =    new    RealPointValuePair[n    +    2];    double[]    coeff    =    original[n    +    2];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
397	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoefFactory(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoefFactory(coeff);	  final    double[]    coeff    =    comparator.getCoefFactory();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	99	None	replace
398	[BUG]  [BUGGY]  final  double[]  original  =  original[0].getPointValue();  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  original  =  original[0].getPointValue();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  original  =  original[0].getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
399	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest,  n);	  double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	91	None	replace
400	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  *  1]);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  *  1]);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  *  1]);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair(xSmallest,    n    +    1]);    	non-compiled	[CE]  ')'  expected	102	None	replace
401	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  2]);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  2]);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  n  +  2]);	  SimplePointValuePair    simplex    =    new    SimplePointValuePair(xSmallest,    n    +    1]);    	non-compiled	[CE]  ')'  expected	102	None	replace
402	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(),  coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(),  coeff);	  final    double[]    coeff    =    comparator.getCoeff(),    coeff;    	non-compiled	[CE]  ';'  expected	24	None	replace
403	[BUG]  [BUGGY]  double[]  coeff  =  comparator.getCoefFraction();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.getCoefFraction();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.getCoefFraction();	  double[]    coeff    =    comparator.getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	83	None	replace
404	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[n].getPoint();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator[n].getPoint();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator[n].getPoint();	  final    double[]    coeff    =    comparator[n].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	85	None	replace
405	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  3);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  3);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    double[]  coeff  =  comparator.evaluate(xSmallest,  n  *  3);	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	add
406	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      NullPointerException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  *  3];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    *    3];    double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	3	None	add
407	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[n  +  1]  -  coeff,  comparator);	  simplex    =    new    RealPointValuePair[n    +    1]    -    coeff,    comparator);    	non-compiled	[CE]  ';'  expected	9	None	replace
408	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[0].getCoefFactory();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[0].getCoefFactory();	  double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	69	None	replace
409	[BUG]  [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  Double[]  coeff  =  comparator.getCoeff(coeff,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	Double[]  coeff  =  comparator.getCoeff(coeff,  n);	  Double[]    coeff    =    comparator.getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	62	None	replace
410	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff  *  comparator;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  -  1]  +  coeff  *  comparator;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex  =  new  RealPointValuePair[n  -  1]  +  coeff  *  comparator;	  simplex    =    new    RealPointValuePair[n    -    1]    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	59	None	replace
411	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double  j  =  new  RealPointValuePair[n  /  1];  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double  j  =  new  RealPointValuePair[n  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    double  j  =  new  RealPointValuePair[n  /  1];	  	non-compiled	[CE]  incompatible  types	5	None	add
412	[BUG]  [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double[]  coeff  =  comparator.getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex  =  new  RealPointValuePair[n  /  1];  double[]  coeff  =  comparator.getCoeff();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex    =    new    RealPointValuePair[n    /    1];    double[]  coeff  =  comparator.getCoeff();	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	5	None	add
413	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest,  n);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest,  n);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	88	None	replace
414	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeff(coeff,  xSmallest);	  final    double[]    coeff    =    comparator.getCoeff(coeff,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	88	None	replace
415	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[simpleff  /  1];  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair[simpleff  /  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair[simpleff  /  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[simpleff    +    1];    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
416	[BUG]  [BUGGY]  double  n  =  coeff[0].getPointRef();  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double  n  =  coeff[0].getPointRef();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double  n  =  coeff[0].getPointRef();	  int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	38	None	replace
417	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  +  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  +  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  +  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	96	None	replace
418	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  -  1);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  -  1);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n  +  1,  n  -  1);	  double[]    coeff    =    comparator.evaluate(xSmallest,    n    +    1,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	96	None	replace
419	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(),  comparator,  xSmallest);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(),  comparator,  xSmallest);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  original[0].getCoeff(),  comparator,  xSmallest);	  final    double[]    coeff    =    original[0].getCoeff(),    comparator);    	non-compiled	[CE]  ';'  expected	90	None	replace
420	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[str  +  1];  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[str  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[str  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
421	[BUG]  [BUGGY]  SimplePointValuePair  originalx  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  originalx  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  originalx  =  new  RealPointValuePair[n  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
422	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[0  +  1];  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  RealPointValuePair[0  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  RealPointValuePair[0  +  1];	  SimplePointValuePair    simplex    =    new    RealPointValuePair[n    +    1];    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
423	[BUG]  [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n).doubleValue();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  comparator.evaluate(xSmallest,  n).doubleValue();  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  comparator.evaluate(xSmallest,  n).doubleValue();	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    comparator.evaluate(xSmallest,    n);    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	95	None	replace
424	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoeff(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[0].getCoeff(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[0].getCoeff(coeff);	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	55	None	replace
425	[BUG]  [BUGGY]  double[]  coeff  =  original[0].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[0].getCoefF();  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[0].getCoefF();	  double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	55	None	replace
426	[BUG]  [BUGGY]  double[]  coeff  =  original[n  -  1]  +  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  -  1]  +  coeff;  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  -  1]  +  coeff;	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
427	[BUG]  [BUGGY]  double[]  coeff  =  original[n  *  n  -  1];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  *  n  -  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  *  n  -  1];	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    coeff    =    original[n    -    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	52	None	replace
428	[BUG]  [BUGGY]  n  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          NullPointerException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  n  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	n  =  new  RealPointValuePair[n  +  1];  Simplex  =  new  RealPointValuePair[n  +  1];	  simplex    =    new    RealPointValuePair[n    +    2];    Simplex    =    new    RealPointValuePair[n    +    2];    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	16	None	replace
429	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValue(coeff);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValue(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getRealPointValue(coeff);	  final    double[]    xOriginal    =    original[0].getRealPointValue();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
430	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  *  1];  }  else  {  simplex  =  new  RealPointValuePair[n  *  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  *  1];  }  else  {  simplex  =  new  RealPointValuePair[n  *  1];  }	  simplex    =    new    RealPointValuePair[n    *    1];    simplex    =    new    RealPointValuePair[n    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	4	replace
431	[BUG]  [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  *  1];  }  else  {  simplex  =  new  RealPointValuePair[n  *  1];  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  *  1];  }  else  {  simplex  =  new  RealPointValuePair[n  *  1];  }  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	if(n  >  0)  {  simplex  =  new  RealPointValuePair[n  *  1];  }  else  {  simplex  =  new  RealPointValuePair[n  *  1];  }	  simplex    =    new    RealPointValuePair[n    *    1];    simplex    =    new    RealPointValuePair[n    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	4	replace
432	[BUG]  [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  original  +  1];  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  original  +  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	SimplePointValuePair  simplex  =  new  SimplePointValuePair(xSmallest,  original  +  1];	  SimplePointValuePair    simplex    =    new    SimplePointValuePair[str    +    1];    	non-compiled	[CE]  ')'  expected	103	None	replace
433	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	add	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
434	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  simplex  =  new  RealPointValuePair[n  *  1];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];	  	compilable	  [FE]  AssertionError  	30	2	add
435	[BUG]  [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  simplex    =    new    RealPointValuePair[n    *    1];    simplex  =  new  RealPointValuePair[n  *  1];  double[]  coeff  =  comparator.evaluate(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	simplex        =        new        RealPointValuePair[n        *        1];        simplex    =    new    RealPointValuePair[n    *    1];    double[]  coeff  =  comparator.evaluate(xSmallest,  n);	  	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	30	None	add
436	[BUG]  [BUGGY]  double[]  initial  =  comparator.getValue(xSmallest,  n);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  initial  =  comparator.getValue(xSmallest,  n);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  initial  =  comparator.getValue(xSmallest,  n);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
437	[BUG]  [BUGGY]  double[]  original  =  comparator.getValue(xSmallest,  null);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  original  =  comparator.getValue(xSmallest,  null);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  original  =  comparator.getValue(xSmallest,  null);	  simplex    =    new    RealPointValuePair[n    -    1];    double[]    original    =    comparator.getValue(xSmallest,    n);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	78	None	replace
438	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef().translate(coeff,  comparator);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef().translate(coeff,  comparator);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef().translate(coeff,  comparator);	  final    double[]    xOriginal    =    original[0].getPointRef().clone();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
439	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef().toArray(new  double[0]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  xOriginal  =  original[0].getPointRef().toArray(new  double[0]);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  xOriginal  =  original[0].getPointRef().toArray(new  double[0]);	  final    double[]    xOriginal    =    original[0].getPointRef().clone();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
440	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  final  double[]  coeff  =  comparator.getCoeffs(coeff);  [BUGGY]      simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	final  double[]  coeff  =  comparator.getCoeffs(coeff);	  final    double[]    coeff    =    comparator.getCoeffs();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	23	None	replace
441	[BUG]  [BUGGY]  double[]  coeff  =  original[n  *  n];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  *  n];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  *  n];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    original[n    *    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	33	None	replace
442	[BUG]  [BUGGY]  double[]  coeff  =  original[n  *  3];  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  double[]  coeff  =  original[n  *  3];  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	double[]  coeff  =  original[n  *  3];	  simplex    =    new    RealPointValuePair[n    *    1];    double[]    coeff    =    original[n    *    1];    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	33	None	replace
443	[BUG]  [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(coeff,  xSmallest,  comparator);  [CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();  final  int  n  =  xSmallest.length;        [BUGGY]  RealPointValuePair  original  =  evaluateNewSimplex(coeff,  xSmallest,  comparator);  [BUGGY]      simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  simplex[i]  =  new  RealPointValuePair(xTransformed,  Double.NaN,  false);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	119	119	2	replace	RealPointValuePair  original  =  evaluateNewSimplex(coeff,  xSmallest,  comparator);	  RealPointValuePair    original    =    evaluateNewSimplex(xSmallest,    coeff,    comparator);    	non-compiled	[CE]  variable  original  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	80	None	replace
