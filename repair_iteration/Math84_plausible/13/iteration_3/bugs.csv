bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator[0].getRealPointValuePair();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator[0].getRealPointValuePair();	  final    double[]    coeff    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	24	None	replace
2	[BUG]  [BUGGY]  double[]  xSmallest  =  original[1].getPoint();  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  double[]  xSmallest  =  original[1].getPoint();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	double[]  xSmallest  =  original[1].getPoint();	  double[]    xSmallest    =    original[0].getPoint();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
3	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator[0].getCoeff();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator[0].getCoeff();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
4	[BUG]  [BUGGY]  final  int  n  =  coeff.length  +  2;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff.length  +  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff.length  +  2;	  final    int    n    =    coeff.length    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
5	[BUG]  [BUGGY]  final  double  n  =  coeff.length  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff.length  +  1;	  final    int    n    =    coeff.length    +    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
6	[BUG]  [BUGGY]  final  int  n  =  coeff,  xSmallest.length  +  1;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff,  xSmallest.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff,  xSmallest.length  +  1;	  final    int    n    =    coeff.length    +    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
7	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getPointValue();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getPointValue();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[0],  comparator.getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  ';'  expected	14	None	replace
8	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[0].getPointValue();  [CE]  array  required,  but  double  found  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  coeff[0].getPointValue();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  coeff[0].getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  array  required,  but  double  found	14	None	replace
9	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getPointValue();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[1].getPointValue();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[1].getPointValue();	  final    double[]    xOriginal    =    original[0].getPointValue();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
10	[BUG]  [BUGGY]  final  double  n  =  coeff;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff;	  final    double    n    =    coeff.length;    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
11	[BUG]  [BUGGY]  final  double  n  =  coeff,  comparator.length;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff,  comparator.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff,  comparator.length;	  final    double    n    =    coeff.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator[0].getCoef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator[0].getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
13	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getCoef(),  comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getCoef(),  comparator);	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  ';'  expected	44	None	replace
14	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff(),  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoeff(),  comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoeff(),  comparator);	  final    double[]    coeff    =    original[1].getCoeff();    	non-compiled	[CE]  ';'  expected	17	None	replace
15	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getValue();  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[0].getValue();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[0].getValue();	  final    double[]    xSmallest    =    original[0].getPointValue();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	9	None	replace
16	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair(comparator);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair(comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getRealPointValuePair(comparator);	  final    double[]    coeff    =    original[1].getRealPointValuePair();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
17	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[1].getPointRef();  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  coeff[1].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  coeff[1].getPointRef();	  final    double[]    xOriginal    =    original[1].getPointRef();    	non-compiled	[CE]  array  required,  but  double  found	12	None	replace
18	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[2].getPointRef();  [CE]  cannot  find  symbol  n  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[2].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[2].getPointRef();	  final    double[]    xOriginal    =    original[1].getPointRef();    	non-compiled	[CE]  cannot  find  symbol  n	12	None	replace
19	[BUG]  [BUGGY]  final  int  n  =  coeff.length  /  1;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff.length  /  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff.length  /  1;	  final    int    n    =    coeff.length    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
20	[BUG]  [BUGGY]  final  double  n  =  coeff.length  -  1;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff.length  -  1;	  final    int    n    =    coeff.length    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
21	[BUG]  [BUGGY]  final  int  n  =  coeff.length  -  1  +  1;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff.length  -  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff.length  -  1  +  1;	  final    int    n    =    coeff.length    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
22	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPoint()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPoint()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPoint()  +  coeff;	  final    double[]    xSmallest    =    original[1].getPoint();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	10	None	replace
23	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  1;  final  int  n  =  xSmallest.length  /  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1;  final  int  n  =  xSmallest.length  /  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    1;    final  int  n  =  xSmallest.length  /  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	32	None	add
24	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  1;  final  int  n  =  xSmallest.length  /  2;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1;  final  int  n  =  xSmallest.length  /  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    1;    final  int  n  =  xSmallest.length  /  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	32	None	add
25	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  1;  final  int  n  =  xSmallest.length  /  3;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1;  final  int  n  =  xSmallest.length  /  3;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    1;    final  int  n  =  xSmallest.length  /  3;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	32	None	add
26	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  1;  int  n  =  xSmallest.length  /  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1;  int  n  =  xSmallest.length  /  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    1;    int  n  =  xSmallest.length  /  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	32	None	add
27	[BUG]  [BUGGY]  Final  int  n  =  xSmallest.length  -  1;  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  Final  int  n  =  xSmallest.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	Final  int  n  =  xSmallest.length  -  1;	  final    int    n    =    xSmallest.length    -    1;    Final    int    n    =    xSmallest.length    -    1;    	non-compiled	[CE]  not  a  statement	29	None	replace
28	[BUG]  [BUGGY]  final  double  n  =  original[0].getPointRef().length;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  original[0].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  original[0].getPointRef().length;	  final    double    n    =    original[0].getPointRef();    	non-compiled	[CE]  possible  loss  of  precision	1	None	replace
29	[BUG]  [BUGGY]  final  double  n  =  original[0].getPointRef()  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  original[0].getPointRef()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  original[0].getPointRef()  +  coeff;	  final    double    n    =    original[0].getPointRef();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
30	[BUG]  [BUGGY]  final  double  n  =  original[0].getPointRef()  -  coeff;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  original[0].getPointRef()  -  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  original[0].getPointRef()  -  coeff;	  final    double    n    =    original[0].getPointRef();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	1	None	replace
31	[BUG]  [BUGGY]  final  int  n  =  coeff[0].getPointRef()  +  original;  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff[0].getPointRef()  +  original;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff[0].getPointRef()  +  original;	  final    int    n    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  array  required,  but  double  found	53	None	replace
32	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef()  +  coeff,  comparator;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef()  +  coeff,  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[0].getPointRef()  +  coeff,  comparator;	  final    int    n    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
33	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef()  +  coeff.length;  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef()  +  coeff.length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[0].getPointRef()  +  coeff.length;	  final    int    n    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  double  cannot  be  dereferenced	53	None	replace
34	[BUG]  [BUGGY]  double[]  xSmallest  =  original[1].getPointValue();  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  double[]  xSmallest  =  original[1].getPointValue();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	double[]  xSmallest  =  original[1].getPointValue();	  double[]    xSmallest    =    original[0].getPointValue();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	55	None	replace
35	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length  +  1;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  original[0].getPointRef().length  +  1;	  final    int    n    =    original[0].getPointRef().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	replace
36	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length  +  1;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[0].getPointRef().length  +  1;	  final    int    n    =    original[0].getPointRef().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	replace
37	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length  -  1;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  original[0].getPointRef().length  -  1;	  final    int    n    =    original[0].getPointRef().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	replace
38	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length  -  1;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[0].getPointRef().length  -  1;	  final    int    n    =    original[0].getPointRef().length;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	4	replace
39	[BUG]  [BUGGY]  final  int  n  =  original[0].getRef().length;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[0].getRef().length;	  final    int    n    =    original[0].getPointRef().length;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
40	[BUG]  [BUGGY]  final  double[]  coeff  =  xSmallest[0].getCoeff();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  xSmallest[0].getCoeff();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  xSmallest[0].getCoeff();	  final    double[]    coeff    =    xSmallest[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
41	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  /  1;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  /  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  /  1;	  final    int    n    =    xSmallest.length    /    1;    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
42	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[0].getPoint();  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  coeff[0].getPoint();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  coeff[0].getPoint();	  final    double[]    xOriginal    =    original[0].getPoint();    	non-compiled	[CE]  array  required,  but  double  found	51	None	replace
43	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getPoint();  [CE]  cannot  find  symbol  n  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[1].getPoint();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[1].getPoint();	  final    double[]    xOriginal    =    original[0].getPoint();    	non-compiled	[CE]  cannot  find  symbol  n	51	None	replace
44	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  -  2;  [CE]  possible  loss  of  precision  [FE]              OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  -  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  -  2;	  final    int    n    =    xSmallest.length    -    2;    final    int    n    =    xSmallest.length    -    1;    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
45	[BUG]  [BUGGY]  final  int  n  =  coeff,  comparator.length  -  1;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff,  comparator.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff,  comparator.length  -  1;	  final    int    n    =    coeff,    comparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
46	[BUG]  [BUGGY]  final  int  n  =  coeff,  comparator.length  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff,  comparator.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff,  comparator.length  +  1;	  final    int    n    =    coeff,    comparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
47	[BUG]  [BUGGY]  final  int  n  =  coeff,  xSmallest.length;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff,  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff,  xSmallest.length;	  final    int    n    =    coeff,    comparator.length;    	non-compiled	[CE]  ';'  expected	43	None	replace
48	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  /  1  +  1;	  final    int    n    =    xSmallest.length    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	4	replace
49	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  /  1  +  1;	  final    int    n    =    xSmallest.length    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	4	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  /  2  +  1;	  final    int    n    =    xSmallest.length    -    2    +    1;    	compilable	  [FE]  AssertionError  	46	3	replace
51	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2  +  1;  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  /  2  +  1;	  final    int    n    =    xSmallest.length    -    2    +    1;    	compilable	  [FE]  AssertionError  	46	3	replace
52	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  3;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  -  3;	  final    int    n    =    xSmallest.length    -    2;    final    int    n    =    xSmallest.length    -    3;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	4	replace
53	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  3;  [FE]  ArrayIndexOutOfBoundsException  [FE]            OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  3;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  -  3;	  final    int    n    =    xSmallest.length    -    2;    final    int    n    =    xSmallest.length    -    3;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	4	replace
54	[BUG]  [BUGGY]  final  double  n  =  coeff  -  xSmallest.length;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff  -  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff  -  xSmallest.length;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
55	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  coeff;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  -  coeff;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  possible  loss  of  precision	52	None	replace
56	[BUG]  [BUGGY]  final  double  n  =  coeff  -  xSmallest;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff  -  xSmallest;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff  -  xSmallest;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	52	None	replace
57	[BUG]  [BUGGY]  final  double  n  =  coeff.length  -  xSmallest;  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff.length  -  xSmallest;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff.length  -  xSmallest;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
58	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	int  n  =  xSmallest.length  +  1;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	replace
59	[BUG]  [BUGGY]  int  n  =  xSmallest.length  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	int  n  =  xSmallest.length  +  1;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	4	replace
60	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  +  1;  int  n  =  xSmallest.length  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  +  1;  int  n  =  xSmallest.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  +  1;  int  n  =  xSmallest.length  +  1;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
61	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  +  1;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	int  n  =  xSmallest.length;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	compilable	  [FE]  AssertionError  	39	2	replace
63	[BUG]  [BUGGY]  int  n  =  xSmallest.length;  [FE]  AssertionError  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	int  n  =  xSmallest.length;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	compilable	  [FE]  AssertionError  	39	2	replace
64	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length;  final  int  n  =  original[0].getPointRef().length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length;  final  int  n  =  original[0].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    original[0].getPointRef().length;    final  int  n  =  original[0].getPointRef().length;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	add
65	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length;  int  n  =  original[0].getPointRef().length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length;  int  n  =  original[0].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    original[0].getPointRef().length;    int  n  =  original[0].getPointRef().length;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	add
66	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length;  final  int  n  =  initial[0].getPointRef().length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length;  final  int  n  =  initial[0].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    original[0].getPointRef().length;    final  int  n  =  initial[0].getPointRef().length;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	add
67	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length;  final  int  n  =  original[1].getPointRef().length;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length;  final  int  n  =  original[1].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    original[0].getPointRef().length;    final  int  n  =  original[1].getPointRef().length;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	2	None	add
68	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  final  int  n  =  xSmallest.length  -  2  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  final  int  n  =  xSmallest.length  -  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    2    +    1;    final  int  n  =  xSmallest.length  -  2  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	45	None	add
69	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  int  n  =  xSmallest.length  -  2  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  int  n  =  xSmallest.length  -  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    2    +    1;    int  n  =  xSmallest.length  -  2  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	45	None	add
70	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  Final  int  n  =  xSmallest.length  -  2  +  1;  [CE]  not  a  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  Final  int  n  =  xSmallest.length  -  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    2    +    1;    Final  int  n  =  xSmallest.length  -  2  +  1;	  	non-compiled	[CE]  not  a  statement	45	None	add
71	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  final  int  n  =  xSmallest.length  +  2  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  2  +  1;  final  int  n  =  xSmallest.length  +  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    2    +    1;    final  int  n  =  xSmallest.length  +  2  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	45	None	add
72	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoef(),  comparator);	  final    double[]    coeff    =    original[1].getCoef();    	non-compiled	[CE]  ';'  expected	47	None	replace
73	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoef(),  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoef(),  comparator;	  final    double[]    coeff    =    original[1].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
74	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]          OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  -  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	int  n  =  xSmallest.length  -  2;	  final    int    n    =    xSmallest.length    -    2;    int    n    =    xSmallest.length    -    2;    	compilable	  [FE]  OptimizationException  	35	4	replace
75	[BUG]  [BUGGY]  int  n  =  xSmallest.length  -  2;  [FE]  OptimizationException  [FE]          OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  -  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	int  n  =  xSmallest.length  -  2;	  final    int    n    =    xSmallest.length    -    2;    int    n    =    xSmallest.length    -    2;    	compilable	  [FE]  OptimizationException  	35	4	replace
76	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  -  2;  int  n  =  xSmallest.length  -  2;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  -  2;  int  n  =  xSmallest.length  -  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  -  2;  int  n  =  xSmallest.length  -  2;	  final    int    n    =    xSmallest.length    -    2;    int    n    =    xSmallest.length    -    2;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	35	None	replace
77	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  -  1  +  coeff;  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  -  1  +  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  -  1  +  coeff;	  final    int    n    =    xSmallest.length    -    1    +    coeff;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
78	[BUG]  [BUGGY]  final  double  n  =  coeff  -  1  +  xSmallest.length;  [CE]  possible  loss  of  precision  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff  -  1  +  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff  -  1  +  xSmallest.length;	  final    int    n    =    xSmallest.length    -    1    +    coeff;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
79	[BUG]  [BUGGY]  final  int  n  =  coeff  -  1  +  xSmallest.length;  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff  -  1  +  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff  -  1  +  xSmallest.length;	  final    int    n    =    xSmallest.length    -    1    +    coeff;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
80	[BUG]  [BUGGY]  final  long  n  =  xSmallest.length  -  1  +  coeff;  [CE]  possible  loss  of  precision  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  long  n  =  xSmallest.length  -  1  +  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  long  n  =  xSmallest.length  -  1  +  coeff;	  final    int    n    =    xSmallest.length    -    1    +    coeff;    	non-compiled	[CE]  possible  loss  of  precision	42	None	replace
81	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	int  n  =  xSmallest.length  -  1;	  final    int    n    =    xSmallest.length    -    1;    int    n    =    xSmallest.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	replace
82	[BUG]  [BUGGY]  int  n  =  xSmallest.length  -  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	int  n  =  xSmallest.length  -  1;	  final    int    n    =    xSmallest.length    -    1;    int    n    =    xSmallest.length    -    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	27	4	replace
83	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  -  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  -  1;	  final    int    n    =    xSmallest.length    -    1;    int    n    =    xSmallest.length    -    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
84	[BUG]  [BUGGY]  int  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  -  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  int  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  -  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	int  n  =  xSmallest.length  -  1;  int  n  =  xSmallest.length  -  1;	  final    int    n    =    xSmallest.length    -    1;    int    n    =    xSmallest.length    -    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	27	None	replace
85	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2  *  coeff;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2  *  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  /  2  *  coeff;	  final    int    n    =    xSmallest.length    /    2;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
86	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointValue()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPointValue()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPointValue()  +  coeff;	  final    double[]    xSmallest    =    original[1].getPointValue();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	11	None	replace
87	[BUG]  [BUGGY]  final  double  n  =  coeff[0].getPointRef();  [CE]  array  required,  but  double  found  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff[0].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff[0].getPointRef();	  final    int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  array  required,  but  double  found	4	None	replace
88	[BUG]  [BUGGY]  final  int  n  =  coeff[0].getPointRef().length;  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff[0].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff[0].getPointRef().length;	  final    int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  array  required,  but  double  found	4	None	replace
89	[BUG]  [BUGGY]  final  int  n  =  coeff[1].getPointRef();  [CE]  array  required,  but  double  found  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff[1].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff[1].getPointRef();	  final    int    n    =    coeff[0].getPointRef();    	non-compiled	[CE]  array  required,  but  double  found	4	None	replace
90	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getRealPointValuePair();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[0],  comparator.getRealPointValuePair();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[0],  comparator.getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  ';'  expected	13	None	replace
91	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff);	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
92	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getRealPointValuePair();  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[1].getRealPointValuePair();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[1].getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
93	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  +  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  +  2;	  final    int    n    =    xSmallest.length    +    1;    final    int    n    =    xSmallest.length    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
94	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  +  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  +  2;	  final    int    n    =    xSmallest.length    +    1;    final    int    n    =    xSmallest.length    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	40	4	replace
95	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  +  2;  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  +  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  +  2;	  final    double    n    =    xSmallest.length    +    1;    	non-compiled	[CE]  possible  loss  of  precision	22	None	replace
96	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  *  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  *  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPointRef()  *  coeff;	  final    double[]    xSmallest    =    original[1].getPointRef()    +    coeff;    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
97	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff,  comparator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff,  comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff,  comparator);	  final    double[]    xSmallest    =    original[1].getPointRef()    +    coeff;    	non-compiled	[CE]  ';'  expected	49	None	replace
98	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff,  comparator;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff,  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff,  comparator;	  final    double[]    xSmallest    =    original[1].getPointRef()    +    coeff;    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
99	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  final  int  n  =  xSmallest.length  -  1  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  final  int  n  =  xSmallest.length  -  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    1    +    1;    final  int  n  =  xSmallest.length  -  1  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	30	None	add
100	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  int  n  =  xSmallest.length  -  1  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  int  n  =  xSmallest.length  -  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    1    +    1;    int  n  =  xSmallest.length  -  1  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	30	None	add
101	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  Final  int  n  =  xSmallest.length  -  1  +  1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  Final  int  n  =  xSmallest.length  -  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    1    +    1;    Final  int  n  =  xSmallest.length  -  1  +  1;	  	non-compiled	[CE]  not  a  statement	30	None	add
102	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  final  int  n  =  xSmallest.length  -  1  +  1);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  final  int  n  =  xSmallest.length  -  1  +  1);  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    1    +    1;    final  int  n  =  xSmallest.length  -  1  +  1);	  	non-compiled	[CE]  ';'  expected	30	None	add
103	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getPoint()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[0].getPoint()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[0].getPoint()  +  coeff;	  final    double[]    xSmallest    =    original[0].getPoint();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	8	None	replace
104	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  /  xSmallest;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  /  xSmallest;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getPointRef()  /  xSmallest;	  final    double[]    coeff    =    original[1].getPointRef()    /    comparator;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
105	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  *  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  *  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getPointRef()  *  comparator;	  final    double[]    coeff    =    original[1].getPointRef()    /    comparator;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
106	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[1].getPointRef()  /  original;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator[1].getPointRef()  /  original;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator[1].getPointRef()  /  original;	  final    double[]    coeff    =    original[1].getPointRef()    /    comparator;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
107	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  2;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    2;    final  int  n  =  xSmallest.length  /  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	15	None	add
108	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  3;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  3;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    2;    final  int  n  =  xSmallest.length  /  3;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	15	None	add
109	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2;  int  n  =  xSmallest.length  /  2;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2;  int  n  =  xSmallest.length  /  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    2;    int  n  =  xSmallest.length  /  2;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	15	None	add
110	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  4;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  4;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    2;    final  int  n  =  xSmallest.length  /  4;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	15	None	add
111	[BUG]  [BUGGY]  final  double  n  =  original[1].getPointRef();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  original[1].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  original[1].getPointRef();	  final    double    n    =    original[0].getPointRef();    	non-compiled	[CE]  incompatible  types	1	None	replace
112	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getCoef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator.getCoef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator.getCoef();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
113	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getRealPointValue();  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[0].getRealPointValue();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[0].getRealPointValue();	  final    double[]    xSmallest    =    original[0].getPointValue();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	9	None	replace
114	[BUG]  [BUGGY]  double[]  xSmallest  =  original[0].getPoint()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  double[]  xSmallest  =  original[0].getPoint()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	double[]  xSmallest  =  original[0].getPoint()  +  coeff;	  double[]    xSmallest    =    original[0].getPoint();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	20	None	replace
115	[BUG]  [BUGGY]  double[]  xSmallest  =  original[1].getPointRef()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  double[]  xSmallest  =  original[1].getPointRef()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	double[]  xSmallest  =  original[1].getPointRef()  +  coeff;	  double[]    xSmallest    =    original[1].getPointRef();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	19	None	replace
116	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[1].getPointRef()  +  coeff;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[1].getPointRef()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[1].getPointRef()  +  coeff;	  final    double[]    xOriginal    =    original[1].getPointRef();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	12	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[1].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  original[1].getPointRef().length;	  final    int    n    =    original[0].getPointRef().length;    	compilable	  [FE]  AssertionError  	3	2	replace
118	[BUG]  [BUGGY]  final  int  n  =  original[1].getPointRef().length;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[1].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[1].getPointRef().length;	  final    int    n    =    original[0].getPointRef().length;    	compilable	  [FE]  AssertionError  	3	2	replace
119	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getCoefF();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getCoefF();	  final    double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	23	None	replace
120	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  1;  Final  int  n  =  xSmallest.length  /  1;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  1;  Final  int  n  =  xSmallest.length  /  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    1;    Final  int  n  =  xSmallest.length  /  1;	  	non-compiled	[CE]  not  a  statement	32	None	add
121	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoefF();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoefF();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoefF();	  final    double[]    coeff    =    original[1].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
122	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2;  Final  int  n  =  xSmallest.length  /  2;  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2;  Final  int  n  =  xSmallest.length  /  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    2;    Final  int  n  =  xSmallest.length  /  2;	  	non-compiled	[CE]  not  a  statement	15	None	add
123	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length;  int  n  =  xSmallest.length  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length;  int  n  =  xSmallest.length  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length;  int  n  =  xSmallest.length  +  1;	  final    int    n    =    xSmallest.length    +    1;    int    n    =    xSmallest.length    +    1;    	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	39	None	replace
124	[BUG]  [BUGGY]  final  int  n  =  coeff.length  -  1L;  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff.length  -  1L;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff.length  -  1L;	  final    int    n    =    coeff.length    -    1;    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
125	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getRealPointValuePair();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator.getRealPointValuePair();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator.getRealPointValuePair();	  final    double[]    coeff    =    original[1].getRealPointValuePair();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
126	[BUG]  [BUGGY]  final  double[]  xOriginal  =  coeff[0].getRealPointValuePair();  [CE]  array  required,  but  double  found  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  coeff[0].getRealPointValuePair();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  coeff[0].getRealPointValuePair();	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  array  required,  but  double  found	13	None	replace
127	[BUG]  [BUGGY]  final  int  n  =  comparator.length;  [CE]  cannot  find  symbol  length  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  comparator.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  comparator.length;	  final    int    n    =    coeff,    comparator.length;    	non-compiled	[CE]  cannot  find  symbol  length	43	None	replace
128	[BUG]  [BUGGY]  final  int  n  =  comparator.length,  coeff;  [CE]  cannot  find  symbol  length  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  comparator.length,  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  comparator.length,  coeff;	  final    int    n    =    coeff,    comparator.length;    	non-compiled	[CE]  cannot  find  symbol  length	43	None	replace
129	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef().length;  Final  int  n  =  original[0].getPointRef().length;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef().length;  Final  int  n  =  original[0].getPointRef().length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    original[0].getPointRef().length;    Final  int  n  =  original[0].getPointRef().length;	  	non-compiled	[CE]  not  a  statement	2	None	add
130	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator.getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator.getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator.getPointRef();	  final    double[]    coeff    =    xSmallest[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
131	[BUG]  [BUGGY]  final  double[]  coeff  =  xSmallest[1].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  xSmallest[1].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  xSmallest[1].getPointRef();	  final    double[]    coeff    =    xSmallest[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	54	None	replace
132	[BUG]  [BUGGY]  final  double[]  coeff  =  comparator[1].getPointRef();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  comparator[1].getPointRef();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  comparator[1].getPointRef();	  final    double[]    coeff    =    comparator[0].getPointRef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	25	None	replace
133	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoef()  /  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoef()  /  comparator;	  final    double[]    coeff    =    original[1].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
134	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoef()  +  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoef()  +  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoef()  +  comparator;	  final    double[]    coeff    =    original[1].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	47	None	replace
135	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[0].getPointRef()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[0].getPointRef()  +  coeff;	  final    double[]    xSmallest    =    original[1].getPointRef()    +    coeff;    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
136	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  comparator;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPointRef()  +  comparator;	  final    double[]    xSmallest    =    original[1].getPointRef()    +    coeff;    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
137	[BUG]  [BUGGY]  final  int  n  =  coeff  -  xSmallest;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff  -  xSmallest;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff  -  xSmallest;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	52	None	replace
138	[BUG]  [BUGGY]  final  int  n  =  coeff  +  1;  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff  +  1;	  final    int    n    =    coeff.length    +    1;    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
139	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getPointRef()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getPointRef()  /  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getPointRef()  /  comparator;	  final    double[]    coeff    =    original[1].getPointRef()    /    comparator;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
140	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoeff()  /  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoeff()  /  comparator;	  final    double[]    coeff    =    original[1].getPointRef()    /    comparator;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  *  1;	  final    int    n    =    xSmallest.length    /    1;    	compilable	  [FE]  AssertionError  	33	2	replace
142	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  *  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  *  1;	  final    int    n    =    xSmallest.length    /    1;    	compilable	  [FE]  AssertionError  	33	2	replace
143	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2  +  coeff;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2  +  coeff;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  /  2  +  coeff;	  final    int    n    =    xSmallest.length    /    2;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  *  2;	  final    int    n    =    xSmallest.length    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	4	replace
145	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  *  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  *  2;	  final    int    n    =    xSmallest.length    /    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	4	replace
146	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory();  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getCoefFactory();  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getCoefFactory();	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
147	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoef()  /  comparator;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getCoef()  /  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getCoef()  /  comparator;	  final    double[]    coeff    =    original[0].getCoef();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	44	None	replace
148	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  2  +  1;  [CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  2;  final  int  n  =  xSmallest.length  /  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    /    2;    final  int  n  =  xSmallest.length  /  2  +  1;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	15	None	add
149	[BUG]  [BUGGY]  final  double  n  =  xSmallest.length  /  2;  [CE]  possible  loss  of  precision  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  xSmallest.length  /  2;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  xSmallest.length  /  2;	  final    int    n    =    xSmallest.length    /    2;    	non-compiled	[CE]  possible  loss  of  precision	16	None	replace
150	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getCoeff(coeff);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getCoeff(coeff);	  final    double[]    coeff    =    original[0].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	23	None	replace
151	[BUG]  [BUGGY]  final  int  n  =  coeff.length  -  xSmallest;  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff.length  -  xSmallest;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff.length  -  xSmallest;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
152	[BUG]  [BUGGY]  final  double  n  =  coeff.length  -  xSmallest.length;  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff.length  -  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff.length  -  xSmallest.length;	  final    double    n    =    xSmallest.length    -    coeff;    	non-compiled	[CE]  double  cannot  be  dereferenced	52	None	replace
153	[BUG]  [BUGGY]  final  int  n  =  coeff[0].getPointRef()  +  original.length;  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff[0].getPointRef()  +  original.length;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff[0].getPointRef()  +  original.length;	  final    int    n    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  array  required,  but  double  found	53	None	replace
154	[BUG]  [BUGGY]  final  int  n  =  original[0].getPointRef()  +  coeff,  comparator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  original[0].getPointRef()  +  coeff,  comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  original[0].getPointRef()  +  coeff,  comparator);	  final    int    n    =    original[0].getPointRef()    +    coeff;    	non-compiled	[CE]  ';'  expected	53	None	replace
155	[BUG]  [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff  *  comparator;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff  *  comparator;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xSmallest  =  original[1].getPointRef()  +  coeff  *  comparator;	  final    double[]    xSmallest    =    original[1].getPointRef()    +    coeff;    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	49	None	replace
156	[BUG]  [BUGGY]  final  double[]  coeff  =  original[0].getRealPointValuePair(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[0].getRealPointValuePair(coeff);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[0].getRealPointValuePair(coeff);	  final    double[]    coeff    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	24	None	replace
157	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getCoeff(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getCoeff(coeff);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getCoeff(coeff);	  final    double[]    coeff    =    original[1].getCoeff();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	17	None	replace
158	[BUG]  [BUGGY]  double[]  xSmallest  =  original[0].getPointValue()  +  coeff;  [CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  double[]  xSmallest  =  original[0].getPointValue()  +  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	double[]  xSmallest  =  original[0].getPointValue()  +  coeff;	  double[]    xSmallest    =    original[0].getPointValue();    	non-compiled	[CE]  variable  xSmallest  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	55	None	replace
159	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]            OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  3;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  /  3;	  final    int    n    =    xSmallest.length    -    2;    final    int    n    =    xSmallest.length    -    3;    	compilable	  [FE]  OptimizationException  	36	4	replace
160	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  /  3;  [FE]  OptimizationException  [FE]            OptimizationException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  /  3;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  /  3;	  final    int    n    =    xSmallest.length    -    2;    final    int    n    =    xSmallest.length    -    3;    	compilable	  [FE]  OptimizationException  	36	4	replace
161	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  /  comparator,  coeff;  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getPointRef()  /  comparator,  coeff;  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getPointRef()  /  comparator,  coeff;	  final    double[]    coeff    =    original[1].getPointRef()    /    comparator;    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	50	None	replace
162	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  *  2  +  1;	  final    int    n    =    xSmallest.length    -    2    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	4	replace
163	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  *  2  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  2  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  *  2  +  1;	  final    int    n    =    xSmallest.length    -    2    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	46	4	replace
164	[BUG]  [BUGGY]  final  int  n  =  coeff.length  -  1  +  xSmallest.length;  [CE]  double  cannot  be  dereferenced  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  coeff.length  -  1  +  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  coeff.length  -  1  +  xSmallest.length;	  final    int    n    =    xSmallest.length    -    1    +    coeff;    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
165	[BUG]  [BUGGY]  final  double  n  =  coeff.length  -  1  +  xSmallest.length;  [CE]  double  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double  n  =  coeff.length  -  1  +  xSmallest.length;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double  n  =  coeff.length  -  1  +  xSmallest.length;	  final    int    n    =    xSmallest.length    -    1    +    coeff;    	non-compiled	[CE]  double  cannot  be  dereferenced	42	None	replace
166	[BUG]  [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair(coeff);  [CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  coeff  =  original[1].getRealPointValuePair(coeff);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  coeff  =  original[1].getRealPointValuePair(coeff);	  final    double[]    coeff    =    original[1].getRealPointValuePair();    	non-compiled	[CE]  variable  coeff  is  already  defined  in  method  evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>)	18	None	replace
167	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  final  int  n  =  xSmallest.length  -  1)  +  1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  -  1  +  1;  final  int  n  =  xSmallest.length  -  1)  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final    int    n    =    xSmallest.length    -    1    +    1;    final  int  n  =  xSmallest.length  -  1)  +  1;	  	non-compiled	[CE]  ';'  expected	30	None	add
168	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	add	final  int  n  =  xSmallest.length  *  1  +  1;	  final    int    n    =    xSmallest.length    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	4	replace
169	[BUG]  [BUGGY]  final  int  n  =  xSmallest.length  *  1  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  int  n  =  xSmallest.length  *  1  +  1;  [BUGGY]        simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  int  n  =  xSmallest.length  *  1  +  1;	  final    int    n    =    xSmallest.length    -    1    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	4	replace
170	[BUG]  [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff,  comparator);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      private  RealPointValuePair  evaluateNewSimplex(final  RealPointValuePair[]  original,  final  double  coeff,  final  Comparator<RealPointValuePair>  comparator)  throws  FunctionEvaluationException,  OptimizationException  {  final  double[]  xSmallest  =  original[0].getPointRef();      [BUGGY]  final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff,  comparator);  [BUGGY]      final  int  n  =  xSmallest.length;  simplex  =  new  RealPointValuePair[n  +  1];  simplex[0]  =  original[0];  for  (int  i  =  1;  i  <=  n;  ++i)  {  final  double[]  xOriginal=  original[i].getPointRef();  final  double[]  xTransformed  =  new  double[n];  for  (int  j  =  0;  j  <  n;  ++j)  {  xTransformed[j]  =  xSmallest[j]  +  coeff  *  (xSmallest[j]  -  xOriginal[j]);  }  [CLASS]  MultiDirectional  [METHOD]  evaluateNewSimplex  [RETURN_TYPE]  RealPointValuePair  RealPointValuePair[]  original  final  double  coeff  RealPointValuePair>  comparator  [VARIABLES]  boolean  double[]  xOriginal  xSmallest  xTransformed  double  coeff  gamma  khi  RealPointValuePair[]  original  int  i  j  n  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	116	116	2	replace	final  double[]  xOriginal  =  original[0].getRealPointValuePair(coeff,  comparator);	  final    double[]    xOriginal    =    original[0].getRealPointValuePair();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
