projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120finaldouble[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120double[]coeff=comparator.evaluate(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120finaldouble[]coeff=original[n].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120double[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120finaldouble[]coeff=comparator.getCoeff();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[0]=original[0];
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[0]=coeff;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[0]=comparator;
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[1]=original[0];
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[0]=coeff-original[0];
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[1]=original[1];
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120double[]coeff=original[0].getPointRef();
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120double[]coeff=comparator.calculateCoeff(xSmallest,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120double[]coeff=comparator.evaluate(xSmallest,false);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[0]=comparator.evaluateNewSimplex(xSmallest,coeff,n);
projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java120simplex[0]=comparator.equals(original[0]);
