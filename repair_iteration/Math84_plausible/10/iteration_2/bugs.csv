bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  sibling);  [CE]  cannot  find  symbol  sibling  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  sibling);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  sibling);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  sibling	2	None	replace
2	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simalx);  [CE]  cannot  find  symbol  simalx  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simalx);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simalx);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simalx	2	None	replace
3	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  siplex,  comparator);  [CE]  cannot  find  symbol  siplex  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  siplex,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  siplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  siplex	2	None	replace
4	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	add
5	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	add
6	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    if  (comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	add
7	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(original,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  best);	      double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	19	None	replace
14	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded,  best);  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  expanded,  best);	      double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  expanded	19	None	replace
15	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  expanded);	      double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  expanded	19	None	replace
16	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relativex,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(relativex,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relativex,  expanded);	      Comparator    comparator    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
17	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(original,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  expanded);	      Comparator    comparator    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
18	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  extended);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  extended);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(simplex,  extended);	      Comparator    comparator    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
19	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  extended);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  extended);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(simplex,  extended);	      RealPointValuePair    best    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
20	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  reflected);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  reflected);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(simplex,  reflected);	      RealPointValuePair    best    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
21	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  reflectedSimplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  reflectedSimplex);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(simplex,  reflectedSimplex);	      RealPointValuePair    best    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
22	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  original);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  original);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  original);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	22	None	replace
26	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  dim);  [CE]  cannot  find  symbol  dim  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  dim);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  dim);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  dim	22	None	replace
27	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflected,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflected,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflected,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    reflected,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	4	None	replace
31	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  original,  comparator);  [CE]  cannot  find  symbol  relativex  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    reflected,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativex	4	None	replace
32	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(original,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  best);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
33	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relativex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(relativex,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relativex,  best);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
34	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  best.compare(simplex,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  best);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
35	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
36	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  gamma,  original);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  gamma,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  expanded	3	None	replace
37	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  compiler);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  compiler);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  compiler);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  compiler	3	None	replace
38	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  simplex);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  simplex);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
39	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	1	None	replace
40	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	1	None	replace
41	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    simplex,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	14	None	replace
42	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summary,  original,  comparator);  [CE]  cannot  find  symbol  summary  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summary,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(summary,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  summary	14	None	replace
43	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
44	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
45	[BUG]  [BUGGY]  Comparator  best  =  comparator.compare(contracted,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  best  =  comparator.compare(contracted,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  best  =  comparator.compare(contracted,  expanded);	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
46	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(best!=  null)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  original,  comparator);  [CE]  cannot  find  symbol  implex  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  implex	17	None	replace
48	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  expanded,  comparator);  [CE]  cannot  find  symbol  locale  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  expanded,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  locale	17	None	replace
49	[BUG]  [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  reflectedSimplex  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	11	None	replace
50	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(reflected,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(reflected,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(reflected,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	16	None	replace
51	[BUG]  [BUGGY]  double  gamma  =  simplex.doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  simplex.doubleValue();  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  simplex.doubleValue();	      double    gamma    =    reflectedSimplex.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
52	[BUG]  [BUGGY]  double  gamma  =  simplified.doubleValue();  [CE]  cannot  find  symbol  simplified  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  simplified.doubleValue();  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  simplified.doubleValue();	      double    gamma    =    reflectedSimplex.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  simplified	13	None	replace
53	[BUG]  [BUGGY]  double  gamma  =  uniquex.doubleValue();  [CE]  cannot  find  symbol  uniquex  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  uniquex.doubleValue();  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  uniquex.doubleValue();	      double    gamma    =    reflectedSimplex.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  uniquex	13	None	replace
54	[BUG]  [BUGGY]  double  gamma  =  original.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  original.doubleValue();  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  original.doubleValue();	      double    gamma    =    reflectedSimplex.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
55	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded)  <  0;  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded)  <  0;  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  expanded)  <  0;	      double    gamma    =    comparator.compare(simplex,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  expanded	20	None	replace
56	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  best)  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(original,  best)  <  0;  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  best)  <  0;	      double    gamma    =    comparator.compare(simplex,    best)    <    0;    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	20	None	replace
57	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(singlex,  best)  <  0;  [CE]  cannot  find  symbol  singlex  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(singlex,  best)  <  0;  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(singlex,  best)  <  0;	      double    gamma    =    comparator.compare(simplex,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  singlex	20	None	replace
58	[BUG]  [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  reflectedSimplex  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	12	None	replace
59	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)comparator.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)comparator.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)comparator.clone();	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
61	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)simplex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)simplex.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)simplex.clone();	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
62	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)iterateSimplex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)iterateSimplex.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)iterateSimplex.clone();	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
63	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)this.simplex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)this.simplex.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)this.simplex.clone();	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
64	[BUG]  [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
65	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(smallx,  expanded);	      Comparator    comparator    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
66	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
67	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(original,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(original,  extended)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(original,  extended)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
68	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
69	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
70	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(singlex,  best);  [CE]  cannot  find  symbol  singlex  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(singlex,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(singlex,  best);	      double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  singlex	19	None	replace
71	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Double  gamma  =  comparator.compare(simplex,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(simplex,  best);	      double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	19	None	replace
72	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simpleX,  best)  <  0;  [CE]  cannot  find  symbol  simpleX  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simpleX,  best)  <  0;  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simpleX,  best)  <  0;	      double    gamma    =    comparator.compare(simplex,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  simpleX	20	None	replace
73	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  gamma,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  gamma,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	3	None	replace
75	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
76	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
77	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	15	None	add
78	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  expanded);	      RealPointValuePair    best    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
79	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(original,  expanded);	      RealPointValuePair    best    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
80	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    expanded,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	1	None	replace
81	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  comparator);  [CE]  cannot  find  symbol  compressed  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  compressed	1	None	replace
82	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  gamma,  comparator);  [CE]  cannot  find  symbol  implex  [FE]    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  implex	16	None	replace
83	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  best.compare(simplex,  reflected);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  reflected);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
84	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  original,  comparator);  [CE]  cannot  find  symbol  smallx  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  smallx	17	None	replace
85	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  initial,  comparator);  [CE]  cannot  find  symbol  initial  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  initial,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  initial,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  initial	17	None	replace
86	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  first);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  first);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  first	22	None	replace
87	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  best);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relative,  best);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
88	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  best.compare(simplex,  reflectedSimplex);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  reflectedSimplex);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
89	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  best.compare(simplex,  comparison);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  comparison);	      Comparator    comparator    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
90	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    original,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	2	None	replace
91	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  original,  comparator);  [CE]  cannot  find  symbol  relativeXML  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeXML	2	None	replace
92	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  simplex,  original);  [CE]  cannot  find  symbol  relativeComparator  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  simplex,  original);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  simplex,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeComparator	14	None	replace
93	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  original,  comparator);  [CE]  cannot  find  symbol  relative  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    simplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	14	None	replace
94	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  original,  comparator);  [CE]  cannot  find  symbol  relativeX  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  original,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeX	17	None	replace
95	[BUG]  [BUGGY]  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  preferred);  [CE]  cannot  find  symbol  preferred  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  preferred);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  preferred);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  preferred	22	None	replace
97	[BUG]  [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
98	[BUG]  [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  best)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
99	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  first)  <  0;  [CE]  cannot  find  symbol  first  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  double  gamma  =  comparator.compare(simplex,  first)  <  0;  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  first)  <  0;	      double    gamma    =    comparator.compare(simplex,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  first	20	None	replace
100	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  expanded);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relative,  expanded);	      Comparator    comparator    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	10	None	replace
102	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)super.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)super.clone();  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)super.clone();	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
103	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  expanded);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(contracted,  expanded);	      	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
104	[BUG]  [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
105	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	      if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
106	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  compressed);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplex,  compressed);  [BUGGY]    final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(simplex,  compressed);	      RealPointValuePair    best    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
107	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  gamma,  comparator);  [CE]  cannot  find  symbol  relativex  [FE]    AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativex	16	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	add	RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	compilable	  [FE]  AssertionError  	16	3	replace
109	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }      [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]    if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	compilable	  [FE]  AssertionError  	16	3	replace
