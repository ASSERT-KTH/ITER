bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  expanded);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  expanded);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  expanded	13	None	replace
2	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  expanded,  best);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  expanded,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  expanded,  best);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  expanded	13	None	replace
3	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  extended);  [CE]  cannot  find  symbol  extended  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  extended);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  extended);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  extended	13	None	replace
4	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  simplified,  best);  [CE]  cannot  find  symbol  simplified  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  simplified,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  simplified,  best);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  simplified	13	None	replace
5	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  gamma);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  gamma);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  gamma);	  RealPointValuePair    best    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	78	None	replace
6	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  reflectedSimplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  reflectedSimplex);	  RealPointValuePair    best    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	78	None	replace
7	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(compare.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
8	[BUG]  [BUGGY]  if(expanded  >  0)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded  >  0)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded  >  0)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(compare.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
9	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(compare.compare(original,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(compare.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
10	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expanded!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expanded!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expanded!=  null)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
11	[BUG]  [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded  ==  null)  {  if(comparator.compare(original,  expanded)  <  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
12	[BUG]  [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
14	[BUG]  [BUGGY]  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
15	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expansed,  expanded)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
16	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparison.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparison.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparison.compare(expansed,  best)  <  0)  {  return;  }	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
19	[BUG]  [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
20	[BUG]  [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplified)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplified)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  best)  {  if(comparator.compare(expansed,  simplified)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
21	[BUG]  [BUGGY]  if(expansed  ==  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  ==  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  ==  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
22	[BUG]  [BUGGY]  if(expansed  >=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  >=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  >=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
23	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflectedSimplex,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflectedSimplex,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflectedSimplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    siplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	3	None	replace
24	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplified,  comparator);  [CE]  cannot  find  symbol  simplified  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplified,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplified,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    siplex,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simplified	3	None	replace
25	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(smallx,  reflectedSimplex);	  Comparator    comparator    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
26	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(simplex,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(simplex,  reflected);	  Comparator    comparator    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
27	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  expanded,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  expanded,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(smallx,  expanded,  best);	  Comparator    comparator    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
28	[BUG]  [BUGGY]  double  gamma  =  reflected.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  reflected.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  reflected.doubleValue();	  double    gamma    =    simplified.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
29	[BUG]  [BUGGY]  double  gamma  =  comparator.doubleValue();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.doubleValue();	  double    gamma    =    simplified.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
30	[BUG]  [BUGGY]  double  gamma  =  expanded.doubleValue();  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  expanded.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  expanded.doubleValue();	  double    gamma    =    simplified.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  expanded	52	None	replace
31	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
32	[BUG]  [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded  ==  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
33	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  original);  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  expanded	92	None	replace
34	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  simplex,  expanded);  [CE]  cannot  find  symbol  relativeComparator  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  simplex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  simplex,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeComparator	92	None	replace
35	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  reflected,  original);  [CE]  cannot  find  symbol  relativeComparator  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  reflected,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  reflected,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeComparator	92	None	replace
36	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  expanded,  original);  [CE]  cannot  find  symbol  relativeComparator  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  expanded,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeComparator,  expanded,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeComparator	92	None	replace
37	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  simplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relative,  simplex);	  Comparator    comparator    =    comparator.compare(relative,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	101	None	replace
38	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relative,  reflected);	  Comparator    comparator    =    comparator.compare(relative,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	101	None	replace
39	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  gamma);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  gamma);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  gamma);	  double    gamma    =    comparator.compare(simplex,    dim);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	26	None	replace
40	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  size);  [CE]  cannot  find  symbol  size  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  size);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  size);	  double    gamma    =    comparator.compare(simplex,    dim);    	non-compiled	[CE]  cannot  find  symbol  size	26	None	replace
41	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simpleX,  original,  comparator);  [CE]  cannot  find  symbol  simpleX  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simpleX,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simpleX,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeX,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simpleX	94	None	replace
42	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  relativeX);  [CE]  cannot  find  symbol  relativeX  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  relativeX);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  relativeX);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeX,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeX	94	None	replace
43	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expanded,  extended)  <  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    original.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
45	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    original.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
46	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  compiler);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  compiler);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  compiler);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    original);    	non-compiled	[CE]  cannot  find  symbol  compiler	90	None	replace
47	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	90	None	replace
48	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simplex);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	90	None	replace
49	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  reflectedSimplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    original);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	90	None	replace
50	[BUG]  [BUGGY]  double  gamma  =  best.doubleValue();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  best.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  best.doubleValue();	  double    gamma    =    original.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
51	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }	  if(expanded.equals(original))    {    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
52	[BUG]  [BUGGY]  if(original.equals(expanded))  {  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original.equals(expanded))  {  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original.equals(expanded))  {  if(simplex!=  null)  {  return;  }	  if(expanded.equals(original))    {    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
53	[BUG]  [BUGGY]  if(simplex.equals(original))  {  if(expanded!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex.equals(original))  {  if(expanded!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex.equals(original))  {  if(expanded!=  null)  {  return;  }	  if(expanded.equals(original))    {    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
54	[BUG]  [BUGGY]  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  reflectedSim  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSim.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflectedSim	59	None	replace
55	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSim.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
56	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(original,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(original,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(original,  extended)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(original,    extended)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
57	[BUG]  [BUGGY]  if(original!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    original)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
58	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    original)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
59	[BUG]  [BUGGY]  if(original!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    original)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
60	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    original)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
61	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)relativeSimplex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)relativeSimplex.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)relativeSimplex.clone();	  RealPointValuePair    best    =(RealPointValuePair)super.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	102	None	replace
62	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  expanded,  comparator);  [CE]  cannot  find  symbol  relativex  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativex	31	None	replace
63	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  original)  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  original)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  original)  <  0;	  double    gamma    =    comparator.compare(simplex,    expanded)    <    0;    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	55	None	replace
64	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex)  <  0;  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  reflectedSimplex)  <  0;	  double    gamma    =    comparator.compare(simplex,    expanded)    <    0;    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	55	None	replace
65	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflected)  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflected)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  reflected)  <  0;	  double    gamma    =    comparator.compare(simplex,    expanded)    <    0;    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	55	None	replace
66	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(relativex,  reflectedSimplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(relativex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(relativex,  reflectedSimplex);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
67	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  reflectedSimplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(original,  reflectedSimplex);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
68	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  reflectedSimplex);	  double    gamma    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	15	None	replace
69	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relativex,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relativex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relativex,  reflectedSimplex);	  Comparator    comparator    =    best.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	88	None	replace
70	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(reflected,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(reflected,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(reflected,  reflectedSimplex);	  Comparator    comparator    =    best.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	88	None	replace
71	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(original,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(original,  reflectedSimplex);	  Comparator    comparator    =    best.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	88	None	replace
72	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(reflected,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(reflected,  expanded);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(reflected,  expanded);	  Comparator    comparator    =    best.compare(simplex,    reflected);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	83	None	replace
73	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(reflected,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(reflected,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(reflected,  reflected);	  Comparator    comparator    =    best.compare(simplex,    reflected);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	83	None	replace
74	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relativex,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relativex,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relativex,  reflected);	  Comparator    comparator    =    best.compare(simplex,    reflected);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	83	None	replace
75	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  simplex,  comparator);  [CE]  cannot  find  symbol  relativeXML  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  simplex,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  simplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeXML,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeXML	91	None	replace
76	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    compiler);    	non-compiled	[CE]  cannot  find  symbol  expanded	37	None	replace
77	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  simplex);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    compiler);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	37	None	replace
78	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  uniquex);  [CE]  cannot  find  symbol  uniquex  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  uniquex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  uniquex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    compiler);    	non-compiled	[CE]  cannot  find  symbol  uniquex	37	None	replace
79	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  simplified);  [CE]  cannot  find  symbol  simplified  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  simplified);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  simplified);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    compiler);    	non-compiled	[CE]  cannot  find  symbol  simplified	37	None	replace
80	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  original,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  original,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  original,  best);	  double    gamma    =    comparator.compare(simplex,    expanded,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	14	None	replace
81	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex,  best);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  reflectedSimplex,  best);	  double    gamma    =    comparator.compare(simplex,    expanded,    best);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	14	None	replace
82	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  preferred,  best);  [CE]  cannot  find  symbol  preferred  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  preferred,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  preferred,  best);	  double    gamma    =    comparator.compare(simplex,    expanded,    best);    	non-compiled	[CE]  cannot  find  symbol  preferred	14	None	replace
83	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(original,  original);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(original,  original);	  Comparator    comparator    =    comparator.compare(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
84	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(original,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  reflectedSimplex);	  Comparator    comparator    =    comparator.compare(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
85	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(simplex,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(simplex,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(simplex,  best)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
86	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relativex,  comparator);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relativex,  comparator);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relativex,  comparator);	  Comparator    comparator    =    comparator.compare(relativex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	33	None	replace
87	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relativex,  comp);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relativex,  comp);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relativex,  comp);	  Comparator    comparator    =    comparator.compare(relativex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	33	None	replace
88	[BUG]  [BUGGY]  Comparator  best  =  comparator.compare(simplex,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  best  =  comparator.compare(simplex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  best  =  comparator.compare(simplex,  expanded);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
89	[BUG]  [BUGGY]  Comparator  best  =  comparator.compare(relativex,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  best  =  comparator.compare(relativex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  best  =  comparator.compare(relativex,  expanded);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
90	[BUG]  [BUGGY]  Comparator  best  =  comparator.compare(relative,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  best  =  comparator.compare(relative,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  best  =  comparator.compare(relative,  expanded);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
91	[BUG]  [BUGGY]  Comparator  best  =  comparator.compare(original,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  best  =  comparator.compare(original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  best  =  comparator.compare(original,  expanded);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
92	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)implex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)implex.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)implex.clone();	  RealPointValuePair    best    =(RealPointValuePair)iterateSimplex.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	62	None	replace
93	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simplex,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simplex,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  simplex,  gamma);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	35	None	replace
94	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  simplex);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	35	None	replace
95	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  khi,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  khi,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  khi,  gamma);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	35	None	replace
96	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    if  (comparator.compare(contracted,  best)  <  0)  {  return;  }	  	non-compiled	[CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	108	None	add
97	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	108	None	add
98	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  Comparator  <  RealPointValuePair>  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  Comparator  <  RealPointValuePair>  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    Comparator  <  RealPointValuePair>  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	108	None	add
99	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]          AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    Comparator  <  RealPointValuePair>  comp  =  comparator.compare(contracted,  expanded);	  	non-compiled	[CE]  cannot  find  symbol  expanded	108	None	add
100	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simple,  expanded);  [CE]  cannot  find  symbol  simple  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simple,  expanded);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simple,  expanded);	  double    gamma    =    comparator.compare(singlex,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	70	None	replace
101	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflectedSimplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    initial,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	85	None	replace
102	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
103	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(original,  expanded)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
104	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expanded)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
105	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflected,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflected,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflected,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	4	None	replace
106	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(reflected,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(reflected,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  contracted  =  evaluateNewSimplex(reflected,  gamma,  comparator);	  RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	109	None	replace
107	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]      AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);	  RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	109	None	replace
108	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  comparator);	  RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	109	None	replace
109	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expansed,  extended)  <  0)  {  return;  }	  if(expansed!=    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
110	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  original);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    sibling);    	non-compiled	[CE]  cannot  find  symbol  expanded	1	None	replace
111	[BUG]  [BUGGY]  if(first!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(first!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(first!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
112	[BUG]  [BUGGY]  if(first  ==  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(first  ==  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(first  ==  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
113	[BUG]  [BUGGY]  if(expansed!=  first)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  first)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  first)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
114	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  expanded)  <  0;  [CE]  cannot  find  symbol  expanded  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  expanded)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  expanded)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  expanded	56	None	replace
115	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  extended)  <  0;  [CE]  cannot  find  symbol  extended  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  extended)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  extended)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  extended	56	None	replace
116	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(original,  expanded)  <  0;  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.compare(original,  expanded)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(original,  expanded)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  expanded	56	None	replace
117	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  enhanced)  <  0;  [CE]  cannot  find  symbol  enhanced  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  enhanced)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  enhanced)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  enhanced	56	None	replace
118	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  dimplex);  [CE]  cannot  find  symbol  dimplex  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  dimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  dimplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    comparator,    original);    	non-compiled	[CE]  cannot  find  symbol  dimplex	80	None	replace
119	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  sibling);  [CE]  cannot  find  symbol  sibling  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  sibling);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  sibling);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    comparator,    original);    	non-compiled	[CE]  cannot  find  symbol  sibling	80	None	replace
120	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  comparator,  original);  [CE]  cannot  find  symbol  relativex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  comparator,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  comparator,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    comparator,    original);    	non-compiled	[CE]  cannot  find  symbol  relativex	80	None	replace
121	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  gamma,  original,  simplex);  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  gamma,  original,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  gamma,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	38	None	replace
122	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  expanded,  original,  simplex);  [CE]  cannot  find  symbol  expanded  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  expanded,  original,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  expanded,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	38	None	replace
123	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  original,  simplex);  [CE]  cannot  find  symbol  expanded  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  original,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	38	None	replace
124	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	77	None	replace
125	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [CE]  cannot  find  symbol  expanded  [FE]          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	77	None	replace
126	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
127	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }	  if(expanded    ==    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
128	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best  ==  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }	  if(expanded    ==    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
129	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  simalx);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  simalx);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  simalx);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    simalx);    	non-compiled	[CE]  cannot  find  symbol  expanded	2	None	replace
130	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    expanded);    	non-compiled	[CE]  cannot  find  symbol  expanded	40	None	replace
131	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  uniquex,  original);  [CE]  cannot  find  symbol  uniquex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  uniquex,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  uniquex,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    expanded);    	non-compiled	[CE]  cannot  find  symbol  uniquex	40	None	replace
132	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflected,  gamma,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflected,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflected,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    expanded,    gamma,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	36	None	replace
133	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  uniquex,  gamma,  original);  [CE]  cannot  find  symbol  uniquex  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  uniquex,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  uniquex,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    expanded,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  uniquex	36	None	replace
134	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflected,  gamma,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflected,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  reflected,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    expanded,    gamma,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	36	None	replace
135	[BUG]  [BUGGY]  if(expansed  <  =  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  <  =  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  <  =  0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
136	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  compiler);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  compiler);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  compiler);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    reflected,    original);    	non-compiled	[CE]  cannot  find  symbol  compiler	30	None	replace
137	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  reflected);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  reflected);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    reflected,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	30	None	replace
138	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    if    (comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
139	[BUG]  [BUGGY]  if(simplex  ==  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {  return;  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    if    (comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
140	[BUG]  [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    extended)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	75	None	replace
141	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(relativex,  reflected);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(relativex,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(relativex,  reflected);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
142	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparison.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparison.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparison.compare(contracted,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
143	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  gamma);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    gamma,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	74	None	replace
144	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  siplex);  [CE]  cannot  find  symbol  siplex  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  siplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  siplex);	  double    gamma    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  siplex	25	None	replace
145	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  dim);  [CE]  cannot  find  symbol  dim  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  dim);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  dim);	  double    gamma    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  dim	25	None	replace
146	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  dimplex);  [CE]  cannot  find  symbol  dimplex  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  dimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  dimplex);	  double    gamma    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  dimplex	25	None	replace
147	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  original,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(contracted,  original,  expanded);	  RealPointValuePair    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
148	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  original);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(contracted,  original);	  RealPointValuePair    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
149	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  simplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(contracted,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(contracted,  simplex);	  RealPointValuePair    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
150	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)compiler.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)compiler.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)compiler.clone();	  RealPointValuePair    best    =(RealPointValuePair)comparator.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	60	None	replace
151	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)this.comparator.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)this.comparator.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)this.comparator.clone();	  RealPointValuePair    best    =(RealPointValuePair)comparator.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	60	None	replace
152	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relative,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relative,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relative,  reflected);	  Comparator    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	87	None	replace
153	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relative,  dima);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relative,  dima);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relative,  dima);	  Comparator    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	87	None	replace
154	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
155	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  second)  <  0;  [CE]  cannot  find  symbol  second  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  second)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  second)  <  0;	  double    gamma    =    comparator.compare(simplex,    first)    <    0;    	non-compiled	[CE]  cannot  find  symbol  second	99	None	replace
156	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	39	None	replace
157	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  reflected);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  reflected);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	39	None	replace
158	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  best,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  best,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  best,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	39	None	replace
159	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simple,  expanded)  <  0;  [CE]  cannot  find  symbol  simple  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simple,  expanded)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simple,  expanded)  <  0;	  double    gamma    =    comparator.compare(singlex,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  simple	57	None	replace
160	[BUG]  [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    >=    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	76	None	replace
161	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  ==  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  ==  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    >=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
162	[BUG]  [BUGGY]  double  gamma  =  uniqueSimplex.doubleValue();  [CE]  cannot  find  symbol  uniqueSimplex  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  uniqueSimplex.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  uniqueSimplex.doubleValue();	  double    gamma    =    uniquex.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  uniqueSimplex	53	None	replace
163	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  expanded);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  expanded);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  expanded);	  Comparator    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	89	None	replace
164	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(original,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(original,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(original,  best);	  Comparator    comparator    =    best.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	replace
165	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(reflected,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(reflected,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(reflected,  best);	  Comparator    comparator    =    best.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	replace
166	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  comparison);  [CE]  cannot  find  symbol  comparison  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  comparison);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  comparison);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    compressed,    comparator);    	non-compiled	[CE]  cannot  find  symbol  comparison	81	None	replace
167	[BUG]  [BUGGY]  double  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
168	[BUG]  [BUGGY]  double  gamma  =  simplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  simplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  simplex.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
169	[BUG]  [BUGGY]  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  assign  a  value  to  final  variable  gamma  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  gamma	58	None	replace
170	[BUG]  [BUGGY]  double  gamma  =  original.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  original.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  original.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
171	[BUG]  [BUGGY]  double  gamma  =  simplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  simplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  simplex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
172	[BUG]  [BUGGY]  double  gamma  =  comparator.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
173	[BUG]  [BUGGY]  double  gamma  =  uniquex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  uniquex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  uniquex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  uniquex.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  uniquex	49	None	replace
174	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
175	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  reflected);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  reflected);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	50	None	replace
176	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  reflected,  comparator);  [CE]  cannot  find  symbol  implex  [FE]          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  reflected,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  reflected,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  implex	50	None	replace
177	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeSimplex,  original,  comparator);  [CE]  cannot  find  symbol  relativeSimplex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeSimplex,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeSimplex,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(smallx,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	84	None	replace
178	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  expanded,  comparator);  [CE]  cannot  find  symbol  implex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  implex	48	None	replace
179	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(original,  simplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  simplex);	  Comparator    comparator    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
180	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(original,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  reflected);	  Comparator    comparator    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	17	None	replace
181	[BUG]  [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
182	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  extended);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(original,  extended);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  extended);	  Comparator    comparator    =    comparator.compare(simplex,    extended);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
183	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relativex,  extended);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(relativex,  extended);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relativex,  extended);	  Comparator    comparator    =    comparator.compare(simplex,    extended);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
184	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)reflectedSimplex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)reflectedSimplex.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)reflectedSimplex.clone();	  RealPointValuePair    best    =(RealPointValuePair)simplex.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
185	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  original,  comparator);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  expanded,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  expanded	93	None	replace
186	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  expanded,  original,  comparator);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  expanded,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  expanded,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	93	None	replace
187	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  expanded,  comparator);  [CE]  cannot  find  symbol  relative  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	93	None	replace
188	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  original,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	93	None	replace
189	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(simplex)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
190	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summa,  expanded,  comparator);  [CE]  cannot  find  symbol  summa  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summa,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(summa,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(summary,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  summa	42	None	replace
191	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summa,  original,  comparator);  [CE]  cannot  find  symbol  summa  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summa,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(summa,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(summary,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  summa	42	None	replace
192	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  expanded,  best);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.compare(simplex,  expanded,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(simplex,  expanded,  best);	  Double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  expanded	71	None	replace
193	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(original,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.compare(original,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(original,  best);	  Double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	71	None	replace
194	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  simplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  simplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(original,  simplex);	  RealPointValuePair    best    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
195	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  simplex,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  simplex,  expanded);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(original,  simplex,  expanded);	  RealPointValuePair    best    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
196	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  simplified);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  simplified);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(original,  simplified);	  RealPointValuePair    best    =    comparator.compare(original,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	79	None	replace
197	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
198	[BUG]  [BUGGY]  if(contracted!=  best)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(contracted!=  best)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(contracted!=  best)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
199	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(contracted.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(contracted.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
200	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relativex,  compat);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relativex,  compat);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relativex,  compat);	  Comparator    comparator    =    comparator.compare(relativex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	33	None	replace
201	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  expanded,  comparator);  [CE]  cannot  find  symbol  smallx  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  smallx	48	None	replace
202	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  simplex,  gamma,  original);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  simplex,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  expanded,  simplex,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  expanded	74	None	replace
203	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  expanded,  original);  [CE]  cannot  find  symbol  expanded  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  expanded,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  expanded,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  expanded	74	None	replace
204	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(implex,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(implex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(implex,  reflectedSimplex);	  Comparator    comparator    =    best.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	88	None	replace
205	[BUG]  [BUGGY]  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	77	None	replace
206	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  expanded,  original,  comparator);  [CE]  cannot  find  symbol  implex  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  expanded,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  expanded,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  implex	93	None	replace
207	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  original,  comparator);  [CE]  cannot  find  symbol  compressed  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  compressed	93	None	replace
208	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(expanded.equals(original))  {  if(simplex!=  null)  {  return;  }	  if(expanded.equals(original))    {    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
209	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
210	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed  >  0)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
211	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  second);  [CE]  cannot  find  symbol  second  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  second);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  second);	  double    gamma    =    comparator.compare(simplex,    first);    	non-compiled	[CE]  cannot  find  symbol  second	86	None	replace
212	[BUG]  [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  null)  {  if(comparator.compare(expansed,  best)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
213	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  variable  contracted  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	108	None	add
214	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  gamma  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  gamma  =  evaluateNewSimplex(simplex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair  gamma  =  evaluateNewSimplex(simplex,  gamma,  comparator);	  	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	108	None	add
215	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relative,  null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relative,  null);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relative,  null);	  Comparator    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	87	None	replace
216	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relative,  original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relative,  original);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relative,  original);	  Comparator    comparator    =    comparator.compare(relative,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	87	None	replace
217	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  reflectedSimplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  reflectedSimplex);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
218	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(implex,  reflectedSimplex);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(implex,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(implex,  reflectedSimplex);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
219	[BUG]  [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  double  gamma  =  reflectedSim.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSim.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
220	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  gamma);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    compiler);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	37	None	replace
221	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(original,    gamma,    compiler);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	37	None	replace
222	[BUG]  [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    >=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
223	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  >=  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  >=  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  >=  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    >=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
224	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	38	None	replace
225	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  gamma,  reflectedSimplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	38	None	replace
226	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simpleX,  best);  [CE]  cannot  find  symbol  simpleX  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simpleX,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simpleX,  best);	  double    gamma    =    comparator.compare(singlex,    best);    	non-compiled	[CE]  cannot  find  symbol  simpleX	70	None	replace
227	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simple,  best);  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simple,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simple,  best);	  double    gamma    =    comparator.compare(singlex,    best);    	non-compiled	[CE]  cannot  find  symbol  simple	70	None	replace
228	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  gamma);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  gamma);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    gamma);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	35	None	replace
229	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  gamma);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  gamma);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  gamma);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
230	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  gamma,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  gamma,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  gamma,  best);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
231	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  reflected);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  reflected);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflected);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	20	None	replace
232	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
233	[BUG]  [BUGGY]  if(original!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
234	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  singlex,  gamma,  original);  [CE]  cannot  find  symbol  singlex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  singlex,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  singlex,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    expanded,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  singlex	36	None	replace
235	[BUG]  [BUGGY]  if(original  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
236	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
237	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(original,  gamma);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(original,  gamma);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(original,  gamma);	  Comparator    comparator    =    comparator.compare(original,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	32	None	replace
238	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(original,  extended)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(original,  extended)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(original,  extended)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
239	[BUG]  [BUGGY]  Double  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
240	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  0);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  0);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  expanded,  0);	  RealPointValuePair    best    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	78	None	replace
241	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded  -  1);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  expanded  -  1);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  expanded  -  1);	  RealPointValuePair    best    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	78	None	replace
242	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  simalx);  [CE]  cannot  find  symbol  simalx  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  simalx);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  comparator,  simalx);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    comparator,    original);    	non-compiled	[CE]  cannot  find  symbol  simalx	80	None	replace
243	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  extended);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(relative,  extended);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(relative,  extended);	  Comparator    comparator    =    comparator.compare(simplex,    extended);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	18	None	replace
244	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  expanded,  original);  [CE]  cannot  find  symbol  expanded  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  expanded,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  expanded,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  expanded	41	None	replace
245	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  first);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  first);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  first);	  Comparator    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	89	None	replace
246	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(related,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(related,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(related,  reflected);	  Comparator    comparator    =    best.compare(simplex,    reflected);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	83	None	replace
247	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(implex,  reflected);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(implex,  reflected);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(implex,  reflected);	  Comparator    comparator    =    best.compare(simplex,    reflected);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	83	None	replace
248	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  extended);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(smallx,  extended);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(smallx,  extended);	  RealPointValuePair    best    =    comparator.compare(simplex,    extended);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
249	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  extended);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(original,  extended);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(original,  extended);	  RealPointValuePair    best    =    comparator.compare(simplex,    extended);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	19	None	replace
250	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(implex,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(implex,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(implex,  best);	  Comparator    comparator    =    best.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	replace
251	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relative,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relative,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relative,  best);	  Comparator    comparator    =    best.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	replace
252	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(singlex,  best);  [CE]  cannot  find  symbol  singlex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.compare(singlex,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(singlex,  best);	  Double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  singlex	71	None	replace
253	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  first,  best);  [CE]  cannot  find  symbol  first  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  first,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  first,  best);	  double    gamma    =    comparator.compare(simplex,    expanded,    best);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
254	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simple,  best)  <  0;  [CE]  cannot  find  symbol  simple  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simple,  best)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simple,  best)  <  0;	  double    gamma    =    comparator.compare(simpleX,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  simple	72	None	replace
255	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  gamma,  comparator);  [CE]  cannot  find  symbol  smallx  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(smallx,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  smallx	50	None	replace
256	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  gamma,  comparator);  [CE]  cannot  find  symbol  locale  [FE]          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(locale,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  locale	50	None	replace
257	[BUG]  [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    original.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
258	[BUG]  [BUGGY]  if(original!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    original.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
259	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(simplex,  expanded);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
260	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  expanded);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
261	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	39	None	replace
262	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  preferred);  [CE]  cannot  find  symbol  preferred  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  preferred);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  preferred);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  preferred	39	None	replace
263	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  extended);  [CE]  cannot  find  symbol  extended  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  extended);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  extended);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    expanded);    	non-compiled	[CE]  cannot  find  symbol  extended	40	None	replace
264	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  best);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  best);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  best);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    expanded);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	40	None	replace
265	[BUG]  [BUGGY]  RealPointValuePair  best  =  evaluateNewSimplex(original,  gamma,  comparator);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  evaluateNewSimplex(original,  gamma,  comparator);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  evaluateNewSimplex(original,  gamma,  comparator);	  if(expanded!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	replace
266	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	92	None	replace
267	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  original);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  simplex,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	92	None	replace
268	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  extended);  [CE]  cannot  find  symbol  extended  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  extended);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  extended);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    simalx);    	non-compiled	[CE]  cannot  find  symbol  extended	2	None	replace
269	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
270	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
271	[BUG]  [BUGGY]  if(original!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
272	[BUG]  [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  best)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  best)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
273	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
274	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
275	[BUG]  [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
276	[BUG]  [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  expanded  -  1);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  comparator.compare(smallx,  expanded  -  1);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  comparator.compare(smallx,  expanded  -  1);	  Comparator    comparator    =    comparator.compare(smallx,    expanded);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	65	None	replace
277	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(compare.compare(original,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(compare.compare(original,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(compare.compare(original,  expanded)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(compare.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
278	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(compare.compare(original,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(compare.compare(original,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(compare.compare(original,  extended)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(compare.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
279	[BUG]  [BUGGY]  if(original!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
280	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expanded,  extended)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
281	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  gamma,  comparator);  [CE]  cannot  find  symbol  implex  [FE]    AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  contracted  =  evaluateNewSimplex(implex,  gamma,  comparator);	  RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  implex	109	None	replace
282	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
283	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded)  >=  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(expanded)  >=  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(expanded)  >=  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
284	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(implex,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(implex,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(implex,  expanded);	  RealPointValuePair    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
285	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  best)  <  =  0;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  best)  <  =  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  best)  <  =  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
286	[BUG]  [BUGGY]  double  gamma  =  first.doubleValue();  [CE]  cannot  find  symbol  first  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  first.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  first.doubleValue();	  double    gamma    =    original.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  first	54	None	replace
287	[BUG]  [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best!=  null)  {  if(comparator.compare(expanded,  best)  <  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
288	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  comparator);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    compressed,    comparator);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	81	None	replace
289	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  compressed);  [CE]  cannot  find  symbol  compressed  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  compressed);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  comparator,  compressed);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    compressed,    comparator);    	non-compiled	[CE]  cannot  find  symbol  compressed	81	None	replace
290	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best  ==  null)  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }	  if(expanded    ==    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
291	[BUG]  [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  first)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(best  ==  null)  {  if(comparator.compare(expanded,  first)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(best  ==  null)  {  if(comparator.compare(expanded,  first)  <  =  0)  {  return;  }	  if(expanded    ==    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
292	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
293	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
294	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  extended)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
295	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplified)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplified)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed!=  best)  {  if(comparator.compare(expansed,  simplified)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
296	[BUG]  [BUGGY]  if(original!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
297	[BUG]  [BUGGY]  if(original  ==  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original  ==  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original  ==  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
298	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  simplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  simplex);	  double    gamma    =    comparator.compare(simplex,    dim);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	26	None	replace
299	[BUG]  [BUGGY]  double  gamma  =  unit.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [CE]  cannot  find  symbol  unit  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  unit.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  unit.doubleValue();  if  (comparator.compare(gamma,  best)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if    (comparator.compare(gamma,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  unit	49	None	replace
300	[BUG]  [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  null)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
301	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[0])  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[0])  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[0])  <  0;	  double    gamma    =    comparator.compare(simplex,    expanded)    <    0;    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	55	None	replace
302	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  unique)  <  0;  [CE]  cannot  find  symbol  unique  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  unique)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  unique)  <  0;	  double    gamma    =    comparator.compare(simplex,    expanded)    <    0;    	non-compiled	[CE]  cannot  find  symbol  unique	55	None	replace
303	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  original,  simplex);  [CE]  cannot  find  symbol  relativeXML  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  original,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeXML,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeXML	91	None	replace
304	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair[]  original  =  comparator.compare(simplex,  gamma);  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair[]  original  =  comparator.compare(simplex,  gamma);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair[]  original  =  comparator.compare(simplex,  gamma);	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	108	None	add
305	[BUG]  [BUGGY]  if(simplex  ==  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	77	None	replace
306	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)simulatedSimplex.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)simulatedSimplex.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)simulatedSimplex.clone();	  RealPointValuePair    best    =(RealPointValuePair)simplex.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	61	None	replace
307	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplx,  original,  comparator);  [CE]  cannot  find  symbol  simplx  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplx,  original,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplx,  original,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  simplx	39	None	replace
308	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  reflectedSimplex,  simplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  reflectedSimplex,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  reflectedSimplex,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	38	None	replace
309	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  expanded,  simplex);  [CE]  cannot  find  symbol  expanded  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  expanded,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  gamma,  original,  expanded,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    gamma,    original,    simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	38	None	replace
310	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  original.doubleValue();  if(comparator.compare(gamma,  expanded)  >=  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    >=    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
311	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  comparator,  original);  [CE]  cannot  find  symbol  relativeXML  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  comparator,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  comparator,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    comparator,    original);    	non-compiled	[CE]  cannot  find  symbol  relativeXML	80	None	replace
312	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  siblingx);  [CE]  cannot  find  symbol  siblingx  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  siblingx);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  siblingx);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    comparator,    original);    	non-compiled	[CE]  cannot  find  symbol  siblingx	80	None	replace
313	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  simplex,  comparator);  [CE]  cannot  find  symbol  relativeX  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  simplex,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  simplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeX,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeX	94	None	replace
314	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  original,  simplex);  [CE]  cannot  find  symbol  relativeX  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  original,  simplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  original,  simplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeX,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeX	94	None	replace
315	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  simplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  simplex);	  Comparator    comparator    =    best.compare(simplex,    comparison);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	89	None	replace
316	[BUG]  [BUGGY]  double  gamma  =  this.simplex.doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  this.simplex.doubleValue();  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  this.simplex.doubleValue();	  double    gamma    =    simplex.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
317	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  reflectedSimplex)  <  0;  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  reflectedSimplex)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  reflectedSimplex)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	56	None	replace
318	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  best,  simplex)  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  best,  simplex)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  best,  simplex)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	56	None	replace
319	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  khi)  <  0;  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  khi)  <  0;  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  khi)  <  0;	  double    gamma    =    comparator.compare(original,    best)    <    0;    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	56	None	replace
320	[BUG]  [BUGGY]  if(simplex.equals(original))  {  if(simplex!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex.equals(original))  {  if(simplex!=  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex.equals(original))  {  if(simplex!=  null)  {  return;  }	  if(expanded.equals(original))    {    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
321	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expanded.equals(original))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expanded.equals(original))  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expanded.equals(original))  {  return;  }	  if(expanded.equals(original))    {    if(simplex!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
322	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  khi,  best);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  khi,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  khi,  best);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
323	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  reflectedSimplex,  best);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  reflectedSimplex,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  reflectedSimplex,  best);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	13	None	replace
324	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  khi);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  khi);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  khi);	  double    gamma    =    comparator.compare(original,    best);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
325	[BUG]  [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  gamma,  comparator);  [CE]  cannot  find  symbol  relativex  [FE]    AssertionError    [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  gamma,  comparator);	  RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativex	109	None	replace
326	[BUG]  [BUGGY]  if(original!=  null)  {  if(comparator.compare(contracted,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(original!=  null)  {  if(comparator.compare(contracted,  best)  <  =  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(original!=  null)  {  if(comparator.compare(contracted,  best)  <  =  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
327	[BUG]  [BUGGY]  mutation  =  comparator.compare(contracted,  gamma)  <  0;  [CE]  cannot  find  symbol  mutation  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  mutation  =  comparator.compare(contracted,  gamma)  <  0;  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	mutation  =  comparator.compare(contracted,  gamma)  <  0;	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  mutation	43	None	replace
328	[BUG]  [BUGGY]  nisip  =  comparator.compare(contracted,  gamma)  <  0;  [CE]  cannot  find  symbol  nisip  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  nisip  =  comparator.compare(contracted,  gamma)  <  0;  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	nisip  =  comparator.compare(contracted,  gamma)  <  0;	  if(best!=    null)    {    if(comparator.compare(contracted,    best)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  nisip	43	None	replace
329	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflectedSimplex,  gamma,  original);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflectedSimplex,  gamma,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  reflectedSimplex,  gamma,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    gamma,    original);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	74	None	replace
330	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(relative,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(relative,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(relative,  expanded);	  RealPointValuePair    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
331	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(related,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(related,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(related,  expanded);	  RealPointValuePair    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	103	None	replace
332	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  best,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  best,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  best,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    expanded);    	non-compiled	[CE]  cannot  find  symbol  expanded	40	None	replace
333	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed!=  best)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed!=  best)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
334	[BUG]  [BUGGY]  if(expansed!=  best.getValue())  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  best.getValue())  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  best.getValue())  {  if(comparator.compare(expansed,  expanded)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
335	[BUG]  [BUGGY]  if(expansed!=  best.getValue())  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  best.getValue())  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  best.getValue())  {  if(comparator.compare(expansed,  simplex)  <  0)  {  return;  }	  if(expansed!=    best)    {    if(comparator.compare(expansed,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
336	[BUG]  [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded  ==  null)  {  if(comparator.compare(expanded,  expanded)  <  =  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
337	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(expanded,  extended)  <  =  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
338	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(original,  simplex)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(original,  simplex)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(original,  simplex)  <  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
339	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expanded.compare(original,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expanded.compare(original,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expanded.compare(original,  expanded)  <  0)  {  return;  }	  if(expanded!=    null)    {    if(comparator.compare(original,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
340	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  original,  reflectedSimplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	93	None	replace
341	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  original,  expanded);  [CE]  cannot  find  symbol  relative  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relative,  simplex,  original,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relative,    simplex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relative	93	None	replace
342	[BUG]  [BUGGY]  if(expansed  >  0.0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  >  0.0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  >  0.0)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
343	[BUG]  [BUGGY]  if(expansed  >  best)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  >  best)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  >  best)  {  if(comparator.compare(expansed,  best)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
344	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  <  RealPointValuePair>  best  =  comparator.compare(contracted,  original);	  Comparator    best    =    comparator.compare(contracted,    expanded);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	45	None	replace
345	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  reflected);  [CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  reflected);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  reflected,  reflected);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    reflected,    original);    	non-compiled	[CE]  method  evaluateNewSimplex  in  class  MultiDirectional  cannot  be  applied  to  given  types;	30	None	replace
346	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[best]);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[best]);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[best]);	  Double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  incompatible  types	71	None	replace
347	[BUG]  [BUGGY]  Double  gamma  =  comparator.compare(simplex,  first);  [CE]  cannot  find  symbol  first  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Double  gamma  =  comparator.compare(simplex,  first);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Double  gamma  =  comparator.compare(simplex,  first);	  Double    gamma    =    comparator.compare(simplex,    best);    	non-compiled	[CE]  cannot  find  symbol  first	71	None	replace
348	[BUG]  [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex  ==  null)  {  double  gamma  =  reflectedSimplex.doubleValue();  if(comparator.compare(gamma,  extended)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    extended)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
349	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)parameters.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)parameters.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)parameters.clone();	  RealPointValuePair    best    =(RealPointValuePair)comparator.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	60	None	replace
350	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  expanded,  comparator);  [CE]  cannot  find  symbol  relativeX  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeX,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(locale,    expanded,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeX	48	None	replace
351	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(comparator.compare(contracted,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
352	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(compare.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
353	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	5	None	replace
354	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  final  RealPointValuePair  best  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final    RealPointValuePair    best    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
355	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[best]);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[best]);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[best]);	  double    gamma    =    comparator.compare(singlex,    best);    	non-compiled	[CE]  incompatible  types	70	None	replace
356	[BUG]  [BUGGY]  if(comparator.compare(simplex,  expanded)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(comparator.compare(simplex,  expanded)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(comparator.compare(simplex,  expanded)  <  =  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(original,    expanded)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
357	[BUG]  [BUGGY]  if(simplex!=  null)  {  double  gamma  =  initial.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  double  gamma  =  initial.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  double  gamma  =  initial.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    double    gamma    =    original.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
358	[BUG]  [BUGGY]  if(relative)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(relative)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(relative)  {  if(comparator.compare(contracted,  best)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    original)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
359	[BUG]  [BUGGY]  if(relative)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(relative)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(relative)  {  if(comparator.compare(contracted,  original)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(contracted,    original)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
360	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  compiler,  original);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  compiler,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  compiler,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    original);    	non-compiled	[CE]  cannot  find  symbol  compiler	90	None	replace
361	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  uniquex);  [CE]  cannot  find  symbol  uniquex  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  uniquex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  original,  uniquex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    original,    sibling);    	non-compiled	[CE]  cannot  find  symbol  uniquex	1	None	replace
362	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  simplex,  comparator);  [CE]  cannot  find  symbol  relativex  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  simplex,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativex,  simplex,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativex,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativex	31	None	replace
363	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  reflectedSimplex);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  reflectedSimplex);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	41	None	replace
364	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  expanded);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(comparator,  simplex,  original,  expanded);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(comparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  expanded	41	None	replace
365	[BUG]  [BUGGY]  if(expansed!=  first)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  first)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  first)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
366	[BUG]  [BUGGY]  if(expansed  ==  first)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed  ==  first)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed  ==  first)  {  if(comparator.compare(expansed,  first)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
367	[BUG]  [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expansed!=  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expansed!=  null)  {  if(comparator.compare(first,  expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expansed,    first)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
368	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(expansed,  best);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(expansed,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  <  RealPointValuePair>  comparator  =  comparator.compare(expansed,  best);	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	8	None	replace
369	[BUG]  [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  if(expansed  >  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  if(expansed  >  0)  {  return;  }	  if(expansed    >    0)    {    if(comparator.compare(expansed,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
370	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(original,  simalx);  [CE]  cannot  find  symbol  simalx  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(original,  simalx);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(original,  simalx);	  double    gamma    =    comparator.compare(simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  simalx	25	None	replace
371	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(expanded)  <  0)  {  return;  }	  if(simplex!=    null)    {    if(comparator.compare(expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
372	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relative,  reflectedSimplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relative,  reflectedSimplex);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relative,  reflectedSimplex);	  Comparator    comparator    =    best.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	88	None	replace
373	[BUG]  [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  null)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }	  if(best!=    null)    {    if(comparator.compare(expanded,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
374	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  original);  [CE]  cannot  find  symbol  compressed  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  original);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  compressed,  original);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(relativeComparator,    simplex,    original);    	non-compiled	[CE]  cannot  find  symbol  compressed	92	None	replace
375	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[0]);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[0]);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  new  RealPointValuePair[0]);	  double    gamma    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	15	None	replace
376	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  raw);  [CE]  cannot  find  symbol  raw  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  raw);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  raw);	  double    gamma    =    comparator.compare(simplex,    expanded);    	non-compiled	[CE]  cannot  find  symbol  raw	15	None	replace
377	[BUG]  [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplx,  expanded);  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =  comparator.compare(simplx,  expanded);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =  comparator.compare(simplx,  expanded);	  RealPointValuePair    best    =    comparator.compare(simplex,    reflectedSimplex);    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	21	None	replace
378	[BUG]  [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)implemented.clone();  [CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  RealPointValuePair  best  =(RealPointValuePair)implemented.clone();  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	RealPointValuePair  best  =(RealPointValuePair)implemented.clone();	  RealPointValuePair    best    =(RealPointValuePair)super.clone();    	non-compiled	[CE]  variable  best  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	102	None	replace
379	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summary,  expanded,  comparator);  [CE]  cannot  find  symbol  summary  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(summary,  expanded,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(summary,  expanded,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(summary,    original,    comparator);    	non-compiled	[CE]  cannot  find  symbol  summary	42	None	replace
380	[BUG]  [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  gamma,  comparator);  [CE]  cannot  find  symbol  relativeXML  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  gamma,  comparator);  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	final  RealPointValuePair  contracted  =  evaluateNewSimplex(relativeXML,  gamma,  comparator);	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(reflected,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  relativeXML	50	None	replace
381	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(simplex,  new  RealPointValuePair[best.size()  ]);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                      AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(simplex,  new  RealPointValuePair[best.size()  ]);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(simplex,  new  RealPointValuePair[best.size()  ]);	  Comparator    comparator    =    best.compare(simplex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	34	None	replace
382	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [CE]  cannot  find  symbol  contracted  [FE]        AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  contracted	4	None	replace
383	[BUG]  [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [CE]  cannot  find  symbol  contracted  [FE]          AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  [BUGGY]      if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(simplex!=  null)  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }  else  {  final  RealPointValuePair  contracted  =  evaluateNewSimplex(simplex,  gamma,  comparator);  }	  final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    final    RealPointValuePair    contracted    =    evaluateNewSimplex(simplex,    gamma,    comparator);    	non-compiled	[CE]  cannot  find  symbol  contracted	4	None	replace
384	[BUG]  [BUGGY]  double  gamma  =  unit.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [CE]  cannot  find  symbol  unit  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  unit.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  unit.doubleValue();  if(comparator.compare(gamma,  expanded)  <  0)  {  return;  }	  double    gamma    =    reflectedSimplex.doubleValue();    if(comparator.compare(gamma,    expanded)    <    0)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  unit	58	None	replace
385	[BUG]  [BUGGY]  Comparator  comparator  =  best.compare(relativex,  comparison);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                    AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  Comparator  comparator  =  best.compare(relativex,  comparison);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	Comparator  comparator  =  best.compare(relativex,  comparison);	  Comparator    comparator    =    comparator.compare(relativex,    best);    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	33	None	replace
386	[BUG]  [BUGGY]  if(expanded.equals(original))  {  if(simplex  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded.equals(original))  {  if(simplex  ==  null)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded.equals(original))  {  if(simplex  ==  null)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
387	[BUG]  [BUGGY]  if(expanded!=  best)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded!=  best)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded!=  best)  {  if(comparator.compare(expanded,  expanded)  <  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expanded,    best)    <    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
388	[BUG]  [BUGGY]  if(expanded.equals(original))  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  if(expanded.equals(original))  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	if(expanded.equals(original))  {  if(comparator.compare(expanded,  best)  <  =  0)  {  return;  }	  if(simplex    ==    null)    {    if(comparator.compare(expanded,    best)    <    =    0)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
389	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  raw,  best);  [CE]  cannot  find  symbol  raw  [FE]                AssertionError      [CONTEXT]      if  (comparator.compare(reflected,  expanded)  <=  0)  {  simplex  =  reflectedSimplex;  }  return;  }        [BUGGY]  double  gamma  =  comparator.compare(simplex,  raw,  best);  [BUGGY]      final  RealPointValuePair  contracted  =  evaluateNewSimplex(original,  gamma,  comparator);  if  (comparator.compare(contracted,  best)  <  0)  {    return;  }  }  }  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	89	89	2	replace	double  gamma  =  comparator.compare(simplex,  raw,  best);	  double    gamma    =    comparator.compare(simplex,    expanded,    best);    	non-compiled	[CE]  cannot  find  symbol  raw	14	None	replace
