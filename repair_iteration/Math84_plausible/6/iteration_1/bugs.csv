bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];		non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	add
2	[BUG]  [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];		non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	add
3	[BUG]  [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length];  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length];		non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	add
4	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  comparator.getComparator();  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  comparator.getComparator();		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	add
5	[BUG]  [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    final  RealPointValuePair[]  original  =  new  RealPointValuePair[3];		non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	add
6	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  reflectedSimplex;  [CE]  cannot  find  symbol  reflectedSimplex  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]  final  RealPointValuePair[]  original  =  reflectedSimplex;  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  reflectedSimplex;	final  RealPointValuePair[]  original  =  simplex;  	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	11	None	replace
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]  final  RealPointValuePair[]  original  =  null;  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  null;	final  RealPointValuePair[]  original  =  simplex;  	compilable	  [FE]  NullPointerException  	11	4	replace
8	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  [FE]  NullPointerException  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]  final  RealPointValuePair[]  original  =  null;  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  null;	final  RealPointValuePair[]  original  =  simplex;  	compilable	  [FE]  NullPointerException  	11	4	replace
9	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator;  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]  final  RealPointValuePair[]  original  =  comparator;  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator;	final  RealPointValuePair[]  original  =  simplex;  	non-compiled	[CE]  incompatible  types	11	None	replace
10	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  0;  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]  final  RealPointValuePair[]  original  =  0;  [BUGGY]  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  0;	final  RealPointValuePair[]  original  =  simplex;  	non-compiled	[CE]  incompatible  types	11	None	replace
11	[BUG]  [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    Comparator  <  RealPointValuePair>  comparator  =  getComparator();  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    Comparator  <  RealPointValuePair>  comparator  =  getComparator();		non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	12	None	add
12	[BUG]  [BUGGY]    boolean  gamma  =  comparator.compare(simplex,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    boolean  gamma  =  comparator.compare(simplex,  1.0);  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    boolean  gamma  =  comparator.compare(simplex,  1.0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	add
13	[BUG]  [BUGGY]    boolean  gamma  =  comparator.compare(simplex,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    boolean  gamma  =  comparator.compare(simplex,  0.0);  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    boolean  gamma  =  comparator.compare(simplex,  0.0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	add
14	[BUG]  [BUGGY]    double  gamma  =  comparator.compare(simplex);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    double  gamma  =  comparator.compare(simplex);  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    double  gamma  =  comparator.compare(simplex);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	add
15	[BUG]  [BUGGY]    double  gamma  =  comparator.compare(simplex,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();    [BUGGY]    double  gamma  =  comparator.compare(simplex,  1.0);  [BUGGY]  final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	    double  gamma  =  comparator.compare(simplex,  1.0);		non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	add
