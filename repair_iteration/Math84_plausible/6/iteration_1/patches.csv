bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  1.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  1.0,  1.0);	      boolean    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	replace
2	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];	  final    RealPointValuePair[]    original    =    null;    	compilable	  [FE]  NullPointerException  	8	4	replace
3	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[2];	  final    RealPointValuePair[]    original    =    null;    	compilable	  [FE]  NullPointerException  	8	4	replace
4	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  original);  [CE]  cannot  find  symbol  original  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  original);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  original);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  original	14	None	replace
5	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  reflectedSimplex);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  reflectedSimplex);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	14	None	replace
6	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  dim);  [CE]  cannot  find  symbol  dim  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  dim);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  dim);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  dim	14	None	replace
7	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  siplex);  [CE]  cannot  find  symbol  siplex  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  siplex);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  siplex);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  siplex	14	None	replace
8	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  original  =  null;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  original  =  null;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    null;    final  RealPointValuePair[]  original  =  null;	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	add
9	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]      NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    null;    final  RealPointValuePair[]  original  =  new  RealPointValuePair[0];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	add
10	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    null;    final  RealPointValuePair[]  original  =  new  RealPointValuePair[1];	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	add
11	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  Final  RealPointValuePair[]  original  =  null;  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  null;  Final  RealPointValuePair[]  original  =  null;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    null;    Final  RealPointValuePair[]  original  =  null;	  	non-compiled	[CE]  ';'  expected	7	None	add
12	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[relativeSimplex.length];  [CE]  cannot  find  symbol  relativeSimplex  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[relativeSimplex.length];  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[relativeSimplex.length];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length];    	non-compiled	[CE]  cannot  find  symbol  relativeSimplex	3	None	replace
13	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  best.getComparator();  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  best.getComparator();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
14	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(original);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
15	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]                  AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(simplex);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  iterateSimplex(simplex);	      Comparator    <    RealPointValuePair>    comparator    =    comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
16	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  0.0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  0.0,  0.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  0.0,  0.0);	      boolean    gamma    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
17	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  0.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  1.0,  0.0);	      boolean    gamma    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
18	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  0.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  0.0,  1.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  0.0,  1.0);	      boolean    gamma    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
19	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(simplex);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(simplex);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(simplex);	      Comparator    <    RealPointValuePair>    comparator    =    getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
20	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(0);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(0);	      Comparator    <    RealPointValuePair>    comparator    =    getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
21	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(original);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(original);	      Comparator    <    RealPointValuePair>    comparator    =    getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
22	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  1.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  1.0);	      double    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	15	None	replace
23	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  reflectedSimplex);  [CE]  cannot  find  symbol  reflectedSimplex  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  reflectedSimplex);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  reflectedSimplex);	      double    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  reflectedSimplex	15	None	replace
24	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  Simplex;  [CE]  cannot  find  symbol  Simplex  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  Simplex;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  Simplex;	  final    RealPointValuePair[]    original    =    reflectedSimplex;    	non-compiled	[CE]  cannot  find  symbol  Simplex	6	None	replace
25	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  simplifiedx;  [CE]  cannot  find  symbol  simplifiedx  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  simplifiedx;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  simplifiedx;	  final    RealPointValuePair[]    original    =    reflectedSimplex;    	non-compiled	[CE]  cannot  find  symbol  simplifiedx	6	None	replace
26	[BUG]  [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  true);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  boolean  gamma  =  comparator.compare(simplex,  1.0,  true);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	boolean  gamma  =  comparator.compare(simplex,  1.0,  true);	      boolean    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	12	None	replace
27	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(null);  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  getComparator(null);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  getComparator(null);	      Comparator    <    RealPointValuePair>    comparator    =    getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	11	None	replace
28	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator.cloneTree();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  comparator.cloneTree();  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator.cloneTree();	  final    RealPointValuePair[]    original    =    comparator;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
29	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  0);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  comparator,  0);  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator,  0);	  final    RealPointValuePair[]    original    =    comparator;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
30	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  0.0);  [CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  0.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  0.0);	      boolean    gamma    =    comparator.compare(simplex,    0.0);    	non-compiled	[CE]  method  compare  in  interface  Comparator<T>  cannot  be  applied  to  given  types;	13	None	replace
31	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  best);  [CE]  cannot  find  symbol  best  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  best);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  best);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  best	14	None	replace
32	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  first);  [CE]  cannot  find  symbol  first  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  first);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  first);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  first	14	None	replace
33	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  expanded);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  expanded);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  expanded	14	None	replace
34	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simpleX,  1.0);  [CE]  cannot  find  symbol  simpleX  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simpleX,  1.0);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simpleX,  1.0);	      double    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  simpleX	15	None	replace
35	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  expanded);  [CE]  cannot  find  symbol  expanded  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  expanded);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  expanded);	      double    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  expanded	15	None	replace
36	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  0L;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  0L;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  0L;	  final    RealPointValuePair[]    original    =    0;    	non-compiled	[CE]  incompatible  types	10	None	replace
37	[BUG]  [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator();  [CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator();  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	Comparator  <  RealPointValuePair>  comparator  =  this.comparator.getComparator();	      Comparator    <    RealPointValuePair>    comparator    =    comparator.getComparator();    	non-compiled	[CE]  variable  comparator  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	4	None	replace
38	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  initial  =  null;  [CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)  [FE]    NullPointerException    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  null;  final  RealPointValuePair[]  initial  =  null;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final    RealPointValuePair[]    original    =    null;    final  RealPointValuePair[]  initial  =  null;	  	non-compiled	[CE]  variable  original  is  already  defined  in  method  iterateSimplex(Comparator<RealPointValuePair>)	7	None	add
39	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length];    	compilable	  [FE]  NullPointerException  	3	4	replace
40	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [FE]  NullPointerException  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  -  1];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length];    	compilable	  [FE]  NullPointerException  	3	4	replace
41	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	add	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length];    	compilable	  [FE]  NullPointerException  	3	4	replace
42	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [FE]  NullPointerException  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  new  RealPointValuePair[simplex.length  +  1];	      final    RealPointValuePair[]    original    =    new    RealPointValuePair[simplex.length];    	compilable	  [FE]  NullPointerException  	3	4	replace
43	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  comparator.getRawComparator();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  comparator.getRawComparator();  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  comparator.getRawComparator();	  final    RealPointValuePair[]    original    =    comparator;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
44	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  best);  [CE]  cannot  find  symbol  best  [FE]              AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  best);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  best);	      double    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  best	15	None	replace
45	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  original);  [CE]  cannot  find  symbol  original  [FE]                AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  1.0,  original);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  1.0,  original);	      double    gamma    =    comparator.compare(simplex,    1.0);    	non-compiled	[CE]  cannot  find  symbol  original	15	None	replace
46	[BUG]  [BUGGY]  final  RealPointValuePair[]  original  =  uniquex;  [CE]  cannot  find  symbol  uniquex  [FE]        AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  final  RealPointValuePair[]  original  =  uniquex;  [BUGGY]    final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	final  RealPointValuePair[]  original  =  uniquex;	  final    RealPointValuePair[]    original    =    reflectedSimplex;    	non-compiled	[CE]  cannot  find  symbol  uniquex	6	None	replace
47	[BUG]  [BUGGY]  double  gamma  =  comparator.compare(simplex,  maximum);  [CE]  cannot  find  symbol  maximum  [FE]            AssertionError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException,  IllegalArgumentException  {  while  (true)  {  incrementIterationsCounter();      [BUGGY]  double  gamma  =  comparator.compare(simplex,  maximum);  [BUGGY]    final  RealPointValuePair[]  original  =  simplex;  final  RealPointValuePair  best  =  original[0];  final  RealPointValuePair  reflected  =  evaluateNewSimplex(original,  1.0,  comparator);  if  (comparator.compare(reflected,  best)  <  0)  {  final  RealPointValuePair[]  reflectedSimplex  =  simplex;  final  RealPointValuePair  expanded  =  evaluateNewSimplex(original,  khi,  comparator);  if  (comparator.compare(reflected,  expanded)  <=  0)  {  [CLASS]  MultiDirectional  [METHOD]  iterateSimplex  [RETURN_TYPE]  void  RealPointValuePair>  comparator  [VARIABLES]  RealPointValuePair  best  contracted  expanded  reflected  boolean  double  gamma  khi  RealPointValuePair[]  original  reflectedSimplex  Comparator  comparator  	projects/Math84/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java	0.7071067811865475	69	69	2	replace	double  gamma  =  comparator.compare(simplex,  maximum);	      double    gamma    =    comparator.compare(simplex);    	non-compiled	[CE]  cannot  find  symbol  maximum	14	None	replace
