bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option,  value,  expectedOpts);  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(option,  value,  expectedOpts);	  Option    opt    =    options.getOption(option,    value);    	non-compiled	[CE]  ')'  expected	86	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  properties.getProperty(option);  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  properties.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt);  String  value  =  properties.getProperty(option);	  Option    cmd    =    options.getOption(opt);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ')'  expected	35	None	replace
3	[BUG]  [BUGGY]  String  value  =  options.getStringValue(value);  [CE]  ')'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getStringValue(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getStringValue(value);	  String    value    =    options.getStringValue(option);    	non-compiled	[CE]  ')'  expected	76	None	replace
4	[BUG]  [BUGGY]  String  value  =  properties.getStringValue(option);  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getStringValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getStringValue(option);	  String    value    =    options.getStringValue(option);    	non-compiled	[CE]  ')'  expected	76	None	replace
5	[BUG]  [BUGGY]  String  value  =  options.getStringValue(option)+  1;  [CE]  ')'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getStringValue(option)+  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getStringValue(option)+  1;	  String    value    =    options.getStringValue(option);    	non-compiled	[CE]  ')'  expected	76	None	replace
6	[BUG]  [BUGGY]  if(opt.hasValueForProcessing(value)||  opt.hasValueForProcessing(value))  {  [CE]  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasValueForProcessing(value)||  opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasValueForProcessing(value)||  opt.hasValueForProcessing(value))  {	  if(opt.hasProperty(value)||    opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  	59	None	replace
7	[BUG]  [BUGGY]  if(option.hasProperty(value)||  opt.hasValueForProcessing(value))  {  [CE]  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasProperty(value)||  opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasProperty(value)||  opt.hasValueForProcessing(value))  {	  if(opt.hasProperty(value)||    opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  	59	None	replace
8	[BUG]  [BUGGY]  if(opt.hasProperty(value)&&  opt.hasValueForProcessing(value))  {  [CE]  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasProperty(value)&&  opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasProperty(value)&&  opt.hasValueForProcessing(value))  {	  if(opt.hasProperty(value)||    opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  	59	None	replace
9	[BUG]  [BUGGY]  if(option.hasValue()  ||  value.length()  ==  0)  {  [CE]  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasValue()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasValue()  ||  value.length()  ==  0)  {	  if(option.hasValue())    {    	non-compiled	[CE]  	30	None	replace
10	[BUG]  [BUGGY]  if(value!=  null  &&  option.hasValue())  {  [CE]  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  option.hasValue())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  option.hasValue())  {	  if(option.hasValue())    {    	non-compiled	[CE]  	30	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =  cmd.getOption(option);  [CE]  ')'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  cmd.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  cmd.getOption(option);	  Option    cmd    =    properties.getOption(option);    	non-compiled	[CE]  ')'  expected	5	None	replace
12	[BUG]  [BUGGY]  Option  cmd  =  properties.getOption(value);  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  properties.getOption(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  properties.getOption(value);	  Option    cmd    =    properties.getOption(option);    	non-compiled	[CE]  ')'  expected	5	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  properties.getProperty(option).toString();  [CE]  ')'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  properties.getProperty(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt);  String  value  =  properties.getProperty(option).toString();	  Option    option    =    options.getOption(option);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  [CE]  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();	  Option    option    =    options.getOption(option);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  ')'  expected	64	None	replace
16	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  return;  }  [CE]  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option);  if(cmd  ==  null)  {  return;  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  	64	None	replace
17	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getProperty(option);  [CE]  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getProperty(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  	48	None	replace
18	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getValueForProcessing(value);  [CE]  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getValueForProcessing(value);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  	48	None	replace
19	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(opt);  String  value  =  options.getProperty(option);  [CE]  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(opt);  String  value  =  options.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(opt);  String  value  =  options.getProperty(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  	48	None	replace
20	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  cmd.getOption(option);  String  value  =  options.getProperty(option);  [CE]  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  cmd.getOption(option);  String  value  =  options.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  cmd.getOption(option);  String  value  =  options.getProperty(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  	48	None	replace
21	[BUG]  [BUGGY]  if(option.hasValues()  ||  value.length()  ==  0)  {  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasValues()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasValues()  ||  value.length()  ==  0)  {	  if(option.hasValues())    {    	non-compiled	[CE]  ')'  expected	25	None	replace
22	[BUG]  [BUGGY]  if(option.hasValues()  ||  value.length()!=  0)  {  [CE]  ')'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasValues()  ||  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasValues()  ||  value.length()!=  0)  {	  if(option.hasValues())    {    	non-compiled	[CE]  ')'  expected	25	None	replace
23	[BUG]  [BUGGY]  if(value!=  null  &&  value.length()  >  0)  {  [CE]  ')'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  value.length()  >  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  value.length()  >  0)  {	  if(value!=    null    &&    value.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
24	[BUG]  [BUGGY]  if(opt.getValues()!=  null  ||  value.length()  ==  0)  {  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.getValues()!=  null  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.getValues()!=  null  ||  value.length()  ==  0)  {	  if(opt.getValues()    ==    null)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
25	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(option,  value,  expectedOpts);  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(option,  value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(option,  value,  expectedOpts);	  Enumeration    e    =    options.getEnumeration(option,    value);    	non-compiled	[CE]  ')'  expected	2	None	replace
26	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  opt);  [CE]  ')'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(value,  opt);	  Enumeration    e    =    options.getEnumeration(option,    value);    	non-compiled	[CE]  ')'  expected	2	None	replace
27	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  option);  [CE]  ')'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(value,  option);	  Enumeration    e    =    options.getEnumeration(option,    value);    	non-compiled	[CE]  ')'  expected	2	None	replace
28	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(opt,  value);  [CE]  ';'  expected  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(opt,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(opt,  value);	  Enumeration    e    =    options.getEnumeration(option,    value);    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option,  value,  expectedOpts);  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option,  value,  expectedOpts);	  Enumeration    <    Option>    opt    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	67	None	replace
30	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option,  value,  currentToken);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option,  value,  currentToken);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option,  value,  currentToken);	  Enumeration    <    Option>    opt    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	67	None	replace
31	[BUG]  [BUGGY]  Enumeration  e  =  options.getOption(value);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getOption(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getOption(value);	  Enumeration    e    =    options.getOptions();    	non-compiled	[CE]  ';'  expected	65	None	replace
32	[BUG]  [BUGGY]  Enumeration  e  =  options.getOption(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getOption(option);	  Enumeration    e    =    options.getOptions();    	non-compiled	[CE]  ';'  expected	65	None	replace
33	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(opt);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(opt);	  Enumeration    <    Option>    opt    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	20	None	replace
34	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(value);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(value);	  Enumeration    <    Option>    opt    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	20	None	replace
35	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  currentOption.getOption(option);  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  currentOption.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  currentOption.getOption(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    	non-compiled	[CE]  ';'  expected	19	None	replace
36	[BUG]  [BUGGY]  String  value  =  options.getProperty(option).toString();  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getProperty(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getProperty(option).toString();	  String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	7	None	replace
37	[BUG]  [BUGGY]  String  value  =  properties.getProperty(option)+ ".toString();  [CE]  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getProperty(option)+ ".toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getProperty(option)+ ".toString();	  String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  String  value  =  properties.getProperty(option),  value.toString();  [CE]  ';'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getProperty(option),  value.toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getProperty(option),  value.toString();	  String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	7	None	replace
39	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  cmd.getOption(option);  String  value  =  properties.getProperty(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  cmd.getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  cmd.getOption(option);  String  value  =  properties.getProperty(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	84	None	replace
40	[BUG]  [BUGGY]  Option  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	84	None	replace
41	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)/  value;  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option)/  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option)/  value;	  Option    cmd    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	75	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  value  +  1;  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option)+  value  +  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option)+  value  +  1;	  Option    cmd    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	75	None	replace
43	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  value  -  1;  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option)+  value  -  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option)+  value  -  1;	  Option    cmd    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	75	None	replace
44	[BUG]  [BUGGY]  if(option!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }	  Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  ')'  expected	85	None	replace
45	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }  [CE]  ')'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }	  Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  ')'  expected	85	None	replace
46	[BUG]  [BUGGY]  if(option!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }  [CE]  ')'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }	  Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  ')'  expected	85	None	replace
47	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  value.length()  ==  0)  {  [CE]  ')'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  value.length()  ==  0)  {	  if(value.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  value);  [CE]  ')'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt,  value);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  ')'  expected	50	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value);  [CE]  <identifier>  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
50	[BUG]  [BUGGY]  Option  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(value);  [CE]  <identifier>  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(value);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
51	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  currentToken);  [CE]  <identifier>  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  currentToken);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  currentToken);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
52	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  String  value  =  properties.getProperty(value).toString();  [CE]  ')'  expected  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(opt);  String  value  =  properties.getProperty(value).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(opt);  String  value  =  properties.getProperty(value).toString();	  Option    cmd    =    options.getOption(opt);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ')'  expected	10	None	replace
53	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(opt);  String  value  =  properties.getProperty(option);  [CE]  ')'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(opt);  String  value  =  properties.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(opt);  String  value  =  properties.getProperty(option);	  Enumeration    <    Option>    opt    =    options.getOption(value);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ')'  expected	54	None	replace
54	[BUG]  [BUGGY]  if(option.hasValueForProcessing(value))  {  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasValueForProcessing(value))  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
55	[BUG]  [BUGGY]  if(opt.hasValueForProcessing(value)||  value.length()  ==  0)  {  [CE]  ')'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasValueForProcessing(value)||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasValueForProcessing(value)||  value.length()  ==  0)  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
56	[BUG]  [BUGGY]  if(cmd.hasValueForProcessing(value))  {  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd.hasValueForProcessing(value))  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
57	[BUG]  [BUGGY]  if(opt.hasValueForProcessing(value)||  value.startsWith( "true "))  {  [CE]  ')'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasValueForProcessing(value)||  value.startsWith( "true "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasValueForProcessing(value)||  value.startsWith( "true "))  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
58	[BUG]  [BUGGY]  String  value  =  options.getValue(value);  [CE]  ')'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValue(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValue(value);	  String    value    =    options.getValue(option);    	non-compiled	[CE]  ')'  expected	60	None	replace
59	[BUG]  [BUGGY]  String  value  =  options.getValue(option)+  1;  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValue(option)+  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValue(option)+  1;	  String    value    =    options.getValue(option);    	non-compiled	[CE]  ')'  expected	60	None	replace
60	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  option.hasArg()  ||  value.length()  ==  0)  {  [CE]  ')'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  option.hasArg()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  option.hasArg()  ||  value.length()  ==  0)  {	  if(option.hasArg()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
61	[BUG]  [BUGGY]  if(value.hasArg()  ||  value.length()  ==  0)  {  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.hasArg()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.hasArg()  ||  value.length()  ==  0)  {	  if(option.hasArg()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
62	[BUG]  [BUGGY]  if(value!=  null  ||  value.trim().length()  ==  0)  {  [CE]  ')'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  ||  value.trim().length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  ||  value.trim().length()  ==  0)  {	  if(opt.hasValue()    ||    value.trim().length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
63	[BUG]  [BUGGY]  if(value  ==  null  ||  value.trim().length()  ==  0)  {  [CE]  ')'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value  ==  null  ||  value.trim().length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value  ==  null  ||  value.trim().length()  ==  0)  {	  if(opt.hasValue()    ||    value.trim().length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
64	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  opt.hasValue()  ||  value.trim().length()  ==  0)  {  [CE]  ')'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  opt.hasValue()  ||  value.trim().length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  opt.hasValue()  ||  value.trim().length()  ==  0)  {	  if(opt.hasValue()    ||    value.trim().length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
65	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  value.trim().length()  ==  0)  {  [CE]  ')'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  value.trim().length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  value.trim().length()  ==  0)  {	  if(opt.hasValue()    ||    value.trim().length()    ==    0)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
66	[BUG]  [BUGGY]  e.printStackTrace(value);  [CE]  ')'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  e.printStackTrace(value);  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	e.printStackTrace(value);	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	36	None	replace
67	[BUG]  [BUGGY]  if(cmd.hasOption(option))  {  e.printStackTrace();  }  [CE]  ')'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd.hasOption(option))  {  e.printStackTrace();  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd.hasOption(option))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	36	None	replace
68	[BUG]  [BUGGY]  if(cmd.hasOption(opt))  {  e.printStackTrace();  }  [CE]  ')'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd.hasOption(opt))  {  e.printStackTrace();  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd.hasOption(opt))  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  ')'  expected	36	None	replace
69	[BUG]  [BUGGY]  Enumeration  e  =  cmd.getEnumeration(value);  [CE]  ')'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  cmd.getEnumeration(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  cmd.getEnumeration(value);	  Enumeration    e    =    cmd.getEnumeration(option);    	non-compiled	[CE]  ')'  expected	3	None	replace
70	[BUG]  [BUGGY]  Enumeration  e  =  cmd.getEnumeration(option,  value);  [CE]  ')'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  cmd.getEnumeration(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  cmd.getEnumeration(option,  value);	  Enumeration    e    =    cmd.getEnumeration(option);    	non-compiled	[CE]  ')'  expected	3	None	replace
71	[BUG]  [BUGGY]  Enumeration  <?>  e  =  cmd.getEnumeration(option);  [CE]  ')'  expected  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  cmd.getEnumeration(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  cmd.getEnumeration(option);	  Enumeration    e    =    cmd.getEnumeration(option);    	non-compiled	[CE]  ')'  expected	3	None	replace
72	[BUG]  [BUGGY]  if(value!=  null  ||  value.length()!=  0)  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  ||  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  ||  value.length()!=  0)  {	  if(opt.hasValue()    ||    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
73	[BUG]  [BUGGY]  if(value.length()!=  0  ||  opt.hasValue()  ||  value.length()!=  0)  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()!=  0  ||  opt.hasValue()  ||  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()!=  0  ||  opt.hasValue()  ||  value.length()!=  0)  {	  if(opt.hasValue()    ||    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
74	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()!=  0)  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value  ==  null  ||  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value  ==  null  ||  value.length()!=  0)  {	  if(opt.hasValue()    ||    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
75	[BUG]  [BUGGY]  if(value.length()!=  0)  {  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()!=  0)  {	  if(opt.hasValue()    ||    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
76	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(opt,  value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(opt,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(opt,  value);	  Option    currentOption    =    options.getOption(opt);    	non-compiled	[CE]  ';'  expected	33	None	replace
77	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	89	None	replace
78	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option,  value);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option,  value);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	89	None	replace
79	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option,  value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option,  value);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	89	None	replace
80	[BUG]  [BUGGY]  Enumeration  <?>  e  =  options.getEnumeration(value);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  options.getEnumeration(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  options.getEnumeration(value);	  Enumeration    <?>    e    =    options.getEnumeration();    	non-compiled	[CE]  ';'  expected	18	None	replace
81	[BUG]  [BUGGY]  Enumeration  <?>  e  =  properties.getEnumeration();  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  properties.getEnumeration();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  properties.getEnumeration();	  Enumeration    <?>    e    =    options.getEnumeration();    	non-compiled	[CE]  ';'  expected	18	None	replace
82	[BUG]  [BUGGY]  Enumeration  <?>  e  =  opt.getEnumeration();  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  opt.getEnumeration();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  opt.getEnumeration();	  Enumeration    <?>    e    =    options.getEnumeration();    	non-compiled	[CE]  ';'  expected	18	None	replace
83	[BUG]  [BUGGY]  if(value.equals(opt.getProperty(value)||  value.equals( "true "))  {  [CE]  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.equals(opt.getProperty(value)||  value.equals( "true "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.equals(opt.getProperty(value)||  value.equals( "true "))  {	  if(opt.hasProperty(value)||    value.equals(   "true   "))    {    	non-compiled	[CE]  	40	None	replace
84	[BUG]  [BUGGY]  if(opt.hasProperty(value)||  value.equals( "false "))  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasProperty(value)||  value.equals( "false "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasProperty(value)||  value.equals( "false "))  {	  if(opt.hasProperty(value)||    value.equals(   "true   "))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
85	[BUG]  [BUGGY]  if(value.equals( "true ")||  value.equals( "false "))  {  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.equals( "true ")||  value.equals( "false "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.equals( "true ")||  value.equals( "false "))  {	  if(opt.hasProperty(value)||    value.equals(   "true   "))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
86	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option,  value,  expectedOpts);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(option,  value,  expectedOpts);	  Option    currentOption    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	34	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  opt);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(value,  opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(value,  opt);	  Option    currentOption    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	34	None	replace
88	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValue(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValue(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	47	None	replace
89	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValue(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValue(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	47	None	replace
90	[BUG]  [BUGGY]  if(value!=  null  ||  value.length()  ==  0  ||  opt.hasArg()  ||  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  ||  value.length()  ==  0  ||  opt.hasArg()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  ||  value.length()  ==  0  ||  opt.hasArg()  ||  value.length()  ==  0)  {	  if(value.length()    ==    0    ||    opt.hasArg()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
91	[BUG]  [BUGGY]  if(value  ==  null  ||  value.length()  ==  0  ||  opt.hasArg()  ||  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value  ==  null  ||  value.length()  ==  0  ||  opt.hasArg()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value  ==  null  ||  value.length()  ==  0  ||  opt.hasArg()  ||  value.length()  ==  0)  {	  if(value.length()    ==    0    ||    opt.hasArg()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
92	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  opt.hasArg()  &&  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  opt.hasArg()  &&  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  opt.hasArg()  &&  value.length()  ==  0)  {	  if(value.length()    ==    0    ||    opt.hasArg()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
93	[BUG]  [BUGGY]  Enumeration  <?>  e  =  properties.getEnumeration(option);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  properties.getEnumeration(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  properties.getEnumeration(option);	  Enumeration    <?>    e    =    options.getEnumeration(option);    	non-compiled	[CE]  ';'  expected	90	None	replace
94	[BUG]  [BUGGY]  Enumeration  <?>  e  =  options.getEnumeration(option,  value);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  options.getEnumeration(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  options.getEnumeration(option,  value);	  Enumeration    <?>    e    =    options.getEnumeration(option);    	non-compiled	[CE]  ';'  expected	90	None	replace
95	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  value);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(value,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(value,  value);	  Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	32	None	replace
96	[BUG]  [BUGGY]  if(value!=  null  ||  value.startsWith( "- "))  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  ||  value.startsWith( "- "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  ||  value.startsWith( "- "))  {	  if(opt.hasValue()    ||    value.startsWith(   "-   "))    {    	non-compiled	[CE]  ';'  expected	88	None	replace
97	[BUG]  [BUGGY]  if(value.startsWith( "- "))  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.startsWith( "- "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.startsWith( "- "))  {	  if(opt.hasValue()    ||    value.startsWith(   "-   "))    {    	non-compiled	[CE]  ';'  expected	88	None	replace
98	[BUG]  [BUGGY]  if(value  ==  null  ||  value.startsWith( "- "))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value  ==  null  ||  value.startsWith( "- "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value  ==  null  ||  value.startsWith( "- "))  {	  if(opt.hasValue()    ||    value.startsWith(   "-   "))    {    	non-compiled	[CE]  ';'  expected	88	None	replace
99	[BUG]  [BUGGY]  if(value!=  null  &&  value.startsWith( "- "))  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  value.startsWith( "- "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  value.startsWith( "- "))  {	  if(opt.hasValue()    ||    value.startsWith(   "-   "))    {    	non-compiled	[CE]  ';'  expected	88	None	replace
100	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValue(option);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getValue(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	13	None	replace
101	[BUG]  [BUGGY]  Option  opt  =  properties.getOption(option);  String  value  =  options.getValue(option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  properties.getOption(option);  String  value  =  options.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  properties.getOption(option);  String  value  =  options.getValue(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	13	None	replace
102	[BUG]  [BUGGY]  if(opt.hasArg()  ||  value.length()!=  0)  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasArg()  ||  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasArg()  ||  value.length()!=  0)  {	  if(opt.hasArg()    &&    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
103	[BUG]  [BUGGY]  if(option.hasArg()  ||  value.length()!=  0)  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasArg()  ||  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasArg()  ||  value.length()!=  0)  {	  if(opt.hasArg()    &&    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
104	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(value);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  ';'  expected	49	None	replace
105	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValueForProcessing(value);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValueForProcessing(value);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  ';'  expected	49	None	replace
106	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  currentToken);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  currentToken);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  currentToken);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  ';'  expected	49	None	replace
107	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option,  value);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option,  value);	  Option    option    =    options.getOption(option);    String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	73	None	replace
108	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  options.getValueForProcessing(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  options.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt);  String  value  =  options.getValueForProcessing(option);	  Option    option    =    options.getOption(option);    String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	73	None	replace
109	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option,  expectedOpts);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option,  expectedOpts);	  Option    option    =    options.getOption(option);    String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	73	None	replace
110	[BUG]  [BUGGY]  String  value  =  cmd.getValue(option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  cmd.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  cmd.getValue(option);	  String    value    =    cmd.getProperty(option);    	non-compiled	[CE]  ';'  expected	42	None	replace
111	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  e.getOption(option);	  Enumeration    <    Option>    opt    =    cmd.getOption(option);    	non-compiled	[CE]  ';'  expected	21	None	replace
112	[BUG]  [BUGGY]  if(value!=  null  &&  cmd.hasProperty(value))  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  cmd.hasProperty(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  cmd.hasProperty(value))  {	  if(cmd.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	37	None	replace
113	[BUG]  [BUGGY]  if(!cmd.hasProperty(value))  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(!cmd.hasProperty(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(!cmd.hasProperty(value))  {	  if(cmd.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	37	None	replace
114	[BUG]  [BUGGY]  if(option.hasProperty(value))  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasProperty(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasProperty(value))  {	  if(cmd.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	37	None	replace
115	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  cmd.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  cmd.getOption(option);	  Option    option    =    properties.getOption(option);    	non-compiled	[CE]  ';'  expected	80	None	replace
116	[BUG]  [BUGGY]  Option  option  =  properties.getOption(value);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  properties.getOption(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  properties.getOption(value);	  Option    option    =    properties.getOption(option);    	non-compiled	[CE]  ';'  expected	80	None	replace
117	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)+  value  +  1;  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option)+  value  +  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option)+  value  +  1;	  Option    option    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	91	None	replace
118	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt)+  value;  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt)+  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt)+  value;	  Option    option    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	91	None	replace
119	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)/  value;  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option)/  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option)/  value;	  Option    option    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	91	None	replace
120	[BUG]  [BUGGY]  String  value  =  options.getValueForProcessing(opt);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValueForProcessing(opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValueForProcessing(opt);	  String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	61	None	replace
121	[BUG]  [BUGGY]  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getValueForProcessing(option);	  String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	61	None	replace
122	[BUG]  [BUGGY]  String  value  =  options.getValueForProcessing(option,  expectedOpts);  [CE]  ';'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValueForProcessing(option,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValueForProcessing(option,  expectedOpts);	  String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	61	None	replace
123	[BUG]  [BUGGY]  Option  cmd  =  properties.getOption(opt);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  properties.getOption(opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  properties.getOption(opt);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  ';'  expected	6	None	replace
124	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(opt);	  Option    opt    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	45	None	replace
125	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  opt.hasValues()  ||  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  opt.hasValues()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  opt.hasValues()  ||  value.length()  ==  0)  {	  if(opt.hasValues()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
126	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  expectedOpts);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option,  value,  expectedOpts);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
127	[BUG]  [BUGGY]  if(value.length()  ==  0  ||  opt.hasValue()  ||  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value.length()  ==  0  ||  opt.hasValue()  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value.length()  ==  0  ||  opt.hasValue()  ||  value.length()  ==  0)  {	  if(opt.hasValue()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
128	[BUG]  [BUGGY]  if(cmd.hasArg()  &&  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd.hasArg()  &&  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd.hasArg()  &&  value.length()  ==  0)  {	  if(option.hasArg()    &&    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
129	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getStringValue(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getStringValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getStringValue(option);	  Option    option    =    options.getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	12	None	replace
130	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  options.getProperty(option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  options.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt);  String  value  =  options.getProperty(option);	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  ';'  expected	70	None	replace
131	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(option,  value);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getProperty(option,  value);	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  ';'  expected	70	None	replace
132	[BUG]  [BUGGY]  Option  cmd  =  options.getCmd(value);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getCmd(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getCmd(value);	  Option    cmd    =    options.getCmd(option);    	non-compiled	[CE]  ';'  expected	56	None	replace
133	[BUG]  [BUGGY]  Option  cmd  =  properties.getCmd(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  properties.getCmd(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  properties.getCmd(option);	  Option    cmd    =    options.getCmd(option);    	non-compiled	[CE]  ';'  expected	56	None	replace
134	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  value);  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(value,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(value,  value);	  Option    cmd    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	4	None	replace
135	[BUG]  [BUGGY]  String  value  =  properties.getValue(option,  expectedOpts);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getValue(option,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getValue(option,  expectedOpts);	  String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	43	None	replace
136	[BUG]  [BUGGY]  String  value  =  properties.getValue(option)+  1;  [CE]  ';'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getValue(option)+  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getValue(option)+  1;	  String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	43	None	replace
137	[BUG]  [BUGGY]  if(option.hasOption(opt))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasOption(opt))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasOption(opt))  {	  if(cmd.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	26	None	replace
138	[BUG]  [BUGGY]  if(opt.hasOption(value))  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasOption(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasOption(value))  {	  if(cmd.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	26	None	replace
139	[BUG]  [BUGGY]  if(!cmd.hasOption(opt))  {  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(!cmd.hasOption(opt))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(!cmd.hasOption(opt))  {	  if(cmd.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	26	None	replace
140	[BUG]  [BUGGY]  if(opt!=  null  ||  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null  ||  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null  ||  value.length()  ==  0)  {	  if(opt!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
141	[BUG]  [BUGGY]  if(cmd.hasOption(option))  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(option).toString();  }  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd.hasOption(option))  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(option).toString();  }  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd.hasOption(option))  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(option).toString();  }	  Option    cmd    =    options.getOption(value);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	71	None	replace
142	[BUG]  [BUGGY]  Option  option  =  properties.getOption(option);  String  value  =  options.getProperty(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  properties.getOption(option);  String  value  =  options.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  properties.getOption(option);  String  value  =  options.getProperty(option);	  Option    option    =    options.getOption(cmd);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	11	None	replace
143	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  options.getValueForProcessing(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	83	None	replace
144	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValueForProcessing(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	83	None	replace
145	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  e.getOption();  String  value  =  properties.getValueForProcessing(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	83	None	replace
146	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  options.getProperty(value).toString();  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(opt);  String  value  =  options.getProperty(value).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(opt);  String  value  =  options.getProperty(value).toString();	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  ';'  expected	72	None	replace
147	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".toString();  [CE]  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".toString();	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  	72	None	replace
148	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  expectedOpts);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(value,  expectedOpts);	  Enumeration    e    =    options.getEnumeration(option,    expectedOpts);    	non-compiled	[CE]  ';'  expected	63	None	replace
149	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(option,  expectedOpts,  value);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(option,  expectedOpts,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(option,  expectedOpts,  value);	  Enumeration    e    =    options.getEnumeration(option,    expectedOpts);    	non-compiled	[CE]  ';'  expected	63	None	replace
150	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(opt,  expectedOpts);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(opt,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(opt,  expectedOpts);	  Enumeration    e    =    options.getEnumeration(option,    expectedOpts);    	non-compiled	[CE]  ';'  expected	63	None	replace
151	[BUG]  [BUGGY]  if(opt.getValues()!=  null  ||  opt.getValues().length  ==  0)  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.getValues()!=  null  ||  opt.getValues().length  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.getValues()!=  null  ||  opt.getValues().length  ==  0)  {	  if(opt.getValues()    ==    null    ||    opt.hasValue())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
152	[BUG]  [BUGGY]  if(opt!=  null  ||  opt.hasValue())  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null  ||  opt.hasValue())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null  ||  opt.hasValue())  {	  if(opt.getValues()    ==    null    ||    opt.hasValue())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
153	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value,  expectedOpts);  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option,  value,  expectedOpts);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	55	None	replace
154	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(value,  option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(value,  option);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	55	None	replace
155	[BUG]  [BUGGY]  if(cmd.hasOption(option))  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(option);  }  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd.hasOption(option))  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(option);  }  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd.hasOption(option))  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(option);  }	  Option    cmd    =    options.getOption(value);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	68	None	replace
156	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(opt)+  value;  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(opt)+  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(opt)+  value;	  Option    currentOption    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	79	None	replace
157	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value)+  option;  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(value)+  option;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(value)+  option;	  Option    currentOption    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	79	None	replace
158	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option)/  value;  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(option)/  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(option)/  value;	  Option    currentOption    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	79	None	replace
159	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt);  String  value  =  properties.getProperty(value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(opt);  String  value  =  properties.getProperty(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(opt);  String  value  =  properties.getProperty(value);	  Option    cmd    =    options.getOption(option);    String    value    =    properties.getProperty(value);    	non-compiled	[CE]  ';'  expected	69	None	replace
160	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  String  value  =  properties.getValue(value);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option);  String  value  =  properties.getValue(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option);  String  value  =  properties.getValue(value);	  Option    cmd    =    options.getOption(option);    String    value    =    properties.getProperty(value);    	non-compiled	[CE]  ';'  expected	69	None	replace
161	[BUG]  [BUGGY]  if(value!=  null  ||  opt.hasProperty(value))  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  ||  opt.hasProperty(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  ||  opt.hasProperty(value))  {	  if(value!=    null    &&    opt.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
162	[BUG]  [BUGGY]  if(value!=  null  &&  option.hasProperty(value))  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  option.hasProperty(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  option.hasProperty(value))  {	  if(value!=    null    &&    opt.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
163	[BUG]  [BUGGY]  if(value!=  null  &&  value.equals(opt.getValue()))  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  value.equals(opt.getValue()))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  value.equals(opt.getValue()))  {	  if(value!=    null    &&    opt.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
164	[BUG]  [BUGGY]  if(option.getValues()  ==  null  ||  opt.hasValues())  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.getValues()  ==  null  ||  opt.hasValues())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.getValues()  ==  null  ||  opt.hasValues())  {	  if(opt.getValues()    ==    null    ||    opt.hasValues())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
165	[BUG]  [BUGGY]  if(opt.getValues()!=  null  ||  opt.hasValues())  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.getValues()!=  null  ||  opt.hasValues())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.getValues()!=  null  ||  opt.hasValues())  {	  if(opt.getValues()    ==    null    ||    opt.hasValues())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
166	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  cmd.getOption(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  cmd.getOption(value);	  Option    option    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	46	None	replace
167	[BUG]  [BUGGY]  Enumeration  <  Option>  option  =  options.getOption(option);  String  value  =  properties.getProperty(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  option  =  options.getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  option  =  options.getOption(option);  String  value  =  properties.getProperty(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	84	None	replace
168	[BUG]  [BUGGY]  if(opt.hasValue(value)||  opt.hasValueForProcessing(value))  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasValue(value)||  opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasValue(value)||  opt.hasValueForProcessing(value))  {	  if(opt.hasProperty(value)||    opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ';'  expected	59	None	replace
169	[BUG]  [BUGGY]  if(option.hasArg())  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasArg())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasArg())  {	  if(option.hasValues())    {    	non-compiled	[CE]  ';'  expected	25	None	replace
170	[BUG]  [BUGGY]  if(option.hasOption(value))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasOption(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasOption(value))  {	  if(option.hasValues())    {    	non-compiled	[CE]  ';'  expected	25	None	replace
171	[BUG]  [BUGGY]  option  option  =  options.getOption(option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  option  option  =  options.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	option  option  =  options.getOption(option);	  Option    option    =    properties.getOption(option);    	non-compiled	[CE]  ';'  expected	80	None	replace
172	[BUG]  [BUGGY]  if(opt!=  null)  {  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value).toString();  }  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null)  {  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value).toString();  }  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null)  {  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value).toString();  }	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  ';'  expected	72	None	replace
173	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value).toString();  }  [CE]  ';'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value).toString();  }  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value).toString();  }	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  ';'  expected	72	None	replace
174	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  value);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(opt,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(opt,  value);	  Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  ';'  expected	6	None	replace
175	[BUG]  [BUGGY]  if(value!=  null  &&  opt.hasValueForProcessing(value))  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  opt.hasValueForProcessing(value))  {	  if(value!=    null    &&    opt.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
176	[BUG]  [BUGGY]  if(opt!=  null  &&  opt.hasProperty(value))  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null  &&  opt.hasProperty(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null  &&  opt.hasProperty(value))  {	  if(value!=    null    &&    opt.hasProperty(value))    {    	non-compiled	[CE]  ';'  expected	82	None	replace
177	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  currentToken);  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(value,  currentToken);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(value,  currentToken);	  Option    cmd    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	4	None	replace
178	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValueForProcessing(value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValueForProcessing(value);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  ';'  expected	49	None	replace
179	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  expectedOpts);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value,  expectedOpts);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(value);    	non-compiled	[CE]  ';'  expected	49	None	replace
180	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value);  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value);  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(value);  String  value  =  properties.getValueForProcessing(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	83	None	replace
181	[BUG]  [BUGGY]  String  value  =  options.getOptionValue(option);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getOptionValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getOptionValue(option);	  String    value    =    options.getProperty(option);    	non-compiled	[CE]  ';'  expected	41	None	replace
182	[BUG]  [BUGGY]  Option  opt  =  options.getOption(value);  String  value  =  properties.getValue(option);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(value);  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(value);  String  value  =  properties.getValue(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	13	None	replace
183	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  properties.getValue(option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value);  String  value  =  properties.getValue(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	13	None	replace
184	[BUG]  [BUGGY]  if(opt.hasProperty(value)&&  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasProperty(value)&&  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasProperty(value)&&  value.length()  ==  0)  {	  if(opt.hasProperty(value)||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
185	[BUG]  [BUGGY]  if(opt.hasOption(option))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasOption(option))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasOption(option))  {	  if(cmd.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	26	None	replace
186	[BUG]  [BUGGY]  Enumeration  <  Object>  e  =  cmd.getEnumeration(option);  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Object>  e  =  cmd.getEnumeration(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Object>  e  =  cmd.getEnumeration(option);	  Enumeration    e    =    cmd.getEnumeration(option);    	non-compiled	[CE]  ';'  expected	3	None	replace
187	[BUG]  [BUGGY]  if(opt.getValues()!=  null  &&  opt.hasValues())  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.getValues()!=  null  &&  opt.hasValues())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.getValues()!=  null  &&  opt.hasValues())  {	  if(opt.getValues()    ==    null    ||    opt.hasValues())    {    	non-compiled	[CE]  ';'  expected	62	None	replace
188	[BUG]  [BUGGY]  Option  cd  =  options.getOption(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cd  =  options.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cd  =  options.getOption(option);	  Option    cmd    =    properties.getOption(option);    	non-compiled	[CE]  ';'  expected	5	None	replace
189	[BUG]  [BUGGY]  if(opt!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
190	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  properties.getProperty(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  properties.getProperty(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value);  String  value  =  properties.getProperty(option);	  Option    option    =    options.getOption(cmd);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  ';'  expected	11	None	replace
191	[BUG]  [BUGGY]  Option  option  =  options.getOption(value)+  option;  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value)+  option;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value)+  option;	  Option    option    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	91	None	replace
192	[BUG]  [BUGGY]  String  value  =  options.getValue(option).toString();  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValue(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValue(option).toString();	  String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	7	None	replace
193	[BUG]  [BUGGY]  String  value  =  properties.getProperty(option)+ ".s.IFJDCS ".toString();  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getProperty(option)+ ".s.IFJDCS ".toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getProperty(option)+ ".s.IFJDCS ".toString();	  String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	7	None	replace
194	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option)+  value  +  1;  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(option)+  value  +  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(option)+  value  +  1;	  Option    currentOption    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	79	None	replace
195	[BUG]  [BUGGY]  Enumeration  <  Option>  options  =  cmd.getOption(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  options  =  cmd.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  options  =  cmd.getOption(option);	  Enumeration    <    Option>    opt    =    cmd.getOption(option);    	non-compiled	[CE]  ';'  expected	21	None	replace
196	[BUG]  [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasOption(value))  {  return;  }	  Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
197	[BUG]  [BUGGY]  Enumeration  e  =  options.getOptions(value);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getOptions(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getOptions(value);	  Enumeration    e    =    options.getOptions();    	non-compiled	[CE]  ';'  expected	65	None	replace
198	[BUG]  [BUGGY]  Enumeration  e  =  options.getOptions(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getOptions(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getOptions(option);	  Enumeration    e    =    options.getOptions();    	non-compiled	[CE]  ';'  expected	65	None	replace
199	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  [CE]  ';'  expected  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();	  Option    cmd    =    options.getOption(opt);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	10	None	replace
200	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option).toString();  [CE]  ';'  expected  [FE]                            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option).toString();	  Option    cmd    =    options.getOption(opt);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	10	None	replace
201	[BUG]  [BUGGY]  Enumeration  <?>  e  =  options.getArgumentEnumeration();  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  options.getArgumentEnumeration();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  options.getArgumentEnumeration();	  Enumeration    <?>    e    =    options.getEnumeration();    	non-compiled	[CE]  ';'  expected	18	None	replace
202	[BUG]  [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null)  {  e.printStackTrace();  }	  e.printStackTrace();    	non-compiled	[CE]  ';'  expected	36	None	replace
203	[BUG]  [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  else  {  expectedOpts.addValueForProcessing(value);  }  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  else  {  expectedOpts.addValueForProcessing(value);  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null)  {  e.printStackTrace();  }  else  {  expectedOpts.addValueForProcessing(value);  }	  e.printStackTrace();    	non-compiled	[CE]  ';'  expected	36	None	replace
204	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value,  option);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(value,  option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(value,  option);	  Option    currentOption    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	34	None	replace
205	[BUG]  [BUGGY]  if(option.hasArg()  &&  value.length()!=  0)  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option.hasArg()  &&  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option.hasArg()  &&  value.length()!=  0)  {	  if(opt.hasArg()    &&    value.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	53	None	replace
206	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  properties.getProperty(option).toString();  [CE]  ';'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  properties.getProperty(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value);  String  value  =  properties.getProperty(option).toString();	  Option    option    =    options.getOption(option);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	9	None	replace
207	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  options.getValueForProcessing(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value);  String  value  =  options.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value);  String  value  =  options.getValueForProcessing(option);	  Option    option    =    options.getOption(option);    String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	73	None	replace
208	[BUG]  [BUGGY]  if(opt  ==  null)  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt  ==  null)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt  ==  null)  {	  if(opt.getValues()    ==    null)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
209	[BUG]  [BUGGY]  if(value!=  null  &&  opt.hasProperty(value)||  value.equals( "true "))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  opt.hasProperty(value)||  value.equals( "true "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  opt.hasProperty(value)||  value.equals( "true "))  {	  if(opt.hasProperty(value)||    value.equals(   "true   "))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
210	[BUG]  [BUGGY]  if(value!=  null  &&  value.equals( "true "))  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  value.equals( "true "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  value.equals( "true "))  {	  if(opt.hasProperty(value)||    value.equals(   "true   "))    {    	non-compiled	[CE]  ';'  expected	40	None	replace
211	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(value,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(value,  value);	  Enumeration    e    =    options.getEnumeration(value);    	non-compiled	[CE]  ';'  expected	1	None	replace
212	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(value  +  1);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(value  +  1);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(value  +  1);	  Enumeration    e    =    options.getEnumeration(value);    	non-compiled	[CE]  ';'  expected	1	None	replace
213	[BUG]  [BUGGY]  if(opt.hasValueForProcessing(value)||  opt.hasValue())  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasValueForProcessing(value)||  opt.hasValue())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasValueForProcessing(value)||  opt.hasValue())  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
214	[BUG]  [BUGGY]  if(!opt.hasValueForProcessing(value))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(!opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(!opt.hasValueForProcessing(value))  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
215	[BUG]  [BUGGY]  if(opt.hasValueForProcessing(value)||  opt.getValues().length  ==  0)  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.hasValueForProcessing(value)||  opt.getValues().length  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.hasValueForProcessing(value)||  opt.getValues().length  ==  0)  {	  if(opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
216	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value)+  option;  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(value)+  option;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(value)+  option;	  Option    cmd    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	75	None	replace
217	[BUG]  [BUGGY]  String  value  =  options.getValue(option,  value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValue(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValue(option,  value);	  String    value    =    options.getValue(option);    	non-compiled	[CE]  ';'  expected	60	None	replace
218	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(value);	  Option    cmd    =    options.getOption(option);    String    value    =    properties.getProperty(value);    	non-compiled	[CE]  ';'  expected	69	None	replace
219	[BUG]  [BUGGY]  Option  opt  =  options.getOption(value);  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(value);  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(value);  String  value  =  properties.getValueForProcessing(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	89	None	replace
220	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value);  String  value  =  properties.getValue(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value);  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(value);  String  value  =  properties.getValue(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  ';'  expected	47	None	replace
221	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValue(option);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  properties.getOption(option);  String  value  =  properties.getValue(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
222	[BUG]  [BUGGY]  String  value  =  options.getValueForProcessing(value);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValueForProcessing(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValueForProcessing(value);	  String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	61	None	replace
223	[BUG]  [BUGGY]  Enumeration  e  =  options.getEnumeration(currentOption,  expectedOpts);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  e  =  options.getEnumeration(currentOption,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  e  =  options.getEnumeration(currentOption,  expectedOpts);	  Enumeration    e    =    options.getEnumeration(option,    expectedOpts);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	63	None	replace
224	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value,  option);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value,  option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(value,  option);	  Enumeration    <    Option>    opt    =    options.getOption(option,    value);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	67	None	replace
225	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  option.getOptions();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  option.getOptions();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  option.getOptions();	  Enumeration    <    Option>    opt    =    properties.getOption(option);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	19	None	replace
226	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  opt);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value,  opt);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value,  opt);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
227	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(value,  option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(value,  option);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
228	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value,  currentToken);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(value,  currentToken);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(value,  currentToken);	  Enumeration    <    Option>    opt    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	20	None	replace
229	[BUG]  [BUGGY]  Option  cmd  =  options.getOptionCmd(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOptionCmd(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOptionCmd(option);	  Option    cmd    =    options.getCmd(option);    	non-compiled	[CE]  ';'  expected	56	None	replace
230	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option)-  value;  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(option)-  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(option)-  value;	  Option    currentOption    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	79	None	replace
231	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option)+  value  + "n ";  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(option)+  value  + "n ";  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(option)+  value  + "n ";	  Option    currentOption    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	79	None	replace
232	[BUG]  [BUGGY]  Option  option  =  properties.getOption(option);  String  value  =  options.getProperty(option).toString();  [CE]  ';'  expected  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  properties.getOption(option);  String  value  =  options.getProperty(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  properties.getOption(option);  String  value  =  options.getProperty(option).toString();	  Option    option    =    options.getOption(option);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	9	None	replace
233	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option).toString();  [CE]  ';'  expected  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option).toString();	  Option    option    =    options.getOption(option);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	9	None	replace
234	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  properties);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option,  value,  properties);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option,  value,  properties);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	51	None	replace
235	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)-  value;  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option)-  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option)-  value;	  Option    cmd    =    options.getOption(option)+    value;    	non-compiled	[CE]  ';'  expected	75	None	replace
236	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value);  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value);	  Option    cmd    =    options.getOption(option);    String    value    =    properties.getProperty(value);    	non-compiled	[CE]  ';'  expected	69	None	replace
237	[BUG]  [BUGGY]  if(opt!=  null  &&  value.length()  >  0)  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null  &&  value.length()  >  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null  &&  value.length()  >  0)  {	  if(opt!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
238	[BUG]  [BUGGY]  if(opt!=  null  &&  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null  &&  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null  &&  value.length()  ==  0)  {	  if(opt!=    null)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
239	[BUG]  [BUGGY]  if(value!=  null  &&  value.equals( " "))  {  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  value.equals( " "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  value.equals( " "))  {	  if(value!=    null)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
240	[BUG]  [BUGGY]  if(value  ==  null  ||  value.equals( "null "))  {  [CE]  ';'  expected  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value  ==  null  ||  value.equals( "null "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value  ==  null  ||  value.equals( "null "))  {	  if(value    ==    null)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
241	[BUG]  [BUGGY]  Option  cmd  =  options.getOptionValue(value);  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOptionValue(value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOptionValue(value);	  Option    cmd    =    options.getOption(value);    	non-compiled	[CE]  ';'  expected	4	None	replace
242	[BUG]  [BUGGY]  if(value!=  null  &&  option.hasArg()  &&  value.length()  ==  0)  {  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  option.hasArg()  &&  value.length()  ==  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  option.hasArg()  &&  value.length()  ==  0)  {	  if(option.hasArg()    ||    value.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
243	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option,  value,  properties);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  currentOption  =  options.getOption(option,  value,  properties);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  currentOption  =  options.getOption(option,  value,  properties);	  Option    currentOption    =    options.getOption(option,    value);    	non-compiled	[CE]  ';'  expected	34	None	replace
244	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option);  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option);  String  value  =  options.getValueForProcessing(option);	  Enumeration    <    Option>    opt    =    properties.getOption(option);    String    value    =    options.getProperty(option);    	non-compiled	[CE]  ';'  expected	48	None	replace
245	[BUG]  [BUGGY]  if(option!=  null  &&  option.hasValues())  {  [CE]  ';'  expected  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option!=  null  &&  option.hasValues())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option!=  null  &&  option.hasValues())  {	  if(option.hasValues())    {    	non-compiled	[CE]  ';'  expected	25	None	replace
246	[BUG]  [BUGGY]  if(option!=  null  &&  opt.hasValues())  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(option!=  null  &&  opt.hasValues())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(option!=  null  &&  opt.hasValues())  {	  if(option.hasValues())    {    	non-compiled	[CE]  ';'  expected	25	None	replace
247	[BUG]  [BUGGY]  String  value  =  properties.getValue(option).toString();  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  properties.getValue(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  properties.getValue(option).toString();	  String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	7	None	replace
248	[BUG]  [BUGGY]  if(opt.getValues()!=  null  &&  opt.hasValue())  {  [CE]  ';'  expected  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt.getValues()!=  null  &&  opt.hasValue())  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt.getValues()!=  null  &&  opt.hasValue())  {	  if(opt.getValues()    ==    null    ||    opt.hasValue())    {    	non-compiled	[CE]  ';'  expected	66	None	replace
249	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(option).toString();  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(option).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getProperty(option).toString();	  Option    cmd    =    options.getOption(value);    String    value    =    properties.getProperty(option).toString();    	non-compiled	[CE]  ';'  expected	71	None	replace
250	[BUG]  [BUGGY]  Option  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [CE]  ';'  expected  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  <  Option>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);	  Enumeration    <    Option>    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  ';'  expected	83	None	replace
251	[BUG]  [BUGGY]  e.printStackTrace(currentToken);  [CE]  ';'  expected  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  e.printStackTrace(currentToken);  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	e.printStackTrace(currentToken);	  e.printStackTrace();    	non-compiled	[CE]  ';'  expected	36	None	replace
252	[BUG]  [BUGGY]  if(value  ==  null  ||  value.equals( " "))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value  ==  null  ||  value.equals( " "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value  ==  null  ||  value.equals( " "))  {	  if(opt.getValues()    ==    null    ||    opt.getValues().length    ==    0)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
253	[BUG]  [BUGGY]  if(opt!=  null  &&  cmd.hasOption(opt))  {  [CE]  ';'  expected  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(opt!=  null  &&  cmd.hasOption(opt))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(opt!=  null  &&  cmd.hasOption(opt))  {	  if(cmd.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	26	None	replace
254	[BUG]  [BUGGY]  if(value!=  null  &&  opt.hasArg()  &&  value.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  opt.hasArg()  &&  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  opt.hasArg()  &&  value.length()!=  0)  {	  if(opt.hasArg()    &&    value.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
255	[BUG]  [BUGGY]  if(value!=  null  &&  value.length()!=  0)  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  value.length()!=  0)  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  value.length()!=  0)  {	  if(opt.hasArg()    &&    value.length()!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
256	[BUG]  [BUGGY]  if(cmd  ==  null)  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  }  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd  ==  null)  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  }  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd  ==  null)  {  Option  cmd  =  options.getOption(option);  String  value  =  properties.getProperty(value).toString();  }	  Option    cmd    =    options.getOption(option);    String    value    =    properties.getProperty(value).toString();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
257	[BUG]  [BUGGY]  String  value  =  options.getValueForProcessing(option,  value);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValueForProcessing(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValueForProcessing(option,  value);	  String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
258	[BUG]  [BUGGY]  String  value  =  options.getValueForProcessing(option)+  1;  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  String  value  =  options.getValueForProcessing(option)+  1;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	String  value  =  options.getValueForProcessing(option)+  1;	  String    value    =    options.getValueForProcessing(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
259	[BUG]  [BUGGY]  Option  <?>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  <?>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  <?>  opt  =  options.getOption(option);  String  value  =  properties.getValueForProcessing(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValueForProcessing(option);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
260	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option,  value);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  opt  =  options.getOption(option);  String  value  =  properties.getProperty(option,  value);	  Option    cmd    =    options.getOption(opt);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
261	[BUG]  [BUGGY]  if(cmd  ==  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(cmd  ==  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(cmd  ==  null)  {  Option  cmd  =  options.getOption(option);  if(cmd!=  null)  {  return;  }	  Option    cmd    =    options.getOption(option);    if(cmd!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
262	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  option.getOption(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  option.getOption(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  option.getOption(option);	  Enumeration    <    Option>    opt    =    cmd.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
263	[BUG]  [BUGGY]  Option  cmd  =  options.getCmd(option,  value);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getCmd(option,  value);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getCmd(option,  value);	  Option    cmd    =    options.getCmd(option);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
264	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)-  value;  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option)-  value;  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option)-  value;	  Option    option    =    options.getOption(option)+    value;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
265	[BUG]  [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(cmd.hasOption(value))  {  return;  }	  Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
266	[BUG]  [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null)  {  Option  cmd  =  options.getOption(option);  if(!cmd.hasValue(value))  {  return;  }	  Option    cmd    =    options.getOption(option);    if(!cmd.hasOption(value))    {    return;    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
267	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value,  properties);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  cmd  =  options.getOption(option,  value,  properties);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  cmd  =  options.getOption(option,  value,  properties);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	55	None	replace
268	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option,  value,  properties);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option,  value,  properties);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option,  value,  properties);	  Enumeration    <    Option>    opt    =    options.getOption(option,    value);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	67	None	replace
269	[BUG]  [BUGGY]  Option  <?>  opt  =  options.getOption(option);  String  value  =  properties.getValue(option);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  <?>  opt  =  options.getOption(option);  String  value  =  properties.getValue(option);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  <?>  opt  =  options.getOption(option);  String  value  =  properties.getValue(option);	  Option    opt    =    options.getOption(option);    String    value    =    properties.getValue(option);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	replace
270	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".s.IFJDCS ".toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".s.IFJDCS ".toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".s.IFJDCS ".toString();	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
271	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getPropertyValue(value).toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getPropertyValue(value).toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getPropertyValue(value).toString();	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
272	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".prototype.toString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".prototype.toString();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Option  option  =  options.getOption(option);  String  value  =  options.getProperty(value)+ ".prototype.toString();	  Option    option    =    options.getOption(option);    String    value    =    options.getProperty(value).toString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	72	None	replace
273	[BUG]  [BUGGY]  Enumeration  <?>  e  =  options.getEnumeration(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  options.getEnumeration(option,  expectedOpts);  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  options.getEnumeration(option,  expectedOpts);	  Enumeration    e    =    options.getEnumeration(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
274	[BUG]  [BUGGY]  if(value!=  null  &&  opt.hasProperty(value)||  opt.hasValueForProcessing(value))  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  opt.hasProperty(value)||  opt.hasValueForProcessing(value))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  opt.hasProperty(value)||  opt.hasValueForProcessing(value))  {	  if(opt.hasProperty(value)||    opt.hasValueForProcessing(value))    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
275	[BUG]  [BUGGY]  if(value!=  null  &&  opt.hasValue()  ||  value.startsWith( "- "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  if(value!=  null  &&  opt.hasValue()  ||  value.startsWith( "- "))  {  [BUGGY]      {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	if(value!=  null  &&  opt.hasValue()  ||  value.startsWith( "- "))  {	  if(opt.hasValue()    ||    value.startsWith(   "-   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	88	None	replace
276	[BUG]  [BUGGY]  Enumeration  <?>  e  =  options.getEnumerationParser();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AlreadySelectedException      [CONTEXT]      if  (!cmd.hasOption(option))  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);      [BUGGY]  Enumeration  <?>  e  =  options.getEnumerationParser();  [BUGGY]      if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  opt.addValueForProcessing(value);  }  }  else  if  (!(     "yes     ".equalsIgnoreCase(value)  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	Enumeration  <?>  e  =  options.getEnumerationParser();	  Enumeration    <?>    e    =    options.getEnumeration();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
