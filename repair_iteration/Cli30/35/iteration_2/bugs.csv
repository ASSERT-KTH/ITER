bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(false);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false);	  cmd    =    new    CommandLine(true);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(true,  stopAtNonOption);	  cmd    =    new    CommandLine(true);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  group);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(false,  group);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  group);	  cmd    =    new    CommandLine(true);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(group);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(group);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(t,  str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  str);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  group);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(t,  group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  group);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)it.next();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)it.next();	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
8	[BUG]  [BUGGY]  Option  option  =(Option)group.next();  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)group.next();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.next();	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  options  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  options  =(Option)iterator.next();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	options  =(Option)iterator.next();	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group);	  cmd    =    new    CommandLine(str);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  str);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group,  str);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  str);	  cmd    =    new    CommandLine(str);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  opt  =  options.getOption(str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(str);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  opt  =  options.getOption(group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(group);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  opt  =  options.getOption(t,  str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  str);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  group);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  opt  =  options.getOption(t,  group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  group);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  group);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(options,  group);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  group);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(str,  stopAtNonOption);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(str,  stopAtNonOption);	      Option    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  Option  option  =(Option)options.get(group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.get(group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(group);	      Option    option    =(Option)options.get(t);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(t);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)this.options.get(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.get(t);	      Option    option    =(Option)options.get(t);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  Option  option  =(Option)options.get(str);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.get(str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(str);	      Option    option    =(Option)options.get(t);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  Option  option  =(Option)options.get(0);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.get(0);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(0);	      Option    option    =(Option)options.get(t);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  OptionOption  option  =  options.getOption(str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(str);	      OptionOption    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  OptionOption  option  =  options.getOption(t,  str);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  str);	      OptionOption    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  OptionOption  option  =  options.getOption(t,  group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  group);	      OptionOption    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  OptionOption  option  =  options.getOption(group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(group);	      OptionOption    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  options);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  options);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  options);	  cmd    =    new    CommandLine(group.getOptions());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  stopAtNonOption);	  cmd    =    new    CommandLine(group.getOptions());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  this);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  this);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  this);	  cmd    =    new    CommandLine(group.getOptions());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptionList());  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group.getOptionList());  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptionList());	  cmd    =    new    CommandLine(group.getOptions());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  t);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(str,  t);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  t);	  cmd    =    new    CommandLine(t);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(group);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.getOption(group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(group);	      Option    option    =(Option)options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  Option  option  =(Option)opts.getOption(option);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)opts.getOption(option);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.getOption(option);	      Option    option    =(Option)options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(opt,  group);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.getOption(opt,  group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(opt,  group);	      Option    option    =(Option)options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  group);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(opt,  group);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(opt,  group);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.getOption(block);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(block);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(block);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.getOption(opt,  stopAtNonOption);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(opt,  stopAtNonOption);	      Option    option    =(Option)options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(opt,  stopAtNonOption);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(str,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  stopAtNonOption);	  cmd    =    new    CommandLine(str);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  block);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  block);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  block);	  cmd    =    new    CommandLine(group.getOptions());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  stopAtNonOption);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opts);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(opts);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opts);	  cmd    =    new    CommandLine(options);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  Option  option  =(Option)options.next();  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.next();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.next();	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption);  [BUGGY]      boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  stopAtNonOption);	  cmd    =    new    CommandLine(true);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  Option  option  =(Option)opts.get(t);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)opts.get(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.get(t);	      Option    option    =(Option)options.get(t);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  Option  opt  =  options.getOptionGroup(t);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  opt  =  options.getOptionGroup(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOptionGroup(t);	      Option    opt    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(t);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOptionGroup(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOptionGroup(t);	      Option    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  Option  option  =(Option)iterator.clone();  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)iterator.clone();  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)iterator.clone();	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroup(t);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  OptionOption  option  =  options.getOptionGroup(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOptionGroup(t);	      OptionOption    option    =    options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(t);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.getOption(t);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(t);	      Option    option    =(Option)options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(block);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]      for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);    [BUGGY]  Option  option  =(Option)options.getOption(block);  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(block);	      Option    option    =(Option)options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
