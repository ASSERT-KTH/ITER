bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(group,  stopAtNonOption);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group,  t);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(group,  t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(group,  t);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(group,  stopAtNonOption);	  OptionOption    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(group,  t);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(group,  t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(group,  t);	  OptionOption    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(opt);	  OptionOption    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptionList(),  options);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptionList(),  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptionList(),  options);	  cmd    =    new    CommandLine(group.getOptionList());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
7	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptionList(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptionList(),  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptionList(),  stopAtNonOption);	  cmd    =    new    CommandLine(group.getOptionList());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptionList(),  block);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptionList(),  block);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptionList(),  block);	  cmd    =    new    CommandLine(group.getOptionList());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(opts);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(opts);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(opts);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
10	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opts,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opts,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opts,  stopAtNonOption);	  cmd    =    new    CommandLine(opts);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
11	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(group,  stopAtNonOption);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
12	[BUG]  [BUGGY]  Option  option  =(Option)this.options.getOption(group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.getOption(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.getOption(group);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
13	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  options,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  options,  stopAtNonOption);	  cmd    =    new    CommandLine(group.getOptions(),    options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
14	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options.getOptions(),  group);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options.getOptions(),  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options.getOptions(),  group);	  cmd    =    new    CommandLine(group.getOptions(),    options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
15	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  arguments);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  arguments);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  arguments);	  cmd    =    new    CommandLine(group.getOptions(),    options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
16	[BUG]  [BUGGY]  options  =(Option)it.next();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  options  =(Option)it.next();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	options  =(Option)it.next();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  str,  stopAtNonOption);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  str,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  str,  eatTheRest);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  str,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  str,  group);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(group);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.get(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.get(group);	  Option    option    =(Option)this.options.get(t);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(0);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.get(0);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.get(0);	  Option    option    =(Option)this.options.get(t);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
22	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(str);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.get(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.get(str);	  Option    option    =(Option)this.options.get(t);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOptionGroup(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOptionGroup(group);	  OptionOption    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
24	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOptionGroup(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOptionGroup(str);	  OptionOption    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
25	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroup(t,  group);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOptionGroup(t,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOptionGroup(t,  group);	  OptionOption    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
26	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption,  group);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  stopAtNonOption,  group);	  cmd    =    new    CommandLine(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  stopAtNonOption,  options);	  cmd    =    new    CommandLine(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(false,  stopAtNonOption,  arguments);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  stopAtNonOption,  arguments);	  cmd    =    new    CommandLine(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOptionGroup(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOptionGroup(group);	  Option    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
30	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOptionGroup(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOptionGroup(str);	  Option    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
31	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(t,  group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOptionGroup(t,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOptionGroup(t,  group);	  Option    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
32	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  arguments,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  arguments,  stopAtNonOption);	  cmd    =    new    CommandLine(group.getOptions(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  argumentList,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  argumentList,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  argumentList,  stopAtNonOption);	  cmd    =    new    CommandLine(group.getOptions(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
34	[BUG]  [BUGGY]  Option  option  =(Option)options.get(1);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.get(1);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(1);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
35	[BUG]  [BUGGY]  Option  option  =(Option)opts.get(0);  [CE]  illegal  start  of  type  [FE]                            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)opts.get(0);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.get(0);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
36	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  group);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  stopAtNonOption,  group);	  cmd    =    new    CommandLine(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
37	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  argumentList);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  argumentList);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  stopAtNonOption,  argumentList);	  cmd    =    new    CommandLine(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
38	[BUG]  [BUGGY]  cmd  =  new  CommandLine(stopAtNonOption,  str);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(stopAtNonOption,  str);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(stopAtNonOption,  str);	  cmd    =    new    CommandLine(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
39	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(str,  group,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  group,  stopAtNonOption);	  cmd    =    new    CommandLine(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
40	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(t,  str,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(t,  str,  stopAtNonOption);	  cmd    =    new    CommandLine(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
41	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  stopAtNonOption);	  cmd    =    new    CommandLine(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(group,  str,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(group,  str,  stopAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
43	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  stopAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(str,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(str,  group);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
45	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  str,  stopAtNonOption);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
46	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  group);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  str,  group);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
47	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  str,  eatTheRest);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  null);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  null);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  null);	  cmd    =    new    CommandLine(group.getOptions(),    this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
49	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  this,  options);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  this,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  this,  options);	  cmd    =    new    CommandLine(group.getOptions(),    this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
50	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(t,  str,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  str,  stopAtNonOption);	  Option    opt    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(t,  str,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  str,  eatTheRest);	  Option    opt    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str,  option);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(str,  option);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(str,  option);	  Option    opt    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(group,  opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(group,  opt,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(group,  opt,  stopAtNonOption);	  Option    option    =(Option)options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(stopAtNonOption,  opt);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(stopAtNonOption,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(stopAtNonOption,  opt);	  Option    option    =(Option)options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  group,  stopAtNonOption);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
56	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  group,  eatTheRest);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
57	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  null);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  null);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  group,  null);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
58	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  block,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  block,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  block,  stopAtNonOption);	  cmd    =    new    CommandLine(group.getOptions(),    block);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
59	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  option);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  option);	  cmd    =    new    CommandLine(group.getOptions(),    block);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
60	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  group,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  group,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
61	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opts,  group);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opts,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opts,  group);	  cmd    =    new    CommandLine(options,    group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
62	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  options);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  options);	  cmd    =    new    CommandLine(options,    group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
63	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  group,  eatTheRest);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  group,  eatTheRest);	  cmd    =    new    CommandLine(options,    group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  Option  option  =(Option)group.clone();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.clone();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.clone();	  Option    option    =(Option)iterator.clone();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
65	[BUG]  [BUGGY]  Option  option  =(Option)options.clone();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.clone();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.clone();	  Option    option    =(Option)iterator.clone();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
66	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getOption(option);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getOption(option);	  Option    option    =(Option)opts.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
67	[BUG]  [BUGGY]  Option  option  =(Option)opts.getOption(group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)opts.getOption(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.getOption(group);	  Option    option    =(Option)opts.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
68	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  str);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(t,  str);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(t,  str);	  cmd    =    new    CommandLine(str,    t);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
69	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(str,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  group);	  cmd    =    new    CommandLine(str,    t);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
70	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  str,  t);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  str,  t);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  str,  t);	  cmd    =    new    CommandLine(str,    t);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
71	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  option);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(str,  option);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  option);	  cmd    =    new    CommandLine(str,    t);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
72	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(t,  group);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(t,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(t,  group);	  Option    option    =(Option)options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
73	[BUG]  [BUGGY]  Option  option  =(Option)opts.getOption(t);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)opts.getOption(t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.getOption(t);	  Option    option    =(Option)options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
74	[BUG]  [BUGGY]  Option  option  =(Option)this.options.getOption(t);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.getOption(t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.getOption(t);	  Option    option    =(Option)options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
75	[BUG]  [BUGGY]  Option  option  =(Option)options.get(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.get(group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(group,  stopAtNonOption);	  Option    option    =(Option)options.get(group);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
76	[BUG]  [BUGGY]  Option  option  =(Option)opts.get(group);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)opts.get(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.get(group);	  Option    option    =(Option)options.get(group);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
77	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  t);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  t);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  t);	  cmd    =    new    CommandLine(group,    str);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  str.length);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  str.length);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  str.length);	  cmd    =    new    CommandLine(group,    str);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  group);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(t,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(t,  group);	  cmd    =    new    CommandLine(group,    str);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(group,  stopAtNonOption);	  Option    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  Option  option  =  group.getOption(options);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  group.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  group.getOption(options);	  Option    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  t);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(group,  t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(group,  t);	  Option    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOption(block,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(block,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(block,  stopAtNonOption);	  Option    option    =    options.getOption(block);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOption(block,  group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(block,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(block,  group);	  Option    option    =    options.getOption(block);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  opt);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(group,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(group,  opt);	  Option    option    =    options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
86	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(opt,  group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(opt,  group,  stopAtNonOption);	  Option    option    =    options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
87	[BUG]  [BUGGY]  Option  option  =  group.getOption(opt,  options);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  group.getOption(opt,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  group.getOption(opt,  options);	  Option    option    =    options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
88	[BUG]  [BUGGY]  Option  option  =  group.getOption(opt);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  group.getOption(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  group.getOption(opt);	  Option    option    =    options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
89	[BUG]  [BUGGY]  if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }	  cmd    =    new    CommandLine(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cmd    =    new    CommandLine(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  else  {  setOptions(options);  }  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  else  {  setOptions(options);  }  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	if(stopAtNonOption)  {  cmd  =  new  CommandLine(false,  stopAtNonOption);  }  else  {  setOptions(options);  }	  cmd    =    new    CommandLine(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
92	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(t,  group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  group,  stopAtNonOption);	  Option    opt    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(t,  group,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  group,  eatTheRest);	  Option    opt    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  Option  opt  =  t.getOption(options);  [CE]  illegal  start  of  type  [FE]                            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  t.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  t.getOption(options);	  Option    opt    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  Option  opt  =  options.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOptionGroup(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOptionGroup(group);	  Option    opt    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
96	[BUG]  [BUGGY]  Option  opt  =  group.getOptionGroup(t);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  group.getOptionGroup(t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  group.getOptionGroup(t);	  Option    opt    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
97	[BUG]  [BUGGY]  Option  opt  =  options.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOptionGroup(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOptionGroup(str);	  Option    opt    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
98	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(group,  opt);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(group,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(group,  opt);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
99	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(opt,  options);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getOption(opt,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getOption(opt,  options);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
100	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(opt,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(opt,  group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(opt,  group,  stopAtNonOption);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
101	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(opt);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getOption(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getOption(opt);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
102	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  group,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  group,  stopAtNonOption);	  Option    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  group,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  group,  eatTheRest);	  Option    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  options);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  group.getOption(t,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  group.getOption(t,  options);	  Option    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  Option  option  =(Option)opts.get(str);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)opts.get(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opts.get(str);	  Option    option    =(Option)options.get(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  Option  option  =(Option)group.get(t);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.get(t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.get(t);	  Option    option    =(Option)opts.get(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
107	[BUG]  [BUGGY]  Option  option  =(Option)this.opts.get(t);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.opts.get(t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.opts.get(t);	  Option    option    =(Option)opts.get(t);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
108	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(options,  stopAtNonOption);	  Option    option    =    options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
109	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getOption();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getOption();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
110	[BUG]  [BUGGY]  Option  option  =(Option)group.getValue();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getValue();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getValue();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
111	[BUG]  [BUGGY]  cmd  =  new  CommandLine(true,  group);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(true,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(true,  group);	  cmd    =    new    CommandLine(false,    group);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
112	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(false,  group,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  group,  stopAtNonOption);	  cmd    =    new    CommandLine(false,    group);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
113	[BUG]  [BUGGY]  Option  option  =(Option)this.options.getOption(block);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.getOption(block);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.getOption(block);	  Option    option    =(Option)options.getOption(block);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
114	[BUG]  [BUGGY]  Option  option  =(Option)block.getOption(options);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)block.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)block.getOption(options);	  Option    option    =(Option)options.getOption(block);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
115	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  str);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(stopAtNonOption,  str);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
116	[BUG]  [BUGGY]  cmd  =  new  CommandLine(block.getOptions(),  group);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(block.getOptions(),  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(block.getOptions(),  group);	  cmd    =    new    CommandLine(group.getOptions(),    block);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
117	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  group);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opt,  group);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opt,  group);	  cmd    =    new    CommandLine(options,    group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
118	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(t,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(t,  stopAtNonOption);	  Option    option    =(Option)options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
119	[BUG]  [BUGGY]  Option  option  =(Option)options.get(opt);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.get(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(opt);	  Option    option    =(Option)options.get(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
120	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  stopAtNonOption,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  stopAtNonOption,  options);	  cmd    =    new    CommandLine(group.getOptions(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
121	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str,  group);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(str,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(str,  group);	  Option    opt    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
122	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opt,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opt,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
123	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  stopAtNonOption,  arguments);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  stopAtNonOption,  arguments);	  cmd    =    new    CommandLine(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
124	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  null);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  null);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  null);	  cmd    =    new    CommandLine(group,    str);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
125	[BUG]  [BUGGY]  Option  option  =(Option)options.get(options.size()  -  1);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.get(options.size()  -  1);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.get(options.size()  -  1);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
126	[BUG]  [BUGGY]  options  =(Option)group.next();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  options  =(Option)group.next();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	options  =(Option)group.next();	  options    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(t,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(t,  stopAtNonOption);	  cmd    =    new    CommandLine(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
128	[BUG]  [BUGGY]  cmd  =  new  CommandLine(block,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(block,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(block,  stopAtNonOption);	  cmd    =    new    CommandLine(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
129	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  block);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  block);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
130	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  options);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(str,  options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(str,  options);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
131	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(opt);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOptionGroup(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOptionGroup(opt);	  Option    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
132	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(group,  str);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(group,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(group,  str);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
133	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  opt);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  opt);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  opt);	  cmd    =    new    CommandLine(group.getOptions(),    this);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
134	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opt);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opt);	  cmd    =    new    CommandLine(group);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
135	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(block,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(block,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(block,  stopAtNonOption);	  Option    option    =(Option)options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
136	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group,  str);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(group,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(group,  str);	  Option    opt    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
137	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(t,  block);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(t,  block);	  Option    opt    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
138	[BUG]  [BUGGY]  Option  opt  =  options.getOption(str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(str,  stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(str,  stopAtNonOption);	  Option    opt    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
139	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  options);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(str,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  options);	  cmd    =    new    CommandLine(str,    t);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
140	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  block);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(str,  block);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(str,  block);	  cmd    =    new    CommandLine(str,    t);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
141	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(opt);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
142	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getOption(options);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getOption(options);	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
143	[BUG]  [BUGGY]  Option  option  =(Option)group.getOptions().next();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getOptions().next();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getOptions().next();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
144	[BUG]  [BUGGY]  Option  opt  =  options.getOptionGroup(t,  group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOptionGroup(t,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOptionGroup(t,  group);	  Option    opt    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
145	[BUG]  [BUGGY]  Option  opt  =  options.getOption(block);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOption(block);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOption(block);	  Option    opt    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
146	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt.getOptions(),  options);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opt.getOptions(),  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opt.getOptions(),  options);	  cmd    =    new    CommandLine(group.getOptions(),    options);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
147	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroup(opt);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOptionGroup(opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOptionGroup(opt);	  OptionOption    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
148	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  block);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  block);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
149	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  group,  t);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(opt,  group,  t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(opt,  group,  t);	  Option    option    =    options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
150	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(opt,  group,  eatTheRest);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(opt,  group,  eatTheRest);	  Option    option    =    options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
151	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(stopAtNonOption);	  Option    option    =    options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
152	[BUG]  [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption,  eatTheRest);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(true,  stopAtNonOption,  eatTheRest);	  cmd    =    new    CommandLine(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
153	[BUG]  [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption,  options);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(true,  stopAtNonOption,  options);	  cmd    =    new    CommandLine(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
154	[BUG]  [BUGGY]  Option  option  =(Option)opt.getOption(group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)opt.getOption(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)opt.getOption(group);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
155	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(stopAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(stopAtNonOption);	  Option    option    =(Option)options.getOption(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
156	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  group,  t);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  group,  t);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  group,  t);	  cmd    =    new    CommandLine(options,    group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
157	[BUG]  [BUGGY]  Option  option  =(Option)it.getValue();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)it.getValue();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)it.getValue();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
158	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  group.toString());  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(false,  group.toString());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  group.toString());	  cmd    =    new    CommandLine(false,    group);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
159	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(t,  str);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOptionGroup(t,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOptionGroup(t,  str);	  Option    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
160	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(t  +  1);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.get(t  +  1);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.get(t  +  1);	  Option    option    =(Option)this.options.get(t);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
161	[BUG]  [BUGGY]  Option  option  =(Option)this.options.next();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.next();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.next();	  Option    option    =(Option)options.next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
162	[BUG]  [BUGGY]  Option  option  =(Option)this.options.getOption(opt,  group);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.getOption(opt,  group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.getOption(opt,  group);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  Option  option  =(Option)this.options.getOption(group,  opt);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.getOption(group,  opt);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.getOption(group,  opt);	  Option    option    =(Option)options.getOption(opt,    group);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
164	[BUG]  [BUGGY]  Option  option  =(Option)group.get(str);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.get(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.get(str);	  Option    option    =(Option)options.get(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
165	[BUG]  [BUGGY]  Option  option  =(Option)this.opts.getOption(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.opts.getOption(option);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.opts.getOption(option);	  Option    option    =(Option)opts.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
166	[BUG]  [BUGGY]  cmd  =  new  CommandLine(false,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(false,  blockAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(false,  blockAtNonOption);	  cmd    =    new    CommandLine(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
167	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  null);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  null);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOption(t,  str,  null);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
168	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group,  str.trim());  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group,  str.trim());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group,  str.trim());	  cmd    =    new    CommandLine(group,    str);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
169	[BUG]  [BUGGY]  Option  option  =(Option)this.optionGroups.get(group);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.optionGroups.get(group);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.optionGroups.get(group);	  Option    option    =(Option)options.get(group);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
170	[BUG]  [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(true,  stopAtNonOption,  arguments);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(true,  stopAtNonOption,  arguments);	  cmd    =    new    CommandLine(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
171	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getName());  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getName());  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getName());	  cmd    =    new    CommandLine(group);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
172	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =  options.getOption(t,  blockAtNonOption);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =  options.getOption(t,  blockAtNonOption);	  Option    option    =    options.getOption(str,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
173	[BUG]  [BUGGY]  Option  option  =(Option)group.get();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.get();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.get();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
174	[BUG]  [BUGGY]  Option  option  =(Option)group.getItem(t);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)group.getItem(t);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)group.getItem(t);	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
175	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(str);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(str);	  Option    option    =(Option)options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
176	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(t,  str);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)options.getOption(t,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)options.getOption(t,  str);	  Option    option    =(Option)options.getOption(t);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
177	[BUG]  [BUGGY]  Option  option  =(Option)this.options.get(1);  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  option  =(Option)this.options.get(1);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  option  =(Option)this.options.get(1);	  Option    option    =(Option)options.get(0);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
178	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroup(t,  str);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  OptionOption  option  =  options.getOptionGroup(t,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	OptionOption  option  =  options.getOptionGroup(t,  str);	  OptionOption    option    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
179	[BUG]  [BUGGY]  Option  opt  =  options.getOptionGroup(t,  str);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Option  opt  =  options.getOptionGroup(t,  str);  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Option  opt  =  options.getOptionGroup(t,  str);	  Option    opt    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
180	[BUG]  [BUGGY]  cmd  =  new  CommandLine(opt,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(opt,  options,  stopAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(opt,  options,  stopAtNonOption);	  cmd    =    new    CommandLine(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
181	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(options,  blockAtNonOption);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(options,  blockAtNonOption);	  cmd    =    new    CommandLine(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
182	[BUG]  [BUGGY]  Options  options  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  Options  options  =(Option)iterator.next();  [BUGGY]      cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	Options  options  =(Option)iterator.next();	  options    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
183	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  argument);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]        for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);      [BUGGY]  cmd  =  new  CommandLine(group.getOptions(),  argument);  [BUGGY]        boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	cmd  =  new  CommandLine(group.getOptions(),  argument);	  cmd    =    new    CommandLine(group.getOptions(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
