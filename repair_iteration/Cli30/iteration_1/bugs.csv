bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]  requiredOptions.clear();  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	requiredOptions.clear();	updateRequiredOptions(opt);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionGroup	19	9
4	[BUG]  [BUGGY]  requiredOptions.clear();  [FE]  AssertionFailedError  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]  requiredOptions.clear();  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	requiredOptions.clear();	updateRequiredOptions(opt);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionGroup	19	9	replace
4	[BUG]  [BUGGY]  addOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]  addOption(opt);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	addOption(opt);	updateRequiredOptions(opt);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
11	[BUG]  [BUGGY]  cmd.addOption(value);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]  cmd.addOption(value);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	cmd.addOption(value);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
12	[BUG]  [BUGGY]  cmd.addOption(opt,  value);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]  cmd.addOption(opt,  value);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	cmd.addOption(opt,  value);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
14	[BUG]  [BUGGY]  cmd.addOption(option);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]  cmd.addOption(option);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	cmd.addOption(option);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
21	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties.remove(properties.values());  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	add	    properties.remove(properties.values());		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	10	9
22	[BUG]  [BUGGY]    properties.remove(properties.values());  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties.remove(properties.values());  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties.remove(properties.values());		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	10	9	add
22	[BUG]  [BUGGY]    properties.remove(properties.indexOf('n'));  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties.remove(properties.indexOf('n'));  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties.remove(properties.indexOf('n'));		non-compiled	[CE]  cannot  find  symbol	10	None	add
23	[BUG]  [BUGGY]    properties.add(new  Property(value));  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties.add(new  Property(value));  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties.add(new  Property(value));		non-compiled	[CE]  cannot  find  symbol	10	None	add
24	[BUG]  [BUGGY]    properties.remove(properties.size()  -  1);  [CE]  no  suitable  method  found  for  remove(int)  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties.remove(properties.size()  -  1);  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties.remove(properties.size()  -  1);		non-compiled	[CE]  no  suitable  method  found  for  remove(int)	10	None	add
25	[BUG]  [BUGGY]    properties  =  getProperties();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties  =  getProperties();  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties  =  getProperties();		non-compiled	[CE]  cannot  find  symbol	10	None	add
31	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperty(property))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperty(property))  {  return;  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperty(property))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
32	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperty(properties))  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperty(properties))  {  return;  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperty(properties))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
33	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreElements())  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreElements())  {  return;  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(!cmd.hasMoreElements())  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
34	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperties())  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperties())  {  return;  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(!cmd.hasMoreProperties())  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
35	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreOptions())  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(!cmd.hasMoreOptions())  {  return;  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(!cmd.hasMoreOptions())  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
41	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parse(options,  arguments,  properties);		non-compiled	[CE]  cannot  find  symbol	8	None	add
42	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties,  true);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parse(options,  arguments,  properties,  true);		non-compiled	[CE]  cannot  find  symbol	8	None	add
43	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  Option>();  [CE]  generics  are  not  supported  in  -source  1.4  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  Option>();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  Option>();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	8	None	add
44	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  CommandLine>();  [CE]  generics  are  not  supported  in  -source  1.4  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  CommandLine>();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  CommandLine>();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	8	None	add
45	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  options.getRequiredOptions();  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions  =  options.getRequiredOptions();		non-compiled	[CE]  cannot  find  symbol	8	None	add
51	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	add	return  parse(options,  arguments,  properties,  true);	return  parse(options,  arguments,  properties,  false);  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	7	9
52	[BUG]  [BUGGY]  return  parse(options,  arguments,  properties,  true);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	return  parse(options,  arguments,  properties,  true);	return  parse(options,  arguments,  properties,  false);  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	7	9	replace
53	[BUG]  [BUGGY]  return  parseOptions(options,  arguments,  properties,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parseOptions(options,  arguments,  properties,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	return  parseOptions(options,  arguments,  properties,  true);	return  parse(options,  arguments,  properties,  false);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
54	[BUG]  [BUGGY]  return  parse(options,  arguments,  properties,  null);  [CE]  no  suitable  method  found  for  parse(Options,String[],Properties,<null>)  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  null);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	return  parse(options,  arguments,  properties,  null);	return  parse(options,  arguments,  properties,  false);  	non-compiled	[CE]  no  suitable  method  found  for  parse(Options,String[],Properties,<null>)	7	None	replace
61	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  value!=  null)  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	add	if(opt.hasArg()  &&  value!=  null)  {	if  (opt.hasArg())  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	5	9
62	[BUG]  [BUGGY]  if(opt.hasArg()  &&  value!=  null)  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  value!=  null)  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	if(opt.hasArg()  &&  value!=  null)  {	if  (opt.hasArg())  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	5	9	replace
64	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  ||  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	add	if(opt.hasArg()  ||  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	5	9
65	[BUG]  [BUGGY]  if(opt.hasArg()  ||  opt.hasArg())  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  ||  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	if(opt.hasArg()  ||  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	5	9	replace
65	[BUG]  [BUGGY]    [CE]  class  or  interface  expected  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	  	if  (opt.hasArg())  {  	non-compiled	[CE]  class  or  interface  expected	5	None	replace
71	[BUG]  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
74	[BUG]  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1.equalsIgnoreCase(value)))  {  [CE]  unclosed  string  literal  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1.equalsIgnoreCase(value)))  {  [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1.equalsIgnoreCase(value)))  {	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  unclosed  string  literal	15	None	replace
75	[BUG]  [BUGGY]    [CE]  unreachable  statement  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	  	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  unreachable  statement	15	None	replace
81	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	if(option!=  null  ||!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9
82	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option))  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(option!=  null  ||!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9	replace
82	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	if(option!=  null  &&!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9
83	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option))  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(option!=  null  &&!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9	replace
83	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)||  e.hasMoreElements())  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	if(!cmd.hasOption(option)||  e.hasMoreElements())  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9
84	[BUG]  [BUGGY]  if(!cmd.hasOption(option)||  e.hasMoreElements())  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)||  e.hasMoreElements())  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(!cmd.hasOption(option)||  e.hasMoreElements())  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9	replace
84	[BUG]  [BUGGY]  if(!cmd.hasOption(option)||  e.hasMoreProperty(option))  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)||  e.hasMoreProperty(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(!cmd.hasOption(option)||  e.hasMoreProperty(option))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]    [CE]  class  or  interface  expected  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	  	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  class  or  interface  expected	13	None	replace
92	[BUG]  [BUGGY]    cmd.addOption(option);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    cmd.addOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    cmd.addOption(option);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	2	None	add
93	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    requiredOptions.remove(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	add	    requiredOptions.remove(option);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	2	9
94	[BUG]  [BUGGY]    requiredOptions.remove(option);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    requiredOptions.remove(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    requiredOptions.remove(option);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	2	9	add
94	[BUG]  [BUGGY]    cmd.addValue(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    cmd.addValue(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    cmd.addValue(option);		non-compiled	[CE]  cannot  find  symbol	2	None	add
95	[BUG]  [BUGGY]    options.add(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    options.add(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    options.add(option);		non-compiled	[CE]  cannot  find  symbol	2	None	add
101	[BUG]  [BUGGY]    opt.addValueForProcessing(value);  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    opt.addValueForProcessing(value);  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    opt.addValueForProcessing(value);		non-compiled	[CE]  	16	None	add
102	[BUG]  [BUGGY]    requiredOptions.remove(opt);  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    requiredOptions.remove(opt);  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    requiredOptions.remove(opt);		non-compiled	[CE]  	16	None	add
103	[BUG]  [BUGGY]    cmd.addOption(opt);  requiredOptions.remove(value);  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    cmd.addOption(opt);  requiredOptions.remove(value);  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    cmd.addOption(opt);  requiredOptions.remove(value);		non-compiled	[CE]  	16	None	add
105	[BUG]  [BUGGY]    cmd.addOption(opt);  requiredOptions.remove(option);  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    cmd.addOption(opt);  requiredOptions.remove(option);  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    cmd.addOption(opt);  requiredOptions.remove(option);		non-compiled	[CE]  	16	None	add
111	[BUG]  [BUGGY]    properties.add(opt);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    properties.add(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    properties.add(opt);		non-compiled	[CE]  cannot  find  symbol	4	None	add
112	[BUG]  [BUGGY]    Properties  properties  =  options.getProperty(option);  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    Properties  properties  =  options.getProperty(option);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    Properties  properties  =  options.getProperty(option);		non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	4	None	add
114	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    options.addOption(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	add	    options.addOption(opt);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	4	9
115	[BUG]  [BUGGY]    options.addOption(opt);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    options.addOption(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    options.addOption(opt);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	4	9	add
121	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	add	Option  opt  =  options.getOption(option);	Option  opt  =  getOptions().getOption(option);  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	1	9
122	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  options.getOption(option);	Option  opt  =  getOptions().getOption(option);  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	1	9	replace
123	[BUG]  [BUGGY]  Option  opt  =  options().getOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  options().getOption(option);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  options().getOption(option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
124	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  options);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  options);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  options);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
132	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.next();  e.hasMoreElements();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.next();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.next();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
133	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.name();  e.hasMoreElements();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.name();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.name();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
134	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.properties();  e.hasMoreElements();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.properties();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.properties();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
141	[BUG]  [BUGGY]    Option  opt  =  options.getOption(value);  [CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    Option  opt  =  options.getOption(value);  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    Option  opt  =  options.getOption(value);		non-compiled	[CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)	18	None	add
142	[BUG]  [BUGGY]    option  =  options.getOption(value);  [CE]  incompatible  types  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    option  =  options.getOption(value);  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    option  =  options.getOption(value);		non-compiled	[CE]  incompatible  types	18	None	add
144	[BUG]  [BUGGY]    opt.addOption(value);  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    opt.addOption(value);  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    opt.addOption(value);		non-compiled	[CE]  cannot  find  symbol	18	None	add
145	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    options.addOption(opt);  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	add	    options.addOption(opt);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	18	9
146	[BUG]  [BUGGY]    options.addOption(opt);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    options.addOption(opt);  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    options.addOption(opt);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	18	9	add
152	[BUG]  [BUGGY]  String  option  =  e.next().toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.next().toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.next().toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
153	[BUG]  [BUGGY]  String  option  =  e.getNextElement().toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.getNextElement().toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.getNextElement().toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
154	[BUG]  [BUGGY]  String  option  =  e.nextNode().toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.nextNode().toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.nextNode().toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
161	[BUG]  [BUGGY]    cmd.addOption(option);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    cmd.addOption(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    cmd.addOption(option);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	14	None	add
162	[BUG]  [BUGGY]    cmd.addValue(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    cmd.addValue(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    cmd.addValue(option);		non-compiled	[CE]  cannot  find  symbol	14	None	add
163	[BUG]  [BUGGY]    cmd.addValue(value);  [CE]  cannot  find  symbol  value  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    cmd.addValue(value);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    cmd.addValue(value);		non-compiled	[CE]  cannot  find  symbol  value	14	None	add
164	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    cmd.addArg(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	    cmd.addArg(option);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	14	9
165	[BUG]  [BUGGY]    cmd.addArg(option);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    cmd.addArg(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    cmd.addArg(option);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	14	9	add
165	[BUG]  [BUGGY]    cmd.addValue(option,  value);  [CE]  cannot  find  symbol  value  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    cmd.addValue(option,  value);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    cmd.addValue(option,  value);		non-compiled	[CE]  cannot  find  symbol  value	14	None	add
172	[BUG]  [BUGGY]    if(value!=  null)  {  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(value!=  null)  {  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(value!=  null)  {  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
173	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  if(opt.hasArg())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
175	[BUG]  [BUGGY]    if(value!=  null)  {  if(opt.hasArg())  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(value!=  null)  {  if(opt.hasArg())  {  return;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(value!=  null)  {  if(opt.hasArg())  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
182	[BUG]  [BUGGY]  String  value  =  properties.get(option);  [CE]  incompatible  types  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  properties.get(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  properties.get(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  incompatible  types	3	None	replace
183	[BUG]  [BUGGY]  String  value  =  options.getProperty(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  options.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  options.getProperty(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
184	[BUG]  [BUGGY]  String  value  =  properties.getKey(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  properties.getKey(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  properties.getKey(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
193	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    requiredOptions.remove(option);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	    requiredOptions.remove(option);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9
194	[BUG]  [BUGGY]    requiredOptions.remove(option);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    requiredOptions.remove(option);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    requiredOptions.remove(option);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9	add
194	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    options.addOption(opt);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	    options.addOption(opt);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9
195	[BUG]  [BUGGY]    options.addOption(opt);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    options.addOption(opt);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    options.addOption(opt);		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9	add
2	[BUG]  [BUGGY]    opt.addValueToString(opt.getKey());  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    opt.addValueToString(opt.getKey());  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    opt.addValueToString(opt.getKey());		non-compiled	[CE]  cannot  find  symbol	4	None	add
3	[BUG]  [BUGGY]    if(opt.hasArg())  {  String  option  =  opt.getValue();  if(option.getArg().length  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    if(opt.hasArg())  {  String  option  =  opt.getValue();  if(option.getArg().length  ==  0)  {  continue;  }  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    if(opt.hasArg())  {  String  option  =  opt.getValue();  if(option.getArg().length  ==  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]    if(opt.hasArg())  {  String  option  =  opt.getValue();  if(option.getArgs().length  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    if(opt.hasArg())  {  String  option  =  opt.getValue();  if(option.getArgs().length  ==  0)  {  continue;  }  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    if(opt.hasArg())  {  String  option  =  opt.getValue();  if(option.getArgs().length  ==  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
5	[BUG]  [BUGGY]    opt.addValueToProcessing(opt);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    opt.addValueToProcessing(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    opt.addValueToProcessing(opt);		non-compiled	[CE]  cannot  find  symbol	4	None	add
22	[BUG]  [BUGGY]  processOptions(opt);  [CE]  cannot  find  symbol  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]  processOptions(opt);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	processOptions(opt);	updateRequiredOptions(opt);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
23	[BUG]  [BUGGY]  checkRequiredOptions(opt);  [CE]  method  checkRequiredOptions  in  class  Parser  cannot  be  applied  to  given  types;  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]  checkRequiredOptions(opt);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	checkRequiredOptions(opt);	updateRequiredOptions(opt);  	non-compiled	[CE]  method  checkRequiredOptions  in  class  Parser  cannot  be  applied  to  given  types;	19	None	replace
41	[BUG]  [BUGGY]  String  value  =  opt.getProperty(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  opt.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  opt.getProperty(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  String  value  =  opt.getProperty(property);  [CE]  cannot  find  symbol  property  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  opt.getProperty(property);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  opt.getProperty(property);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol  property	3	None	replace
62	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  continue;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
63	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  return;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
64	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null)  {  continue;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
65	[BUG]  [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }  [CE]  'try'  without  'catch'  or  'finally'  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }		non-compiled	[CE]  'try'  without  'catch'  or  'finally'	6	None	add
101	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties,  false);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties,  false);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parse(options,  arguments,  properties,  false);		non-compiled	[CE]  cannot  find  symbol	8	None	add
103	[BUG]  [BUGGY]    requiredOptions.remove(options.getKey());  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    requiredOptions.remove(options.getKey());  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    requiredOptions.remove(options.getKey());		non-compiled	[CE]  cannot  find  symbol	8	None	add
123	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9
124	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9	add
125	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt);  }  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	    if(opt.hasArg())  {  requiredOptions.remove(opt);  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9
126	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt);  }  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt);  }  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    if(opt.hasArg())  {  requiredOptions.remove(opt);  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9	add
141	[BUG]  [BUGGY]    CommandLine  cmd  =  getOptions().getCmd(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    CommandLine  cmd  =  getOptions().getCmd(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    CommandLine  cmd  =  getOptions().getCmd(option);		non-compiled	[CE]  cannot  find  symbol	14	None	add
143	[BUG]  [BUGGY]    CommandLine  cmd  =  e.getCmd();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    CommandLine  cmd  =  e.getCmd();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    CommandLine  cmd  =  e.getCmd();		non-compiled	[CE]  cannot  find  symbol	14	None	add
144	[BUG]  [BUGGY]    CommandLine  cmd  =  options.getCmd();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    CommandLine  cmd  =  options.getCmd();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    CommandLine  cmd  =  options.getCmd();		non-compiled	[CE]  cannot  find  symbol	14	None	add
145	[BUG]  [BUGGY]    CommandLine  cmd  =  getOptions().get(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    CommandLine  cmd  =  getOptions().get(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    CommandLine  cmd  =  getOptions().get(option);		non-compiled	[CE]  cannot  find  symbol	14	None	add
163	[BUG]  [BUGGY]  cmd.addValue(value);  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]  cmd.addValue(value);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	cmd.addValue(value);	cmd.addOption(opt);  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
164	[BUG]  [BUGGY]  cmd.addChildToFront(opt);  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]  cmd.addChildToFront(opt);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	cmd.addChildToFront(opt);	cmd.addOption(opt);  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
182	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.getPropertyNames();  e.hasMoreElements();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.getPropertyNames();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.getPropertyNames();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
183	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.getPropertyName();  e.hasMoreElements();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.getPropertyName();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.getPropertyName();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
184	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.numberList();  e.hasMoreElements();)  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.numberList();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.numberList();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
203	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	add	if(opt.hasArg()  &&  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	5	9
204	[BUG]  [BUGGY]  if(opt.hasArg()  &&  opt.hasArg())  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	if(opt.hasArg()  &&  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	5	9	replace
223	[BUG]  [BUGGY]  Option  opt  =  option.getOption().getOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  option.getOption().getOption(option);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  option.getOption().getOption(option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
224	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  option);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  option);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
241	[BUG]  [BUGGY]    cmd.addOption(opt);  [CE]  cannot  find  symbol  opt  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    cmd.addOption(opt);  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    cmd.addOption(opt);		non-compiled	[CE]  cannot  find  symbol  opt	10	None	add
242	[BUG]  [BUGGY]    cmd.addChildToFront(properties);  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    cmd.addChildToFront(properties);  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    cmd.addChildToFront(properties);		non-compiled	[CE]  cannot  find  symbol	10	None	add
243	[BUG]  [BUGGY]    cmd.addArg(properties.value);  [CE]  cannot  find  symbol  value  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    cmd.addArg(properties.value);  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    cmd.addArg(properties.value);		non-compiled	[CE]  cannot  find  symbol  value	10	None	add
244	[BUG]  [BUGGY]    cmd.addValue(value);  [CE]  cannot  find  symbol  value  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    cmd.addValue(value);  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    cmd.addValue(value);		non-compiled	[CE]  cannot  find  symbol  value	10	None	add
245	[BUG]  [BUGGY]    cmd.addChildToFront(new  Property(this));  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    cmd.addChildToFront(new  Property(this));  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    cmd.addChildToFront(new  Property(this));		non-compiled	[CE]  cannot  find  symbol	10	None	add
261	[BUG]  [BUGGY]    CommandLine  cmd  =  e.getCmd();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    CommandLine  cmd  =  e.getCmd();  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    CommandLine  cmd  =  e.getCmd();		non-compiled	[CE]  cannot  find  symbol	12	None	add
262	[BUG]  [BUGGY]    cmd.addOption(e);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    cmd.addOption(e);  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    cmd.addOption(e);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	12	None	add
263	[BUG]  [BUGGY]    CommandLine  cmd  =  e.getConditionExpression();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    CommandLine  cmd  =  e.getConditionExpression();  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    CommandLine  cmd  =  e.getConditionExpression();		non-compiled	[CE]  cannot  find  symbol	12	None	add
265	[BUG]  [BUGGY]    CommandLine  cmd  =  e.nextCommandLine();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    CommandLine  cmd  =  e.nextCommandLine();  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    CommandLine  cmd  =  e.nextCommandLine();		non-compiled	[CE]  cannot  find  symbol	12	None	add
282	[BUG]  [BUGGY]    option  =  cmd.getOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    option  =  cmd.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    option  =  cmd.getOption(option);		non-compiled	[CE]  cannot  find  symbol	2	None	add
283	[BUG]  [BUGGY]    Option  option  =  options.getOption(option);  [CE]  variable  option  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  option  =  options.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  option  =  options.getOption(option);		non-compiled	[CE]  variable  option  is  already  defined  in  method  processProperties(Properties)	2	None	add
284	[BUG]  [BUGGY]    e.removeFirstElement();  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    e.removeFirstElement();  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    e.removeFirstElement();		non-compiled	[CE]  cannot  find  symbol	2	None	add
285	[BUG]  [BUGGY]    processOption(option);  [CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    processOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    processOption(option);		non-compiled	[CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;	2	None	add
302	[BUG]  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value!=  null)  {  continue;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value!=  null)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
303	[BUG]  [BUGGY]    opt.addValue(value);  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    opt.addValue(value);  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    opt.addValue(value);		non-compiled	[CE]  	16	None	add
304	[BUG]  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getKey();  if(value!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getKey();  if(value!=  null)  {  continue;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(opt.hasArg())  {  String  value  =  opt.getKey();  if(value!=  null)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
305	[BUG]  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value  ==  null)  {  continue;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value  ==  null)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
343	[BUG]  [BUGGY]    Option  opt  =  options.getOption(opt);  [CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    Option  opt  =  options.getOption(opt);  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    Option  opt  =  options.getOption(opt);		non-compiled	[CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)	18	None	add
344	[BUG]  [BUGGY]    Option  opt  =  options.getOption(opt.getKey());  [CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    Option  opt  =  options.getOption(opt.getKey());  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    Option  opt  =  options.getOption(opt.getKey());		non-compiled	[CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)	18	None	add
362	[BUG]  [BUGGY]  String  option  =  e.getOption().toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.getOption().toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.getOption().toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
363	[BUG]  [BUGGY]  String  option  =  e.nextElement().getName();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.nextElement().getName();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.nextElement().getName();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
364	[BUG]  [BUGGY]  String  option  =  e.nextOption().toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.nextOption().toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.nextOption().toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
381	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null)  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	if(option!=  null)  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9
382	[BUG]  [BUGGY]  if(option!=  null)  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null)  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(option!=  null)  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9	replace
383	[BUG]  [BUGGY]  if(!cmd.hasOption(option)||(option.getValueType()  ==  null  &&  option.getValueType().equals(value)))  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)||(option.getValueType()  ==  null  &&  option.getValueType().equals(value)))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(!cmd.hasOption(option)||(option.getValueType()  ==  null  &&  option.getValueType().equals(value)))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
384	[BUG]  [BUGGY]  if(!cmd.hasOption(option)||(option.getValueType()  ==  null  &&!option.hasArg()))  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)||(option.getValueType()  ==  null  &&!option.hasArg()))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(!cmd.hasOption(option)||(option.getValueType()  ==  null  &&!option.hasArg()))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
4	[BUG]  [BUGGY]    e.removeProperty(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    e.removeProperty(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    e.removeProperty(option);		non-compiled	[CE]  cannot  find  symbol	2	None	add
31	[BUG]  [BUGGY]  processProperties(cmd);  [CE]  method  processProperties  in  class  Parser  cannot  be  applied  to  given  types;  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]  processProperties(cmd);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	processProperties(cmd);	updateRequiredOptions(opt);  	non-compiled	[CE]  method  processProperties  in  class  Parser  cannot  be  applied  to  given  types;	19	None	replace
61	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addChildToFront(e);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addChildToFront(e);  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addChildToFront(e);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
63	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addChildToBack(e);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addChildToBack(e);  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addChildToBack(e);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
64	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addOption(e);  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addOption(e);  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addOption(e);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
65	[BUG]  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addArg(e.nextElement());  }  [CE]  illegal  start  of  expression  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addArg(e.nextElement());  }  [BUGGY]  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	    if(e.hasMoreElements())  {  if(cmd.hasOption(e))  {  cmd.addArg(e.nextElement());  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
93	[BUG]  [BUGGY]  if(option.hasArg()  &&  value!=  null)  {  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(option.hasArg()  &&  value!=  null)  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	if(option.hasArg()  &&  value!=  null)  {	if  (opt.hasArg())  {  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
94	[BUG]  [BUGGY]  if(option.hasArg())  {  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]  if(option.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	if(option.hasArg())  {	if  (opt.hasArg())  {  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
122	[BUG]  [BUGGY]    CommandLine  cmd  =  cmd.addOption(option);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    CommandLine  cmd  =  cmd.addOption(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    CommandLine  cmd  =  cmd.addOption(option);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	14	None	add
123	[BUG]  [BUGGY]    if(option  ==  null)  {  cmd.addOption(option);  }  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    if(option  ==  null)  {  cmd.addOption(option);  }  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    if(option  ==  null)  {  cmd.addOption(option);  }		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	14	None	add
124	[BUG]  [BUGGY]    CommandLine  cmd  =  e.getArgumentLine();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    CommandLine  cmd  =  e.getArgumentLine();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    CommandLine  cmd  =  e.getArgumentLine();		non-compiled	[CE]  cannot  find  symbol	14	None	add
125	[BUG]  [BUGGY]    if(option  ==  null)  {  CommandLine  cmd  =  options.getCmd();  }  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    if(option  ==  null)  {  CommandLine  cmd  =  options.getCmd();  }  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	    if(option  ==  null)  {  CommandLine  cmd  =  options.getCmd();  }		non-compiled	[CE]  cannot  find  symbol	14	None	add
181	[BUG]  [BUGGY]  String  option  =  e.nextElement().get(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.nextElement().get(option);  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.nextElement().get(option);	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
182	[BUG]  [BUGGY]  String  option  =  e.nextAst(0).toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.nextAst(0).toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.nextAst(0).toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
183	[BUG]  [BUGGY]  String  option  =  e.nextAction().toString();  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  [BUGGY]  String  option  =  e.nextAction().toString();  [BUGGY]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	String  option  =  e.nextAction().toString();	String  option  =  e.nextElement().toString();  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
214	[BUG]  [BUGGY]  return  parse(options,  arguments,  properties,  false,  options.mapping);  [CE]  cannot  find  symbol  mapping  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  false,  options.mapping);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	return  parse(options,  arguments,  properties,  false,  options.mapping);	return  parse(options,  arguments,  properties,  false);  	non-compiled	[CE]  cannot  find  symbol  mapping	7	None	replace
242	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	if(option  ==  null  ||!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9
243	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option))  {  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(option  ==  null  ||!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	13	9	replace
244	[BUG]  [BUGGY]  if(!option.isRequired())  {  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!option.isRequired())  {  [BUGGY]  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	if(!option.isRequired())  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
272	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	add	    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	18	9
273	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	18	9	add
275	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    if(opt.hasArg())  {  requiredOptions.clear();  }  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	add	    if(opt.hasArg())  {  requiredOptions.clear();  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	18	9
276	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions.clear();  }  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  [BUGGY]    if(opt.hasArg())  {  requiredOptions.clear();  }  [BUGGY]  cmd.addOption(opt);  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	    if(opt.hasArg())  {  requiredOptions.clear();  }		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	18	9	add
304	[BUG]  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)||  1 ".equalsIgnoreCase(value)))  [CE]  unclosed  string  literal  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)||  1 ".equalsIgnoreCase(value)))  [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)||  1 ".equalsIgnoreCase(value)))	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  unclosed  string  literal	15	None	replace
332	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  e);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  e);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  e);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
362	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.values();  e.hasMoreElements();)  {  [CE]  incompatible  types  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.values();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.values();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  incompatible  types	9	None	replace
364	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.keySet();  e.hasMoreElements();)  {  [CE]  incompatible  types  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]  for(Enumeration  e  =  properties.keySet();  e.hasMoreElements();)  {  [BUGGY]  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.keySet();  e.hasMoreElements();)  {	for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  	non-compiled	[CE]  incompatible  types	9	None	replace
394	[BUG]  [BUGGY]    cmd.parseOptions(options,  arguments,  properties);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parseOptions(options,  arguments,  properties);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    cmd.parseOptions(options,  arguments,  properties);		non-compiled	[CE]  cannot  find  symbol	8	None	add
395	[BUG]  [BUGGY]    requiredOptions.clear();  cmd.parse(options,  arguments,  properties,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    requiredOptions.clear();  cmd.parse(options,  arguments,  properties,  true);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	    requiredOptions.clear();  cmd.parse(options,  arguments,  properties,  true);		non-compiled	[CE]  cannot  find  symbol	8	None	add
422	[BUG]  [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }  [CE]  'try'  without  'catch'  or  'finally'  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }		non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	add
423	[BUG]  [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(option);  }  [CE]  'try'  without  'catch'  or  'finally'  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(option);  }  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(option);  }		non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	add
451	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
454	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getArguments().length  ==  0)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getArguments().length  ==  0)  {  throw  new  RuntimeException( " ");  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	    if(opt.hasArg())  {  if(opt.getArguments().length  ==  0)  {  throw  new  RuntimeException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
481	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    requiredOptions.remove(opt.getKey());  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	    requiredOptions.remove(opt.getKey());		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9
482	[BUG]  [BUGGY]    requiredOptions.remove(opt.getKey());  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    requiredOptions.remove(opt.getKey());  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    requiredOptions.remove(opt.getKey());		compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	20	9	add
484	[BUG]  [BUGGY]    e.removeOption(opt);  [CE]  cannot  find  symbol  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    e.removeOption(opt);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    e.removeOption(opt);		non-compiled	[CE]  cannot  find  symbol	20	None	add
485	[BUG]  [BUGGY]    processOption(e,  opt);  [CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;  [CONTEXT]  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  [BUGGY]    processOption(e,  opt);  [BUGGY]  updateRequiredOptions(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	    processOption(e,  opt);		non-compiled	[CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;	20	None	add
513	[BUG]  [BUGGY]  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	add	String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);	String  value  =  properties.getProperty(option);  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	3	9
514	[BUG]  [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);  [FE]  AlreadySelectedException  testPropertyOptionGroup  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);	String  value  =  properties.getProperty(option);  	compilable	  [FE]  AlreadySelectedException  testPropertyOptionGroup	3	9	replace
514	[BUG]  [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.get(option);  [CE]  incompatible  types  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);      [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.get(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	String  value  =  properties!=  null?  properties.getProperty(option):  properties.get(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  incompatible  types	3	None	replace
541	[BUG]  [BUGGY]    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnore  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnore  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnore		non-compiled	[CE]  	16	None	add
542	[BUG]  [BUGGY]    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "0 ".equalsIgnoreCase(value)|| "1 ".equalsIgnore  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "0 ".equalsIgnoreCase(value)|| "1 ".equalsIgnore  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "0 ".equalsIgnoreCase(value)|| "1 ".equalsIgnore		non-compiled	[CE]  	16	None	add
543	[BUG]  [BUGGY]    if(option.getValueType()  ==  String.valueOf(value))  {  String  value  =  opt.getValueType();  if(value!=  null)  {  cmd.addOption(value);  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(option.getValueType()  ==  String.valueOf(value))  {  String  value  =  opt.getValueType();  if(value!=  null)  {  cmd.addOption(value);  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(option.getValueType()  ==  String.valueOf(value))  {  String  value  =  opt.getValueType();  if(value!=  null)  {  cmd.addOption(value);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
544	[BUG]  [BUGGY]    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "0 ".equalsIgnore  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "0 ".equalsIgnore  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(option.getValue()  ==  null)  {  String  value  =  opt.getValue();  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "0 ".equalsIgnore		non-compiled	[CE]  	16	None	add
545	[BUG]  [BUGGY]    if(value  ==  null)  {  String  value  =  new  String(value);  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value))  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(value  ==  null)  {  String  value  =  new  String(value);  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value))  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    continue;  }  cmd.addOption(opt);  updateRequiredOptions(opt);  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	    if(value  ==  null)  {  String  value  =  new  String(value);  if(value.equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value))		non-compiled	[CE]  	16	None	add
572	[BUG]  [BUGGY]    properties  =  properties.values();  [CE]  incompatible  types  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties  =  properties.values();  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties  =  properties.values();		non-compiled	[CE]  incompatible  types	10	None	add
573	[BUG]  [BUGGY]    properties  =  properties.toArray(new  Property(value));  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties  =  properties.toArray(new  Property(value));  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties  =  properties.toArray(new  Property(value));		non-compiled	[CE]  cannot  find  symbol	10	None	add
574	[BUG]  [BUGGY]    properties.add(new  Property(properties));  [CE]  cannot  find  symbol  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    properties.add(new  Property(properties));  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    properties.add(new  Property(properties));		non-compiled	[CE]  cannot  find  symbol	10	None	add
575	[BUG]  [BUGGY]    cmd.addArg(properties);  [CE]  method  addArg  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  [BUGGY]    cmd.addArg(properties);  [BUGGY]  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	    cmd.addArg(properties);		non-compiled	[CE]  method  addArg  in  class  CommandLine  cannot  be  applied  to  given  types;	10	None	add
