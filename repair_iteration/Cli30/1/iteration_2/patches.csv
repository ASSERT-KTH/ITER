bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =  getOption(cmd,  option);  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(cmd,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(cmd,  option);	  Option    option    =    getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	19	None	replace
2	[BUG]  [BUGGY]  Enumeration  opt  =  options.getOptions();  [CE]  not  a  statement  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  opt  =  options.getOptions();  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  opt  =  options.getOptions();	  Enumeration    opt    =    cmd.getOptions();    	non-compiled	[CE]  not  a  statement	3	None	replace
3	[BUG]  [BUGGY]  Enumeration  opt  =  cmd.getOption(option);  [CE]  not  a  statement  [FE]                        AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  opt  =  cmd.getOption(option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  opt  =  cmd.getOption(option);	  Enumeration    opt    =    cmd.getOptions();    	non-compiled	[CE]  not  a  statement	3	None	replace
4	[BUG]  [BUGGY]  Option  opt  =  options.getOption(cmd);  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  options.getOption(cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  options.getOption(cmd);	  Option    opt    =    options.getOption(option);    	non-compiled	[CE]  not  a  statement	2	None	replace
5	[BUG]  [BUGGY]  Option  option  =  getOptions(cmd);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions(cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions(cmd);	  Option    option    =    getOptions(option);    	non-compiled	[CE]  not  a  statement	18	None	replace
6	[BUG]  [BUGGY]  Option  option  =  getOptions();  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions();  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions();	  Option    option    =    getOptions(option);    	non-compiled	[CE]  not  a  statement	18	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =  getOption().getOption(option);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption().getOption(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption().getOption(option);	  Option    cmd    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	21	None	replace
8	[BUG]  [BUGGY]  Option  opt  =  getOption(options.getOption(option));  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(options.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(options.getOption(option));	  Option    opt    =    getOption(options.getOption(cmd));    	non-compiled	[CE]  not  a  statement	31	None	replace
9	[BUG]  [BUGGY]  Option  option  =  getOption(options.getOption(option));  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(options.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(options.getOption(option));	  Option    opt    =    getOption(options.getOption(cmd));    	non-compiled	[CE]  not  a  statement	31	None	replace
10	[BUG]  [BUGGY]  Option  option  =  getOption(cmd.getOption(option));  [CE]  not  a  statement  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(cmd.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(cmd.getOption(option));	  Option    opt    =    getOption(options.getOption(cmd));    	non-compiled	[CE]  not  a  statement	31	None	replace
11	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  option,  value);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  option,  value);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(cmd,  option,  value);	  Option    opt    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  not  a  statement	34	None	replace
12	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(opt,  option);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(opt,  option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(opt,  option);	  Option    option    =    getOptions().getOption(cmd,    option);    	non-compiled	[CE]  not  a  statement	9	None	replace
13	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(cmd,  option,  e);  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(cmd,  option,  e);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(cmd,  option,  e);	  Option    option    =    getOptions().getOption(cmd,    option);    	non-compiled	[CE]  not  a  statement	9	None	replace
14	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(cmd,  option);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(cmd,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(cmd,  option);	  Option    cmd    =    getOptions().getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	36	None	replace
15	[BUG]  [BUGGY]  Option  cmd  =  getOptions().get(cmd);  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().get(cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().get(cmd);	  Option    cmd    =    getOptions().get(option);    	non-compiled	[CE]  not  a  statement	20	None	replace
16	[BUG]  [BUGGY]  Option  cmd  =  getOptions().get(option  +  1);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().get(option  +  1);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().get(option  +  1);	  Option    cmd    =    getOptions().get(option);    	non-compiled	[CE]  not  a  statement	20	None	replace
17	[BUG]  [BUGGY]  Option  opt  =  e.getOption(cmd);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  e.getOption(cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  e.getOption(cmd);	  Option    opt    =    e.getOption(option);    	non-compiled	[CE]  not  a  statement	38	None	replace
18	[BUG]  [BUGGY]  Option  cmd  =  getOption(cmd,  option);  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption(cmd,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(cmd,  option);	  Option    cmd    =    getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	13	None	replace
19	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  exp.getOption(option),  e);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  exp.getOption(option),  e);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  exp.getOption(option),  e);	  Option    opt    =    getOption(cmd,    exp.getOption(option));    	non-compiled	[CE]  not  a  statement	5	None	replace
20	[BUG]  [BUGGY]  Option  opt  =  getOption(option,  cmd.getOption(option));  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option,  cmd.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option,  cmd.getOption(option));	  Option    opt    =    getOption(cmd,    exp.getOption(option));    	non-compiled	[CE]  not  a  statement	5	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  getOption(value,  option);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption(value,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(value,  option);	  Option    cmd    =    getOption(option,    value);    	non-compiled	[CE]  not  a  statement	33	None	replace
22	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  value,  cmd);  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption(option,  value,  cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(option,  value,  cmd);	  Option    cmd    =    getOption(option,    value);    	non-compiled	[CE]  not  a  statement	33	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  getOption(cmd,  value);  [CE]  illegal  start  of  expression  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption(cmd,  value);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(cmd,  value);	  Option    cmd    =    getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
24	[BUG]  [BUGGY]  Option  option  =  properties.getOption(option);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  properties.getOption(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  properties.getOption(option);	  Option    cmd    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
25	[BUG]  [BUGGY]  Option  opt  =  getOption(option.getOption(option));  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option.getOption(option));	  Option    opt    =    getOption(option.getOption(cmd));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
26	[BUG]  [BUGGY]  Option  opt  =  getOption(e.getOption(option));  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(e.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(e.getOption(option));	  Option    opt    =    getOption(option.getOption(cmd));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(cmd);  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  options.getOption(cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  options.getOption(cmd);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
28	[BUG]  [BUGGY]  Option  option  =  getOption(cmd,  value);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(cmd,  value);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(cmd,  value);	  Option    option    =    getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
29	[BUG]  [BUGGY]  Option  option  =  getOption(option,  value,  cmd);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(option,  value,  cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(option,  value,  cmd);	  Option    option    =    getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
30	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  options);  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().getOption(option,  options);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  options);	  Option    opt    =    getOptions().getOption(cmd,    options);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
31	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  option);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().getOption(option,  option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  option);	  Option    opt    =    getOptions().getOption(cmd,    options);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
32	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  option,  requiredOptions);  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  option,  requiredOptions);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(cmd,  option,  requiredOptions);	  Option    opt    =    getOptions().getOption(cmd,    option);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  getOptions(cmd);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions(cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions(cmd);	  Option    cmd    =    getOption(cmd);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  Option  cmd  =  getOptions(option);  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions(option);	  Option    cmd    =    getOption(cmd);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  Option  options  =  getOptions().getOption(cmd);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  options  =  getOptions().getOption(cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  options  =  getOptions().getOption(cmd);	  Option    options    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
36	[BUG]  [BUGGY]  Option  options  =  getOptions().getOption(option,  cmd);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  options  =  getOptions().getOption(option,  cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  options  =  getOptions().getOption(option,  cmd);	  Option    options    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
37	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(cmd);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  getOptions().getOption(cmd);	  Enumeration    <    Option>    opt    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
38	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(option,  cmd);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(option,  cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  getOptions().getOption(option,  cmd);	  Enumeration    <    Option>    opt    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
39	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value,  cmd);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value,  cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  value,  cmd);	  Option    cmd    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
40	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value  +  1);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value  +  1);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  value  +  1);	  Option    cmd    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
41	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value  -  1);  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value  -  1);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  value  -  1);	  Option    cmd    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
42	[BUG]  [BUGGY]  Option  option  =  getOptions().get(cmd,  option);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().get(cmd,  option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().get(cmd,  option);	  Option    opt    =    getOptions().get(option,    cmd);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd);  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd);	  Option    opt    =    getOptions().get(option,    cmd);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
44	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(value,  option);  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  cmd.getOption(value,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  cmd.getOption(value,  option);	  Option    option    =    cmd.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
45	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option,  value,  e);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  cmd.getOption(option,  value,  e);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  cmd.getOption(option,  value,  e);	  Option    option    =    cmd.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option,  value,  requiredOptions);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  cmd.getOption(option,  value,  requiredOptions);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  cmd.getOption(option,  value,  requiredOptions);	  Option    option    =    cmd.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  Option  option  =  getOptions().get(option,  cmd);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().get(option,  cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().get(option,  cmd);	  Option    opt    =    getOptions().get(cmd,    option);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  option);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  option);	  Option    opt    =    getOptions().get(cmd,    option);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
49	[BUG]  [BUGGY]  Option  opt  =  getOption(e,  cmd.getOption(option));  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(e,  cmd.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(e,  cmd.getOption(option));	  Option    opt    =    getOption(cmd,    e.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
50	[BUG]  [BUGGY]  Option  opt  =  getOption(option,  e.getOption(option));  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option,  e.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option,  e.getOption(option));	  Option    opt    =    getOption(cmd,    e.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
51	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  e.getOption(option),  exp);  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  e.getOption(option),  exp);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  e.getOption(option),  exp);	  Option    opt    =    getOption(cmd,    e.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
52	[BUG]  [BUGGY]  Option  opt  =  getOption(properties.getOption(option),  cmd);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(properties.getOption(option),  cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(properties.getOption(option),  cmd);	  Option    opt    =    getOption(properties.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
53	[BUG]  [BUGGY]  Option  opt  =  getOption(options,  cmd.getOption(option));  [CE]  illegal  start  of  expression  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(options,  cmd.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(options,  cmd.getOption(option));	  Option    opt    =    getOption(cmd,    options.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  Option  option  =  getOptions().get(option);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().get(option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().get(option);	  Option    opt    =    getOptions().get(cmd);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  Option  opt  =  getOption(option,  properties.getOption(option));  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option,  properties.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option,  properties.getOption(option));	  Option    opt    =    getOption(cmd,    properties.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  properties.getOption(option),  e);  [CE]  illegal  start  of  expression  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  properties.getOption(option),  e);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  properties.getOption(option),  e);	  Option    opt    =    getOption(cmd,    properties.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  properties.getProperty(option));  [CE]  illegal  start  of  expression  [FE]                        AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  properties.getProperty(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  properties.getProperty(option));	  Option    opt    =    getOption(cmd,    properties.getOption(option));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  value,  cmd);  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(option,  value,  cmd);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(option,  value,  cmd);	  Option    option    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
59	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(property,  option);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(property,  option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(property,  option);	  Option    option    =    getOptions().getOption(cmd,    option);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
60	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(opt);  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().get(opt);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(opt);	  Option    opt    =    getOptions().get(cmd);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(option,  value);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  getOptions().getOption(option,  value);	  Enumeration    <    Option>    opt    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
62	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  options);  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption(option,  options);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(option,  options);	  Option    cmd    =    getOption(option,    cmd);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
63	[BUG]  [BUGGY]  Option  cmd  =  getOptions().get(option  -  1);  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().get(option  -  1);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().get(option  -  1);	  Option    cmd    =    getOptions().get(option);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
64	[BUG]  [BUGGY]  Option  cmd  =  getCmd().get(option);  [CE]  illegal  start  of  expression  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getCmd().get(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getCmd().get(option);	  Option    cmd    =    getOptions().get(option);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
65	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(value,  option);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(value,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(value,  option);	  Option    option    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  not  a  statement	32	None	replace
66	[BUG]  [BUGGY]  Option  opt  =  getOption(option.getOption(option),  cmd);  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option.getOption(option),  cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option.getOption(option),  cmd);	  Option    opt    =    getOption(option.getOption(cmd));    	non-compiled	[CE]  not  a  statement	30	None	replace
67	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  options);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(option,  options);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  options);	  Option    cmd    =    getOptions().getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	36	None	replace
68	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(value,  option);  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(value,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(value,  option);	  Option    cmd    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  not  a  statement	37	None	replace
69	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(option,  options);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().get(option,  options);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(option,  options);	  Option    opt    =    getOptions().get(option,    cmd);    	non-compiled	[CE]  not  a  statement	16	None	replace
70	[BUG]  [BUGGY]  Option  cmd  =  getOptionValue(option);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptionValue(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptionValue(option);	  Option    cmd    =    getOption(cmd);    	non-compiled	[CE]  not  a  statement	12	None	replace
71	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option,  value  -  1);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  cmd.getOption(option,  value  -  1);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  cmd.getOption(option,  value  -  1);	  Option    option    =    cmd.getOption(option,    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
72	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  options.getOption(option,  value);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  options.getOption(option,  value);	  Option    option    =    cmd.getOption(option,    value);    	non-compiled	[CE]  not  a  statement	10	None	replace
73	[BUG]  [BUGGY]  Option  opt  =  getOption(option,  options.getOption(option));  [CE]  not  a  statement  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option,  options.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option,  options.getOption(option));	  Option    opt    =    getOption(cmd,    options.getOption(option));    	non-compiled	[CE]  not  a  statement	7	None	replace
74	[BUG]  [BUGGY]  Enumeration  opt  =  properties.getOptions();  [CE]  not  a  statement  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  opt  =  properties.getOptions();  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  opt  =  properties.getOptions();	  Enumeration    opt    =    cmd.getOptions();    	non-compiled	[CE]  not  a  statement	3	None	replace
75	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(opt);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(opt);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(opt);	  Option    option    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	26	None	replace
76	[BUG]  [BUGGY]  Option  option  =  getOptions().findOption(option);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().findOption(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().findOption(option);	  Option    option    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	26	None	replace
77	[BUG]  [BUGGY]  Option  opt  =  getOption(option,  exp.getOption(option));  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(option,  exp.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option,  exp.getOption(option));	  Option    opt    =    getOption(cmd,    exp.getOption(option));    	non-compiled	[CE]  not  a  statement	5	None	replace
78	[BUG]  [BUGGY]  Option  option  =  getOption(value,  option);  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(value,  option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(value,  option);	  Option    option    =    getOption(option,    value);    	non-compiled	[CE]  not  a  statement	40	None	replace
79	[BUG]  [BUGGY]  Option  opt  =  properties.getOption(option);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  properties.getOption(option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  properties.getOption(option);	  Option    opt    =    cmd.getOption(option);    	non-compiled	[CE]  not  a  statement	1	None	replace
80	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(opt);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(opt);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(opt);	  Option    cmd    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	21	None	replace
81	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  value  -  1);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOption(option,  value  -  1);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(option,  value  -  1);	  Option    cmd    =    getOption(option,    value);    	non-compiled	[CE]  not  a  statement	33	None	replace
82	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOptions();  [CE]  class  or  interface  expected  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOptions();  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  getOptions().getOptions();	  Enumeration    <    Option>    opt    =    options.getOptions();    	non-compiled	[CE]  class  or  interface  expected	25	None	replace
83	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  properties.getOption(option),  value);  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  properties.getOption(option),  value);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  properties.getOption(option),  value);	  Option    opt    =    getOption(cmd,    properties.getOption(option));    	non-compiled	[CE]  not  a  statement	6	None	replace
84	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  options);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(option,  options);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(option,  options);	  Option    opt    =    getOptions().getOption(cmd,    options);    	non-compiled	[CE]  not  a  statement	22	None	replace
85	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  null);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().getOption(option,  null);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  null);	  Option    cmd    =    getOptions().getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	36	None	replace
86	[BUG]  [BUGGY]  Option  option  =  getOptions().getOptionValue(option);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOptionValue(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOptionValue(option);	  Option    option    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	26	None	replace
87	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  values);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(option,  values);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(option,  values);	  Option    option    =    getOptions().getOption(option,    value);    	non-compiled	[CE]  not  a  statement	32	None	replace
88	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(cmd,  options);  [CE]  not  a  statement  [FE]            AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(cmd,  options);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(cmd,  options);	  Option    opt    =    getOptions().getOption(cmd,    options);    	non-compiled	[CE]  not  a  statement	22	None	replace
89	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  exp.getOption(option),  options);  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  exp.getOption(option),  options);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  exp.getOption(option),  options);	  Option    opt    =    getOption(cmd,    exp.getOption(option));    	non-compiled	[CE]  not  a  statement	5	None	replace
90	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(option,  option);  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOptions().get(option,  option);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(option,  option);	  Option    opt    =    getOptions().get(cmd,    option);    	non-compiled	[CE]  not  a  statement	15	None	replace
91	[BUG]  [BUGGY]  Option  option  =  getOption(cmd,  properties.getOption(option));  [CE]  not  a  statement  [FE]                      AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(cmd,  properties.getOption(option));  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(cmd,  properties.getOption(option));	  Option    opt    =    getOption(cmd,    options.getOption(option));    	non-compiled	[CE]  not  a  statement	7	None	replace
92	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(cmd,  option,  options);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().getOption(cmd,  option,  options);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(cmd,  option,  options);	  Option    option    =    getOptions().getOption(cmd,    option);    	non-compiled	[CE]  not  a  statement	9	None	replace
93	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  e.getKey());  [CE]  not  a  statement  [FE]                AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  e.getKey());  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  e.getKey());	  Option    opt    =    getOption(cmd,    e.getOption(option));    	non-compiled	[CE]  not  a  statement	4	None	replace
94	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  e.getArg());  [CE]  not  a  statement  [FE]                  AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  opt  =  getOption(cmd,  e.getArg());  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  e.getArg());	  Option    opt    =    getOption(cmd,    e.getOption(option));    	non-compiled	[CE]  not  a  statement	4	None	replace
95	[BUG]  [BUGGY]  Option  cmd  =  getOptions().findOption(option);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  cmd  =  getOptions().findOption(option);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().findOption(option);	  Option    cmd    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	21	None	replace
96	[BUG]  [BUGGY]  Option  option  =  getOption(option,  cmd,  value);  [CE]  not  a  statement  [FE]                    AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOption(option,  cmd,  value);  [BUGGY]      Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(option,  cmd,  value);	  Option    option    =    getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	19	None	replace
97	[BUG]  [BUGGY]  Option  option  =  getOptions().get(cmd);  [CE]  not  a  statement  [FE]              AlreadySelectedException      [CONTEXT]      {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {      [BUGGY]  Option  option  =  getOptions().get(cmd);  [BUGGY]          String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().get(cmd);	  Option    opt    =    getOptions().get(cmd);    	non-compiled	[CE]  not  a  statement	14	None	replace
