bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  opt  =  cmd.getOption(option);  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  cmd.getOption(option);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  cmd.getOption(option);	      	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  [CE]  not  a  statement  [FE]                AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  options.getOption(option);	      	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  Enumeration  opt  =  cmd.getOptions();  [CE]  not  a  statement  [FE]                  AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Enumeration  opt  =  cmd.getOptions();  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  opt  =  cmd.getOptions();	      	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  e.getOption(option));  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(cmd,  e.getOption(option));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  e.getOption(option));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
5	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  exp.getOption(option));  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(cmd,  exp.getOption(option));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  exp.getOption(option));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
6	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  properties.getOption(option));  [CE]  not  a  statement  [FE]                AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(cmd,  properties.getOption(option));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  properties.getOption(option));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
7	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd,  options.getOption(option));  [CE]  not  a  statement  [FE]                  AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(cmd,  options.getOption(option));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd,  options.getOption(option));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
8	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  option);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  option);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(cmd,  option);	  Option    opt    =    getOptions().getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	9	None	replace
9	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(cmd,  option);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOptions().getOption(cmd,  option);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(cmd,  option);	  Option    opt    =    getOptions().getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	9	None	replace
10	[BUG]  [BUGGY]  Option  option  =  cmd.getOption(option,  value);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  cmd.getOption(option,  value);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  cmd.getOption(option,  value);	      Option    option    =    cmd.getOption(option);    	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  Option  option  =  e.getOption(option);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  e.getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  e.getOption(option);	      Option    cmd    =    e.getOption(option);    	non-compiled	[CE]  not  a  statement	14	None	replace
12	[BUG]  [BUGGY]  Option  cmd  =  getOption(cmd);  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOption(cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(cmd);	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  not  a  statement	8	None	replace
13	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  cmd);  [CE]  not  a  statement  [FE]                AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOption(option,  cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(option,  cmd);	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  not  a  statement	8	None	replace
14	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(cmd);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOptions().get(cmd);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(cmd);	  Option    opt    =    getOptions().get(option);    	non-compiled	[CE]  not  a  statement	2	None	replace
15	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(cmd,  option);  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOptions().get(cmd,  option);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(cmd,  option);	  Option    opt    =    getOptions().get(option);    	non-compiled	[CE]  not  a  statement	2	None	replace
16	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(option,  cmd);  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOptions().get(option,  cmd);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(option,  cmd);	  Option    opt    =    getOptions().get(option);    	non-compiled	[CE]  not  a  statement	2	None	replace
17	[BUG]  [BUGGY]  Option  option  =  getOption(cmd);  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOption(cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(cmd);	      Option    option    =    getOption(option);    	non-compiled	[CE]  not  a  statement	15	None	replace
18	[BUG]  [BUGGY]  Option  option  =  getOptions(option);  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOptions(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions(option);	      Option    option    =    getOption(option);    	non-compiled	[CE]  not  a  statement	15	None	replace
19	[BUG]  [BUGGY]  Option  option  =  getOption(option,  cmd);  [CE]  not  a  statement  [FE]                AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOption(option,  cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(option,  cmd);	      Option    option    =    getOption(option);    	non-compiled	[CE]  not  a  statement	15	None	replace
20	[BUG]  [BUGGY]  Option  cmd  =  getOptions().get(option);  [CE]  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOptions().get(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().get(option);	      Option    cmd    =    getOptions();    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(cmd);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOptions().getOption(cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(cmd);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	11	None	replace
22	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  options);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOptions().getOption(cmd,  options);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(cmd,  options);	  Option    opt    =    getOptions().getOption(cmd);    	non-compiled	[CE]  not  a  statement	1	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  options.getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  options.getOption(option);	      Option    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  not  a  statement	13	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  properties.getOption(option);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  properties.getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  properties.getOption(option);	      Option    cmd    =    cmd.getOption(option);    	non-compiled	[CE]  not  a  statement	13	None	replace
25	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOptions();  [CE]  class  or  interface  expected  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Enumeration  <  Option>  opt  =  options.getOptions();  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  options.getOptions();	      Enumeration    <    Option>    opt    =    cmd.getOptions();    	non-compiled	[CE]  class  or  interface  expected	6	None	replace
26	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(cmd);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOptions().getOption(cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(cmd);	      Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	10	None	replace
27	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  cmd);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOptions().getOption(option,  cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(option,  cmd);	      Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	10	None	replace
28	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(option);  [CE]  class  or  interface  expected  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Enumeration  <  Option>  opt  =  getOptions().getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  getOptions().getOption(option);	      Enumeration    <    Option>    opt    =    cmd.getOption(option);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
29	[BUG]  [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  [CE]  class  or  interface  expected  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Enumeration  <  Option>  opt  =  options.getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Enumeration  <  Option>  opt  =  options.getOption(option);	      Enumeration    <    Option>    opt    =    cmd.getOption(option);    	non-compiled	[CE]  class  or  interface  expected	7	None	replace
30	[BUG]  [BUGGY]  Option  opt  =  getOption(option.getOption(cmd));  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(option.getOption(cmd));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(option.getOption(cmd));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
31	[BUG]  [BUGGY]  Option  opt  =  getOption(options.getOption(cmd));  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(options.getOption(cmd));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(options.getOption(cmd));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  value);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOptions().getOption(option,  value);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOptions().getOption(option,  value);	      Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	10	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  value);  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOption(option,  value);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOption(option,  value);	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  not  a  statement	8	None	replace
34	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  value);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOptions().getOption(option,  value);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  value);	  Option    opt    =    getOptions().getOption(option,    cmd);    	non-compiled	[CE]  not  a  statement	9	None	replace
35	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  not  a  statement  [FE]        AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  options.getOption(option);	      Option    option    =    cmd.getOption(option);    	non-compiled	[CE]  not  a  statement	5	None	replace
36	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  cmd);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOptions().getOption(option,  cmd);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  cmd);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	11	None	replace
37	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value);  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  cmd  =  getOptions().getOption(option,  value);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	11	None	replace
38	[BUG]  [BUGGY]  Option  opt  =  e.getOption(option);  [CE]  not  a  statement  [FE]              AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  e.getOption(option);  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  e.getOption(option);	      	non-compiled	[CE]  not  a  statement	4	None	replace
39	[BUG]  [BUGGY]  Option  opt  =  getOption(properties.getOption(option));  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  opt  =  getOption(properties.getOption(option));  [BUGGY]        String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(properties.getOption(option));	  Option    opt    =    getOption(cmd.getOption(option));    	non-compiled	[CE]  not  a  statement	3	None	replace
40	[BUG]  [BUGGY]  Option  option  =  getOption(option,  value);  [CE]  not  a  statement  [FE]            AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  option  =  getOption(option,  value);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  option  =  getOption(option,  value);	      Option    option    =    getOption(option);    	non-compiled	[CE]  not  a  statement	15	None	replace
41	[BUG]  [BUGGY]  Option  options  =  getOptions().getOption(option);  [CE]  not  a  statement  [FE]          AlreadySelectedException    [CONTEXT]    {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {    [BUGGY]  Option  options  =  getOptions().getOption(option);  [BUGGY]    Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  options  =  getOptions().getOption(option);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  not  a  statement	11	None	replace
