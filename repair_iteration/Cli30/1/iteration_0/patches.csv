bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(cmd);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]    AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(cmd);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(cmd);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	1	None	replace
2	[BUG]  [BUGGY]  Option  opt  =  getOptions().get(option);  [CE]  cannot  find  symbol  [FE]      AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().get(option);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().get(option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
3	[BUG]  [BUGGY]  Option  opt  =  getOption(cmd.getOption(option));  [CE]  cannot  find  symbol  [FE]        AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOption(cmd.getOption(option));  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOption(cmd.getOption(option));	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  opt  [FE]          AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	  	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol  opt	1	None	replace
5	[BUG]  [BUGGY]    Option  option  =  cmd.getOption(option);  [CE]  not  a  statement  [FE]    AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  option  =  cmd.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  option  =  cmd.getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
6	[BUG]  [BUGGY]    Enumeration  <  Option>  opt  =  cmd.getOptions();  [CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)  [FE]      AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Enumeration  <  Option>  opt  =  cmd.getOptions();  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Enumeration  <  Option>  opt  =  cmd.getOptions();		non-compiled	[CE]  variable  iterator  is  already  defined  in  method  parse(Options,String[],Properties,boolean)	2	None	add
7	[BUG]  [BUGGY]    Enumeration  <  Option>  opt  =  cmd.getOption(option);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Enumeration  <  Option>  opt  =  cmd.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Enumeration  <  Option>  opt  =  cmd.getOption(option);		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	2	None	add
8	[BUG]  [BUGGY]    Option  cmd  =  getOption(option);  [CE]  not  a  statement  [FE]          AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  cmd  =  getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  cmd  =  getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
9	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  cmd);  [CE]  not  a  statement  [FE]    AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  cmd);  [BUGGY]      String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	Option  opt  =  getOptions().getOption(option,  cmd);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  not  a  statement	1	None	replace
10	[BUG]  [BUGGY]    Option  option  =  getOptions().getOption(option);  [CE]  not  a  statement  [FE]    AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  option  =  getOptions().getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  option  =  getOptions().getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
11	[BUG]  [BUGGY]    Option  cmd  =  getOptions().getOption(option);  [CE]  not  a  statement  [FE]      AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  cmd  =  getOptions().getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  cmd  =  getOptions().getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
12	[BUG]  [BUGGY]    Option  cmd  =  getOptions();  [CE]  not  a  statement  [FE]        AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  cmd  =  getOptions();  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  cmd  =  getOptions();		non-compiled	[CE]  not  a  statement	2	None	add
13	[BUG]  [BUGGY]    Option  cmd  =  cmd.getOption(option);  [CE]  not  a  statement  [FE]    AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  cmd  =  cmd.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  cmd  =  cmd.getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
14	[BUG]  [BUGGY]    Option  cmd  =  e.getOption(option);  [CE]  not  a  statement  [FE]      AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  cmd  =  e.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  cmd  =  e.getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
15	[BUG]  [BUGGY]    Option  option  =  getOption(option);  [CE]  not  a  statement  [FE]        AlreadySelectedException  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    Option  option  =  getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	    Option  option  =  getOption(option);		non-compiled	[CE]  not  a  statement	2	None	add
