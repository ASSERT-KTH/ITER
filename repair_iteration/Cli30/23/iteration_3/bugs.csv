bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(option.hasArg()  &&!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&!cmd.hasOption(option)&&!option.hasArg())  {	  if(option.hasArg()    ||!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  &&!cmd.hasOption(option)&&!option.hasArg())  {	  if(option    ==    null    ||!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
3	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasArg(option))  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&!cmd.hasArg(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!cmd.hasArg(option))  {	  if(option!=    null    ||!cmd.hasArg(option))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
4	[BUG]  [BUGGY]  if(cmd  ==  null  ||!cmd.hasArg(option))  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(cmd  ==  null  ||!cmd.hasArg(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(cmd  ==  null  ||!cmd.hasArg(option))  {	  if(option!=    null    ||!cmd.hasArg(option))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
5	[BUG]  [BUGGY]  Option  options  =  option.getOption(option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  option.getOption(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  option.getOption(option);	  Option    options    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  Option  options  =  options.getOptions(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOptions(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOptions(option,  expectedOpts);	  Option    options    =    options.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
7	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().toString();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().toString();	  Enumeration    <    String>    options    =    e.nextElement().getValues();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
8	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getValues(option);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getValues(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getValues(option);	  Enumeration    <    String>    options    =    e.nextElement().getValues();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
9	[BUG]  [BUGGY]  Enumeration  cmd  =  e.nextElement().getArgumentElement();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.nextElement().getArgumentElement();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.nextElement().getArgumentElement();	  Enumeration    cmd    =    e.getArgumentElement();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
10	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getCmdElements();  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.getCmdElements();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getCmdElements();	  Enumeration    cmd    =    e.getArgumentElement();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
11	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getArgumentElements();  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.getArgumentElements();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getArgumentElements();	  Enumeration    cmd    =    e.getArgumentElement();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
12	[BUG]  [BUGGY]  if(option.hasArg()  &&  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&  option.hasArg())  {	  if(option.hasArg()    ||    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
13	[BUG]  [BUGGY]  if(option.hasOptionType()  ||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOptionType()  ||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOptionType()  ||  option.hasArg())  {	  if(option.hasArg()    ||    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)+  1L;  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option)+  1L;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option)+  1L;	  Option    option    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)+  2;  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option)+  2;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option)+  2;	  Option    option    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)+  0;  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option)+  0;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option)+  0;	  Option    option    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  Enumeration  cmd  =  options.getCmd(option);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  options.getCmd(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  options.getCmd(option);	  Enumeration    cmd    =    options.getCmd();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
18	[BUG]  [BUGGY]  Enumeration  cmd  =  options.getParent();  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  options.getParent();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  options.getParent();	  Enumeration    cmd    =    options.getCmd();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
19	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  1L;  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option)+  1L;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option)+  1L;	  Option    cmd    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  2;  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option)+  2;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option)+  2;	  Option    cmd    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  0;  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option)+  0;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option)+  0;	  Option    cmd    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  if(option!=  null  ||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  ||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  ||  option.hasArg())  {	  if(option!=    null    &&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
23	[BUG]  [BUGGY]  if(option  ==  null  &&  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option  ==  null  &&  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  &&  option.hasArg())  {	  if(option!=    null    &&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
24	[BUG]  [BUGGY]  if(option!=  null  &&  option.hasValue())  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  option.hasValue())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  option.hasValue())  {	  if(option!=    null    &&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
25	[BUG]  [BUGGY]  if(option!=  null  ||!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  ||!option.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  ||!option.hasOption(option))  {	  if(option!=    null    &&!option.hasOption(cmd))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
26	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  option.equals(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.equals(option))  {	  if(option.hasArg()    &&    option.equals(option))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
27	[BUG]  [BUGGY]  if(option.hasValue()  &&  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasValue()  &&  option.equals(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasValue()  &&  option.equals(option))  {	  if(option.hasArg()    &&    option.equals(option))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
28	[BUG]  [BUGGY]  if(option.hasArg()  &&  options.equals(option))  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&  options.equals(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&  options.equals(option))  {	  if(option.hasArg()    &&    option.equals(option))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
29	[BUG]  [BUGGY]  if(option  ==  null  ||!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option  ==  null  ||!option.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  ||!option.hasOption(option))  {	  if(option    ==    null    &&!option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
30	[BUG]  [BUGGY]  if(option.hasArg()  &&  option.hasValue())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&  option.hasValue())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&  option.hasValue())  {	  if(option.hasArg()    ||    option.hasValue())    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
31	[BUG]  [BUGGY]  if(option.hasValue()  ||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasValue()  ||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasValue()  ||  option.hasArg())  {	  if(option.hasArg()    ||    option.hasValue())    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
32	[BUG]  [BUGGY]  if(option.hasType()  ||  option.hasValue())  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasType()  ||  option.hasValue())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasType()  ||  option.hasValue())  {	  if(option.hasArg()    ||    option.hasValue())    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  if(option.hasArg()  &&  option.hasExpression())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&  option.hasExpression())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&  option.hasExpression())  {	  if(option.hasArg()    ||    option.hasExpression())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
35	[BUG]  [BUGGY]  if(option.hasExpression()  ||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasExpression()  ||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasExpression()  ||  option.hasArg())  {	  if(option.hasArg()    ||    option.hasExpression())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
36	[BUG]  [BUGGY]  if(option.hasArg()  ||  options.hasExpression())  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  options.hasExpression())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  options.hasExpression())  {	  if(option.hasArg()    ||    option.hasExpression())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
37	[BUG]  [BUGGY]  if(option.hasArg()  &&  option.hasNext())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&  option.hasNext())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&  option.hasNext())  {	  if(option.hasArg()    ||    option.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
38	[BUG]  [BUGGY]  if(option.hasNext()  ||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasNext()  ||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasNext()  ||  option.hasArg())  {	  if(option.hasArg()    ||    option.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
39	[BUG]  [BUGGY]  if(option.hasValue()  ||  option.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasValue()  ||  option.hasNext())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasValue()  ||  option.hasNext())  {	  if(option.hasArg()    ||    option.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
40	[BUG]  [BUGGY]  if(option.hasOption(option)||!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||!option.isEmpty())  {	  if(option.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
41	[BUG]  [BUGGY]  if(option.hasOption(option)||  option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||  option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||  option.isEmpty())  {	  if(option.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
42	[BUG]  [BUGGY]  if(!option.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(!option.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(!option.hasOption(option)&&!option.isEmpty())  {	  if(option.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
43	[BUG]  [BUGGY]  Enumeration  cmd  =  e.nextElement().toString();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.nextElement().toString();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.nextElement().toString();	  Enumeration    cmd    =    e.nextElement().getCmd();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  Enumeration  cmd  =  e.nextElement().getCmd()  +  1;  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.nextElement().getCmd()  +  1;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.nextElement().getCmd()  +  1;	  Enumeration    cmd    =    e.nextElement().getCmd();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
45	[BUG]  [BUGGY]  Enumeration  cmd  =  e.nextElement().getCmd()  +  option;  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.nextElement().getCmd()  +  option;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.nextElement().getCmd()  +  option;	  Enumeration    cmd    =    e.nextElement().getCmd();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
46	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  option);	  Option    cmd    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
47	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  e.nextToken());  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  e.nextToken());  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  e.nextToken());	  Option    cmd    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  e.toString());  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  e.toString());  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  e.toString());	  Option    cmd    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  value,  expectedOpts);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
50	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  currentToken);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  value,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  value,  currentToken);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
51	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value  -  1);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  value  -  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  value  -  1);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
52	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOptions(option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOptions(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getOptions(option);	  Enumeration    <    String>    options    =    e.nextElement().getOptions();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
53	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOption(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOption(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getOption(option);	  Enumeration    <    String>    options    =    e.nextElement().getOptions();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
54	[BUG]  [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  &&!cmd.hasOption(option)&&!option.isEmpty())  {	  if(option    ==    null    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  e.nextToken());  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  e.nextToken());  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  e.nextToken());	  Option    option    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  e.toString());  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  e.toString());  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  e.toString());	  Option    option    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  option);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  option);	  Option    option    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
58	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  e);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  e);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts,  e);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
59	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts,  currentToken);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
60	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  true);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  true);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts,  true);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
61	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  false);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  false);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts,  false);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  currentOption.getOption(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  currentOption.getOption(option,  expectedOpts);	  Option    options    =    currentOption.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
63	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getCmd().enumerator(option);  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.getCmd().enumerator(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getCmd().enumerator(option);	  Enumeration    cmd    =    e.getCmd().enumerator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
64	[BUG]  [BUGGY]  Enumeration  cmd  =  options.getCmd().enumerator();  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  options.getCmd().enumerator();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  options.getCmd().enumerator();	  Enumeration    cmd    =    e.getCmd().enumerator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
65	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getCmd().enumerator(0);  [CE]  illegal  start  of  type  [FE]                            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.getCmd().enumerator(0);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getCmd().enumerator(0);	  Enumeration    cmd    =    e.getCmd().enumerator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption(option  +  1L);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option  +  1L);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option  +  1L);	  Option    option    =    options.getOption(option    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  if(option.hasOption(option)||!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||!option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||!option.hasArg())  {	  if(option.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
68	[BUG]  [BUGGY]  if(option.hasArg()  &&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  &&!option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&!option.hasArg())  {	  if(option.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
69	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  options.getOptions();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  options.getOptions();	  Enumeration    <    String>    options    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
70	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  currentOption.getOptions();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  currentOption.getOptions();	  Enumeration    <    String>    options    =    option.getOptions();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
71	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getOptions(option,  expectedOpts);	  Enumeration    <    String>    options    =    e.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option  +  1);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option  +  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getOptions(option  +  1);	  Enumeration    <    String>    options    =    e.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
73	[BUG]  [BUGGY]  if(option.isEmpty()  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.isEmpty()  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.isEmpty()  &&!cmd.hasOption(option)&&!option.isEmpty())  {	  if(option.isEmpty()    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
74	[BUG]  [BUGGY]  Option  options  =  e.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  e.getOption(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  e.getOption(option,  expectedOpts);	  Option    options    =    e.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
75	[BUG]  [BUGGY]  if(option.hasOption(option)||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||  option.hasArg())  {	  if(option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
76	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  option.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasOption(option))  {	  if(option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
77	[BUG]  [BUGGY]  if(!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(!option.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(!option.hasOption(option))  {	  if(option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
78	[BUG]  [BUGGY]  Option  option  =  properties.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  properties.getOption(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  properties.getOption(option,  expectedOpts);	  Option    option    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
79	[BUG]  [BUGGY]  Option  option  =  e.getOption(option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  e.getOption(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  e.getOption(option);	  Option    option    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
80	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getAttributes(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getAttributes(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getAttributes(option);	  Enumeration    <    String>    options    =    e.nextElement().getAttributes();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
81	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  e);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  e);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  e);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
82	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  true);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  true);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  true);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
83	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  skipParsing);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  skipParsing);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  skipParsing);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
84	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  false);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  false);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  false);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
85	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(),  option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  currentOption.getOptions(),  option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  currentOption.getOptions(),  option);	  Option    options    =    currentOption.getOptions();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
86	[BUG]  [BUGGY]  Option  options  =  e.getOptions(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  e.getOptions(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  e.getOptions(option,  expectedOpts);	  Option    options    =    e.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
87	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  currentOption.getOptions(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  currentOption.getOptions(option);	  Option    options    =    e.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
88	[BUG]  [BUGGY]  Option  option  =  options.getOption();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption();  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption();	  Option    option    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
89	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  value,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  value,  expectedOpts);	  Option    options    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
90	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  value,  currentToken);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  value,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  value,  currentToken);	  Option    options    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
91	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  value  -  1);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  value  -  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  value  -  1);	  Option    options    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
92	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  value,  e);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  value,  e);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  value,  e);	  Option    options    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
93	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getAttributes(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getAttributes(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getAttributes(option,  expectedOpts);	  Enumeration    <    String>    options    =    e.getAttributes(option);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
94	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getAttributes(option  +  1);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getAttributes(option  +  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getAttributes(option  +  1);	  Enumeration    <    String>    options    =    e.getAttributes(option);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
95	[BUG]  [BUGGY]  Option  options  =  properties.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  properties.getOption(option,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  properties.getOption(option,  expectedOpts);	  Option    options    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
96	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  e);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  e);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  expectedOpts,  e);	  Option    option    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
97	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  expectedOpts,  currentToken);	  Option    option    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  true);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  true);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  expectedOpts,  true);	  Option    option    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
99	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  false);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  false);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  expectedOpts,  false);	  Option    option    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
100	[BUG]  [BUGGY]  if(option.hasProperty(option)||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasProperty(option)||  option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasProperty(option)||  option.hasArg())  {	  if(option.hasProperty(option))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
101	[BUG]  [BUGGY]  if(option.hasProperty(option)||  options.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasProperty(option)||  options.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasProperty(option)||  options.hasOption(option))  {	  if(option.hasProperty(option))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
102	[BUG]  [BUGGY]  if(!option.hasProperty(option))  {  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(!option.hasProperty(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(!option.hasProperty(option))  {	  if(option.hasProperty(option))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
103	[BUG]  [BUGGY]  if(option.hasProperty(option)||  option.hasValue(option))  {  [CE]  illegal  start  of  type  [FE]                          AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasProperty(option)||  option.hasValue(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasProperty(option)||  option.hasValue(option))  {	  if(option.hasProperty(option))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
104	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOpts();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOpts();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getOpts();	  Enumeration    <    String>    options    =    e.getOpts();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
105	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  option.getOpts();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  option.getOpts();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  option.getOpts();	  Enumeration    <    String>    options    =    e.getOpts();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
106	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getAllElements();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getAllElements();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getAllElements();	  Enumeration    <    String>    options    =    e.getAllElements();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
107	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getElements();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getElements();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getElements();	  Enumeration    <    String>    options    =    e.getAllElements();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
108	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  option.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasOption(option)&&!option.isEmpty())  {	  if(option.hasArg()    &&!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
109	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.values().iterator().next();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.values().iterator().next();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.values().iterator().next();	  Enumeration    <    String>    options    =    e.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
110	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  properties.values();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  properties.values();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  properties.values();	  Enumeration    <    String>    options    =    e.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
111	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().values();  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().values();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().values();	  Enumeration    <    String>    options    =    e.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
112	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value,  expectedOpts);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  value,  expectedOpts);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  value,  expectedOpts);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
113	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value  -  1);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  value  -  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  value  -  1);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
114	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value,  currentToken);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  value,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  value,  currentToken);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
115	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  currentToken);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  currentToken);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
116	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  value);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  value);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  value);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
117	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  value);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts,  value);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  expectedOpts,  value);	  Option    option    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
118	[BUG]  [BUGGY]  Option  options  =  options.getOptions(option,  value);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOptions(option,  value);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOptions(option,  value);	  Option    options    =    options.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
119	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  value  +  1);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  value  +  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  value  +  1);	  Option    options    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
120	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasKey())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  option.hasKey())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasKey())  {	  if(option.hasArg()    ||    option.hasValue())    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
121	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value  +  1);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  value  +  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  value  +  1);	  Option    cmd    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
122	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  value);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  value);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts,  value);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
123	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  currentToken);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  currentToken);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  currentToken);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
124	[BUG]  [BUGGY]  Option  option  =  options.getOption(option  +  1).toLowerCase();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option  +  1).toLowerCase();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option  +  1).toLowerCase();	  Option    option    =    options.getOption(option    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
125	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  option  +  1);  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  option  +  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  option  +  1);	  Option    option    =    options.getOption(option    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
126	[BUG]  [BUGGY]  if(option!=  null  &&  option.hasProperty(option))  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  option.hasProperty(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  option.hasProperty(option))  {	  if(option.hasProperty(option))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
127	[BUG]  [BUGGY]  if(option.hasProperty(option)&&  options.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasProperty(option)&&  options.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasProperty(option)&&  options.hasOption(option))  {	  if(option.hasProperty(option))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
128	[BUG]  [BUGGY]  Option  cmd  =  options.getOptionCmd(option);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOptionCmd(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOptionCmd(option);	  Option    cmd    =    options.getOption();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
129	[BUG]  [BUGGY]  if(option.hasArgs()  ||  option.hasExpression())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArgs()  ||  option.hasExpression())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArgs()  ||  option.hasExpression())  {	  if(option.hasArg()    ||    option.hasExpression())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
130	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option,  option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option,  option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getOptions(option,  option);	  Enumeration    <    String>    options    =    e.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
131	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  e.nextElement());  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  e.nextElement());  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  e.nextElement());	  Option    option    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
132	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  option.values();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  option.values();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  option.values();	  Enumeration    <    String>    options    =    e.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
133	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasArgs())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  option.hasArgs())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasArgs())  {	  if(option.hasArg()    ||    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value  +  1);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  value  +  1);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  value  +  1);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
135	[BUG]  [BUGGY]  if(option.hasOption(option)&&!option.isEmpty()  ||  options.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)&&!option.isEmpty()  ||  options.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&!option.isEmpty()  ||  options.hasOption(option))  {	  if(option.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
136	[BUG]  [BUGGY]  if(option  ==  null  ||!option.isEmpty()  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option  ==  null  ||!option.isEmpty()  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  ||!option.isEmpty()  ||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(option.isEmpty()    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
137	[BUG]  [BUGGY]  if(option.hasArg()  ||  options.hasNext())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasArg()  ||  options.hasNext())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  options.hasNext())  {	  if(option.hasArg()    ||    option.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
138	[BUG]  [BUGGY]  if(option!=  null  &&  option.hasArg()  &&  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  option.hasArg()  &&  option.equals(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  option.hasArg()  &&  option.equals(option))  {	  if(option.hasArg()    &&    option.equals(option))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  if(option!=  null  &&  option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  option.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  option.hasOption(option))  {	  if(option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
140	[BUG]  [BUGGY]  if(option.hasOption(option)||  options.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||  options.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||  options.hasOption(option))  {	  if(option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
141	[BUG]  [BUGGY]  if(option!=  null  &&  options.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  options.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  options.hasArg())  {	  if(option!=    null    &&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
142	[BUG]  [BUGGY]  if(option!=  null  &&  options.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  options.hasOption(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  options.hasOption(option))  {	  if(option!=    null    &&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
143	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(option);  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  option.getOption(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  option.getOption(option);	  Option    cmd    =    option.getOption();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  Enumeration  cmd  =  options.getOptionCmd();  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  options.getOptionCmd();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  options.getOptionCmd();	  Enumeration    cmd    =    options.getCmd();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
145	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOpts().iterator().next();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getOpts().iterator().next();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getOpts().iterator().next();	  Enumeration    <    String>    options    =    e.getOpts();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
146	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)/  1;  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option)/  1;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option)/  1;	  Option    cmd    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
147	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  e;  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option)+  e;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option)+  e;	  Option    cmd    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
148	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.keySet();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.keySet();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.keySet();	  Enumeration    <    String>    options    =    e.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
149	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.properties();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.properties();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.properties();	  Enumeration    <    String>    options    =    e.values();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
150	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts,  option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts,  option);	  Option    options    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
151	[BUG]  [BUGGY]  Option  cmd  =  options.getOptionValue(option);  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOptionValue(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOptionValue(option);	  Option    cmd    =    options.getOption();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  currentOption.getOption(option,  value);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  currentOption.getOption(option,  value);	  Option    options    =    currentOption.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
153	[BUG]  [BUGGY]  if(option!=  null  &&!option.hasValue(option))  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&!option.hasValue(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!option.hasValue(option))  {	  if(option!=    null    &&!option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
154	[BUG]  [BUGGY]  if(option!=  null  &&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&!option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!option.hasArg())  {	  if(option!=    null    &&!option.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
155	[BUG]  [BUGGY]  Option  options  =  properties.getOptions(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  options  =  properties.getOptions(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  properties.getOptions(option);	  Option    options    =    options.getOptions(option);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
156	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  e.nextElement());  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  e.nextElement());  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  e.nextElement());	  Option    cmd    =    options.getOption(option,    e);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
157	[BUG]  [BUGGY]  Option  option  =  e.nextElement().getOption();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  e.nextElement().getOption();  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  e.nextElement().getOption();	  Option    option    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
158	[BUG]  [BUGGY]  if(option.hasOption(option)&&!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)&&!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&!cmd.hasOption(option)&&!option.isEmpty())  {	  if(option.hasArg()    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
159	[BUG]  [BUGGY]  if(option.hasOption(option)||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(option.hasArg()    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
160	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getCmd().entrySet().iterator();  [CE]  illegal  start  of  type  [FE]                        AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.getCmd().entrySet().iterator();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getCmd().entrySet().iterator();	  Enumeration    cmd    =    e.getCmd().enumerator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
161	[BUG]  [BUGGY]  if(cmd  ==  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(cmd  ==  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(cmd  ==  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(option    ==    null    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
162	[BUG]  [BUGGY]  Enumeration  cmd  =  e.currentElement().getCmd();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  e.currentElement().getCmd();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.currentElement().getCmd();	  Enumeration    cmd    =    e.nextElement().getCmd();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
163	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  e);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option,  value,  e);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  value,  e);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
164	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)/  1;  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option)/  1;  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option)/  1;	  Option    option    =    options.getOption(option)+    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
165	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getAllElements(option);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  <  String>  options  =  e.getAllElements(option);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getAllElements(option);	  Enumeration    <    String>    options    =    e.getAllElements();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
166	[BUG]  [BUGGY]  if(option.hasOption(option)||  option.hasExpression())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||  option.hasExpression())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||  option.hasExpression())  {	  if(option.hasArg()    ||    option.hasExpression())    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
167	[BUG]  [BUGGY]  if(cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(cmd.hasOption(option)&&!option.isEmpty())  {	  if(option.isEmpty()    ||!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
168	[BUG]  [BUGGY]  if(option.hasOption(option)&&!option.isEmpty()  ||  option.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)&&!option.isEmpty()  ||  option.length()  ==  0)  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&!option.isEmpty()  ||  option.length()  ==  0)  {	  if(option.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
169	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.length()  >  0)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.length()  >  0)  {  expectedOpts.add(option);  }  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option);  if(option!=  null  &&  option.length()  >  0)  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
170	[BUG]  [BUGGY]  Enumeration  cmd  =  option.getCmd();  [CE]  illegal  start  of  type  [FE]                      AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Enumeration  cmd  =  option.getCmd();  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  option.getCmd();	  Enumeration    cmd    =    options.getCmd();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
171	[BUG]  [BUGGY]  if(option.hasOption(option)&&!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)&&!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&!cmd.hasOption(option)&&!option.hasArg())  {	  if(option.hasArg()    ||!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
172	[BUG]  [BUGGY]  if(option.hasOption(option)||  option.hasValue())  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||  option.hasValue())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||  option.hasValue())  {	  if(option.hasArg()    ||    option.hasValue())    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
173	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  null);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts,  null);  [BUGGY]      if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts,  null);	  Option    cmd    =    options.getOption(option,    expectedOpts);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
174	[BUG]  [BUGGY]  if(option.hasOption(option)&&  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)&&  option.equals(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&  option.equals(option))  {	  if(option.hasArg()    &&    option.equals(option))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
175	[BUG]  [BUGGY]  if(option.hasProperty(option)&&  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasProperty(option)&&  option.equals(option))  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasProperty(option)&&  option.equals(option))  {	  if(option.hasArg()    &&    option.equals(option))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
176	[BUG]  [BUGGY]  if(option!=  null  &&  option.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option!=  null  &&  option.length()  >  0)  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  option.length()  >  0)  {	  if(option!=    null    &&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
177	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option);  if(option  ==  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(option);    if(option    ==    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
178	[BUG]  [BUGGY]  if(option.hasOption(option)||  option.hasNext())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException      [CONTEXT]      {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();      [BUGGY]  if(option.hasOption(option)||  option.hasNext())  {  [BUGGY]      {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)||  option.hasNext())  {	  if(option.hasArg()    ||    option.hasNext())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
