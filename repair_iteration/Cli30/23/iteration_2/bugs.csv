bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  currentOption.getOptions();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  currentOption.getOptions();	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null)  {  expectedOpts.add(option);  }  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option);  if(option  ==  null)  {  expectedOpts.add(option);  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option,  expectedOpts);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  expectedOpts);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)+  1;  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option)+  1;  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option)+  1;	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(option  +  1);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option  +  1);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option  +  1);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  if(cmd  ==  null  ||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(cmd  ==  null  ||!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(cmd  ==  null  ||!cmd.hasOption(option))  {	  if(option    ==    null    ||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  e.getOption(option);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  e.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  e.getOption(option);	      Option    cmd    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  option.getOption();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  option.getOption();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  option.getOption();	      Option    cmd    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  Option  cmd  =  options.getOption();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  options.getOption();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption();	      Option    cmd    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option)+  1;  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  options.getOption(option)+  1;  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option)+  1;	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  value);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  e);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  options.getOption(option,  e);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  e);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getAllElements();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.getAllElements();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getAllElements();	      Enumeration    <    String>    options    =    e.getValues();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  Option  options  =  e.getOption(option);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  e.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  e.getOption(option);	      Option    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  option.getOptions();	      Option    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  Enumeration  cmd  =  e.nextElement().getCmd();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  cmd  =  e.nextElement().getCmd();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.nextElement().getCmd();	      Enumeration    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  Enumeration  cmd  =  options.getCmd();  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  cmd  =  options.getCmd();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  options.getCmd();	      Enumeration    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getCmd().enumerator();  [CE]  illegal  start  of  type  [FE]                    AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  cmd  =  e.getCmd().enumerator();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getCmd().enumerator();	      Enumeration    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  &&!cmd.hasOption(option))  {	  if(option!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOptions();  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOptions();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getOptions();	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getOptions(option);	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  option.getOptions();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  option.getOptions();	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  ||  option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasArg())  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasValue())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  ||  option.hasValue())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasValue())  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  if(option.hasProperty(option))  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasProperty(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasProperty(option))  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasOption(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option))  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(option!=  null  &&!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!option.hasOption(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!option.hasOption(option))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  if(option!=  null  &&!option.hasOption(cmd))  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!option.hasOption(cmd))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!option.hasOption(cmd))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
30	[BUG]  [BUGGY]  if(option.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
31	[BUG]  [BUGGY]  if(option.hasArg()  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&!cmd.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
32	[BUG]  [BUGGY]  if(option.hasArg()  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
33	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getAttributes(option);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.getAttributes(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getAttributes(option);	      Enumeration    <    String>    options    =    e.getAttributes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getAttributes();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getAttributes();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getAttributes();	      Enumeration    <    String>    options    =    e.getAttributes();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  options.getOption(option,  expectedOpts);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  expectedOpts);	      Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
36	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(option);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  currentOption.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  currentOption.getOption(option);	      Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
37	[BUG]  [BUGGY]  if(option.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasOption(option)&&!option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasOption(option)&&!option.hasArg())  {	  if(!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  if(option.hasArg()  ||!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  ||!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||!cmd.hasOption(option)&&!option.hasArg())  {	  if(!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  ||!cmd.hasOption(option)&&!option.hasArg())  {	  if(!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
40	[BUG]  [BUGGY]  if(cmd  ==  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(cmd  ==  null  &&!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(cmd  ==  null  &&!cmd.hasOption(option))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  if(option  ==  null  &&!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  &&!option.hasOption(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  &&!option.hasOption(option))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
43	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  ||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  if(option.isEmpty()  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.isEmpty()  ||!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.isEmpty()  ||!cmd.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option,  value);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  value);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  e);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option,  e);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  options.getOption(option,  e);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasArg(option))  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!cmd.hasArg(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  ||!cmd.hasArg(option))  {	  if(option    ==    null    ||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasArg(option))  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  ||!cmd.hasArg(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  ||!cmd.hasArg(option))  {	  if(option    ==    null    ||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  if(option!=  null  &&  option.hasArg())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&  option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&  option.hasArg())  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  if(option.hasArg()  &&  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  &&  option.equals(option))  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  &&  option.equals(option))  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  ||!cmd.hasOption(option)&&!option.hasArg())  {	  if(!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
52	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOpts();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.getOpts();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.getOpts();	      Enumeration    <    String>    options    =    e.getValues();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  options.getOption(option,  expectedOpts);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  cmd  =  options.getOption(option,  expectedOpts);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  Option  options  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  options.getOption(option,  value);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOption(option,  value);	      Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
55	[BUG]  [BUGGY]  Option  options  =  options.getOptions(option);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  options.getOptions(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  options.getOptions(option);	      Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  Enumeration  cmd  =  e.getArgumentElement();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  cmd  =  e.getArgumentElement();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  cmd  =  e.getArgumentElement();	      Enumeration    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getValues();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getValues();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.nextElement().getValues();	      Enumeration    <    String>    options    =    e.getValues();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.values();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.values();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Enumeration  <  String>  options  =  e.values();	      Enumeration    <    String>    options    =    e.getValues();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  Option  option  =  properties.getOption(option);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  properties.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  properties.getOption(option);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  Option  option  =  e.getOption();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  e.getOption();  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  option  =  e.getOption();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  Option  options  =  e.getOptions(option);  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  e.getOptions(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  e.getOptions(option);	      Option    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  Option  options  =  properties.getOption(option);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  options  =  properties.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	Option  options  =  properties.getOption(option);	      Option    options    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasNext())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  ||  option.hasNext())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasNext())  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  if(option.hasArg()  ||  option.hasExpression())  {  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg()  ||  option.hasExpression())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg()  ||  option.hasExpression())  {	  if(option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!cmd.hasOption(option)&&!option.isEmpty())  {	  if(!cmd.hasOption(option)&&!option.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
66	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]    {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!cmd.hasOption(option)&&!option.hasArg())  {	  if(!cmd.hasOption(option)&&!option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
