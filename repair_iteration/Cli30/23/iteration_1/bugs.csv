bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]    AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  ||!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
2	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]      AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option  ==  null  ||!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
3	[BUG]  [BUGGY]  if(option.hasArg())  {  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option.hasArg())  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option.hasArg())  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
4	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	  	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
5	[BUG]  [BUGGY]    Option  cmd  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]    AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Option  cmd  =  options.getOption(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Option  cmd  =  options.getOption(option);		non-compiled	[CE]  illegal  start  of  type	46	None	add
6	[BUG]  [BUGGY]    Enumeration  <  String>  options  =  e.getAttributes();  [CE]  illegal  start  of  type  [FE]      AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Enumeration  <  String>  options  =  e.getAttributes();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Enumeration  <  String>  options  =  e.getAttributes();		non-compiled	[CE]  illegal  start  of  type	46	None	add
7	[BUG]  [BUGGY]    Enumeration  <  String>  options  =  e.getValues();  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Enumeration  <  String>  options  =  e.getValues();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Enumeration  <  String>  options  =  e.getValues();		non-compiled	[CE]  illegal  start  of  type	46	None	add
8	[BUG]  [BUGGY]    Option  cmd  =  e.getOption();  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Option  cmd  =  e.getOption();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Option  cmd  =  e.getOption();		non-compiled	[CE]  illegal  start  of  type	46	None	add
9	[BUG]  [BUGGY]    Enumeration  cmd  =  e.getCmd();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Enumeration  cmd  =  e.getCmd();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Enumeration  cmd  =  e.getCmd();		non-compiled	[CE]  illegal  start  of  type	46	None	add
10	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]    AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(option!=  null  &&!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
11	[BUG]  [BUGGY]    Option  option  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]    AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Option  option  =  options.getOption(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Option  option  =  options.getOption(option);		non-compiled	[CE]  illegal  start  of  type	46	None	add
12	[BUG]  [BUGGY]    Enumeration  <  String>  options  =  e.getOptions();  [CE]  illegal  start  of  type  [FE]      AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Enumeration  <  String>  options  =  e.getOptions();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Enumeration  <  String>  options  =  e.getOptions();		non-compiled	[CE]  illegal  start  of  type	46	None	add
13	[BUG]  [BUGGY]    Option  options  =  e.getOptions();  [CE]  illegal  start  of  type  [FE]    AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Option  options  =  e.getOptions();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Option  options  =  e.getOptions();		non-compiled	[CE]  illegal  start  of  type	46	None	add
14	[BUG]  [BUGGY]    Option  options  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]      AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Option  options  =  options.getOption(option);  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Option  options  =  options.getOption(option);		non-compiled	[CE]  illegal  start  of  type	46	None	add
15	[BUG]  [BUGGY]    Option  options  =  options.getOptions();  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]    Option  options  =  options.getOptions();  [BUGGY]  if  (!cmd.hasOption(option))    {  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	    Option  options  =  options.getOptions();		non-compiled	[CE]  illegal  start  of  type	46	None	add
16	[BUG]  [BUGGY]  if(cmd!=  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]    AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(cmd!=  null  &&!cmd.hasOption(option))  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(cmd!=  null  &&!cmd.hasOption(option))  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
17	[BUG]  [BUGGY]  if(!cmd.hasOption(option)&&!option.isEmpty())  {  [CE]  illegal  start  of  type  [FE]      AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)&&!option.isEmpty())  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(!cmd.hasOption(option)&&!option.isEmpty())  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
18	[BUG]  [BUGGY]  if(!cmd.hasOption(option)&&!option.hasArg())  {  [CE]  illegal  start  of  type  [FE]        AlreadySelectedException  [CONTEXT]  {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  [BUGGY]  if(!cmd.hasOption(option)&&!option.hasArg())  {  [BUGGY]  {  Option  opt  =  options.getOption(option);    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [CLASS]  DefaultParser  [METHOD]  handleProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  Enumeration  e  Option  currentOption  opt  List  expectedOpts  String  currentToken  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	if(!cmd.hasOption(option)&&!option.hasArg())  {	if  (!cmd.hasOption(option))  {  	non-compiled	[CE]  illegal  start  of  type	45	None	replace
