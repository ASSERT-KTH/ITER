increase failing tests,296,replace, [FE] AssertionFailedError testPropertyOptionGroup,updateRequiredOptions(opt); ,requiredOptions.remove(opt);
increase failing tests,296,replace, [FE] MissingOptionException testPropertyOptionSingularValue,updateRequiredOptions(opt); ,requiredOptions.add(opt);
compilation error,296,replace,[CE] cannot find symbol,updateRequiredOptions(opt); ,addOption(opt);
increase failing tests,296,replace, [FE] AssertionFailedError testPropertyOptionGroup,updateRequiredOptions(opt); , 
compilation error,295,replace,[CE] method addOption in class CommandLine cannot be applied to given types;,cmd.addOption(opt); ,cmd.addOption(value);
compilation error,295,replace,[CE] method addOption in class CommandLine cannot be applied to given types;,cmd.addOption(opt); ,cmd.addOption(opt, value);
compilation error,295,replace,[CE] method addOption in class CommandLine cannot be applied to given types;,cmd.addOption(opt); ,cmd.addOption(option);
increase failing tests,295,replace, [FE] AssertionFailedError testPropertyOptionSingularValue,cmd.addOption(opt); , 
compilation error,259,add,[CE] cannot find symbol,,  properties.remove(properties.indexOf('n'));
compilation error,259,add,[CE] cannot find symbol,,  properties.add(new Property(value));
compilation error,259,add,[CE] no suitable method found for remove(int),,  properties.remove(properties.size() - 1);
compilation error,259,add,[CE] cannot find symbol,,  properties = getProperties();
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(!cmd.hasMoreProperty(property)) { return; }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(!cmd.hasMoreProperty(properties)) { return; }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(!cmd.hasMoreElements()) { return; }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(!cmd.hasMoreProperties()) { return; }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(!cmd.hasMoreOptions()) { return; }
compilation error,103,add,[CE] cannot find symbol,,  cmd.parse(options, arguments, properties);
compilation error,103,add,[CE] cannot find symbol,,  cmd.parse(options, arguments, properties, true);
compilation error,103,add,[CE] generics are not supported in -source 1.4,,  cmd.parse(options, arguments, properties); requiredOptions = new ArrayList < Option>();
compilation error,103,add,[CE] generics are not supported in -source 1.4,,  cmd.parse(options, arguments, properties); requiredOptions = new ArrayList < CommandLine>();
compilation error,103,add,[CE] cannot find symbol,,  cmd.parse(options, arguments, properties); requiredOptions = options.getRequiredOptions();
compilation error,103,replace,[CE] cannot find symbol,return parse(options, arguments, properties, false); ,return parseOptions(options, arguments, properties, true);
compilation error,103,replace,[CE] no suitable method found for parse(Options,String[],Properties,<null>),return parse(options, arguments, properties, false); ,return parse(options, arguments, properties, null);
increase failing tests,272,replace, [FE] AssertionFailedError testPropertyOptionSingularValue,if (opt.hasArg()) { ,if(!opt.hasArg()) {
compilation error,272,replace,[CE] class or interface expected,if (opt.hasArg()) { , 
compilation error,286,replace,[CE] illegal start of expression,else if (!("yes".equalsIgnoreCase(value)  || "true".equalsIgnoreCase(value)   || "1".equalsIgnoreCase(value))) ,else if(!("yes".equalsIgnoreCase(value)||"true".equalsIgnoreCase(value)||"1".equalsIgnoreCase(value))) {
compilation error,286,replace,[CE] unclosed string literal,else if (!("yes".equalsIgnoreCase(value)  || "true".equalsIgnoreCase(value)   || "1".equalsIgnoreCase(value))) ,else if(!("yes".equalsIgnoreCase(value)||"true".equalsIgnoreCase(value)||"1.equalsIgnoreCase(value))) {
compilation error,286,replace,[CE] unreachable statement,else if (!("yes".equalsIgnoreCase(value)  || "true".equalsIgnoreCase(value)   || "1".equalsIgnoreCase(value))) , 
compilation error,263,replace,[CE] cannot find symbol,if (!cmd.hasOption(option)) { ,if(!cmd.hasOption(option)|| e.hasMoreProperty(option)) {
compilation error,263,replace,[CE] class or interface expected,if (!cmd.hasOption(option)) { , 
increase failing tests,265,add, [FE] MissingOptionException testPropertyOptionSingularValue,,  requiredOptions.add(option);
compilation error,265,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(option);
compilation error,265,add,[CE] cannot find symbol,,  cmd.addValue(option);
compilation error,265,add,[CE] cannot find symbol,,  options.add(option);
compilation error,286,add,[CE] ,,  opt.addValueForProcessing(value);
compilation error,286,add,[CE] ,,  requiredOptions.remove(opt);
compilation error,286,add,[CE] ,,  cmd.addOption(opt); requiredOptions.remove(value);
increase failing tests,286,add, [FE] MissingOptionException testPropertyOptionSingularValue,,  if(opt.hasArg()) { requiredOptions.add(opt); }
compilation error,286,add,[CE] ,,  cmd.addOption(opt); requiredOptions.remove(option);
compilation error,270,add,[CE] cannot find symbol,,  properties.add(opt);
compilation error,270,add,[CE] variable properties is already defined in method processProperties(Properties),,  Properties properties = options.getProperty(option);
increase failing tests,270,add, [FE] MissingOptionException testPropertyOptionSingularValue,,  if(opt.hasArg()) { requiredOptions.add(opt); }
increase failing tests,270,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testPropertyOptionSingularValue,,  if(opt.hasArg()) { requiredOptions.remove(0); }
compilation error,265,replace,[CE] cannot find symbol,Option opt = getOptions().getOption(option); ,Option opt = options().getOption(option);
compilation error,265,replace,[CE] method getOption in class Options cannot be applied to given types;,Option opt = getOptions().getOption(option); ,Option opt = getOptions().getOption(option, options);
compilation error,259,replace,[CE] cannot find symbol,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.next(); e.hasMoreElements();) {
compilation error,259,replace,[CE] cannot find symbol,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.name(); e.hasMoreElements();) {
compilation error,259,replace,[CE] cannot find symbol,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.properties(); e.hasMoreElements();) {
compilation error,295,add,[CE] variable opt is already defined in method processProperties(Properties),,  Option opt = options.getOption(value);
compilation error,295,add,[CE] incompatible types,,  option = options.getOption(value);
increase failing tests,295,add, [FE] UnsupportedOperationException testPropertyOptionSingularValue,,  opt.addValue(value);
compilation error,295,add,[CE] cannot find symbol,,  opt.addOption(value);
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.next().toString();
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.getNextElement().toString();
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.nextNode().toString();
compilation error,263,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(option);
compilation error,263,add,[CE] cannot find symbol,,  cmd.addValue(option);
compilation error,263,add,[CE] cannot find symbol value,,  cmd.addValue(value);
compilation error,263,add,[CE] cannot find symbol value,,  cmd.addValue(option, value);
increase failing tests,272,add, [FE] UnsupportedOperationException testPropertyOptionSingularValue,,  opt.addValue(value);
compilation error,272,add,[CE] illegal start of expression,,  if(value!= null) { if(opt.hasArg()) { throw new IllegalArgumentException(""); }
compilation error,272,add,[CE] illegal start of expression,,  if(opt.hasArg()) { if(opt.hasArg()) { throw new IllegalArgumentException(""); }
increase failing tests,272,add, [FE] RuntimeException testPropertyOptionFlags,,  opt.addValueForProcessing(value);
compilation error,272,add,[CE] illegal start of expression,,  if(value!= null) { if(opt.hasArg()) { return; }
compilation error,270,replace,[CE] incompatible types,String value = properties.getProperty(option); ,String value = properties.get(option);
compilation error,270,replace,[CE] cannot find symbol,String value = properties.getProperty(option); ,String value = options.getProperty(option);
compilation error,270,replace,[CE] cannot find symbol,String value = properties.getProperty(option); ,String value = properties.getKey(option);
increase failing tests,270,add, [FE] UnsupportedOperationException testPropertyOptionSingularValue,,  opt.addValue(opt.getKey());
compilation error,270,add,[CE] cannot find symbol,,  opt.addValueToString(opt.getKey());
compilation error,270,add,[CE] illegal start of expression,,  if(opt.hasArg()) { String option = opt.getValue(); if(option.getArg().length == 0) { continue; }
compilation error,270,add,[CE] illegal start of expression,,  if(opt.hasArg()) { String option = opt.getValue(); if(option.getArgs().length == 0) { continue; }
compilation error,270,add,[CE] cannot find symbol,,  opt.addValueToProcessing(opt);
increase failing tests,296,replace, [FE] UnsupportedOperationException testPropertyOptionSingularValue,updateRequiredOptions(opt); ,opt.addValue(value);
compilation error,296,replace,[CE] cannot find symbol,updateRequiredOptions(opt); ,processOptions(opt);
compilation error,296,replace,[CE] method checkRequiredOptions in class Parser cannot be applied to given types;,updateRequiredOptions(opt); ,checkRequiredOptions(opt);
compilation error,270,replace,[CE] cannot find symbol,String value = properties.getProperty(option); ,String value = opt.getProperty(option);
compilation error,270,replace,[CE] cannot find symbol property,String value = properties.getProperty(option); ,String value = opt.getProperty(property);
compilation error,272,add,[CE] illegal start of expression,,  if(opt.hasArg()) { if(opt.getValues() == null || opt.getValues().length == 0) { continue; }
compilation error,272,add,[CE] illegal start of expression,,  if(opt.hasArg()) { if(opt.getValues() == null || opt.getValues().length == 0) { return; }
compilation error,272,add,[CE] illegal start of expression,,  if(opt.hasArg()) { if(opt.getValues() == null) { continue; }
compilation error,272,add,[CE] 'try' without 'catch' or 'finally',,  if(opt.hasArg()) { try { opt.addValueForProcessing(value); }
compilation error,103,add,[CE] cannot find symbol,,  cmd.parse(options, arguments, properties, false);
compilation error,103,add,[CE] cannot find symbol,,  requiredOptions.remove(options.getKey());
increase failing tests,103,add, [FE] NullPointerException testPropertyOverrideValues,,  requiredOptions.remove(arguments);
increase failing tests,296,add, [FE] AssertionFailedError testPropertyOptionMultipleValues,,  cmd.addOption(opt);
increase failing tests,296,add, [FE] UnsupportedOperationException testPropertyOptionSingularValue,,  if(opt.hasArg()) { opt.addValue(value); }
compilation error,263,add,[CE] cannot find symbol,,  CommandLine cmd = getOptions().getCmd(option);
compilation error,263,add,[CE] cannot find symbol,,  CommandLine cmd = e.getCmd();
compilation error,263,add,[CE] cannot find symbol,,  CommandLine cmd = options.getCmd();
compilation error,263,add,[CE] cannot find symbol,,  CommandLine cmd = getOptions().get(option);
compilation error,295,replace,[CE] cannot find symbol,cmd.addOption(opt); ,cmd.addValue(value);
compilation error,295,replace,[CE] cannot find symbol,cmd.addOption(opt); ,cmd.addChildToFront(opt);
compilation error,259,replace,[CE] cannot find symbol,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.getPropertyNames(); e.hasMoreElements();) {
compilation error,259,replace,[CE] cannot find symbol,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.getPropertyName(); e.hasMoreElements();) {
compilation error,259,replace,[CE] cannot find symbol,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.numberList(); e.hasMoreElements();) {
compilation error,265,replace,[CE] cannot find symbol,Option opt = getOptions().getOption(option); ,Option opt = option.getOption().getOption(option);
compilation error,265,replace,[CE] method getOption in class Options cannot be applied to given types;,Option opt = getOptions().getOption(option); ,Option opt = getOptions().getOption(option, option);
compilation error,259,add,[CE] cannot find symbol opt,,  cmd.addOption(opt);
compilation error,259,add,[CE] cannot find symbol,,  cmd.addChildToFront(properties);
compilation error,259,add,[CE] cannot find symbol value,,  cmd.addArg(properties.value);
compilation error,259,add,[CE] cannot find symbol value,,  cmd.addValue(value);
compilation error,259,add,[CE] cannot find symbol,,  cmd.addChildToFront(new Property(this));
compilation error,261,add,[CE] cannot find symbol,,  CommandLine cmd = e.getCmd();
compilation error,261,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(e);
compilation error,261,add,[CE] cannot find symbol,,  CommandLine cmd = e.getConditionExpression();
increase failing tests,261,add, [FE] NoSuchElementException testPropertyOverrideValues,,  e.nextElement().toString();
compilation error,261,add,[CE] cannot find symbol,,  CommandLine cmd = e.nextCommandLine();
compilation error,265,add,[CE] cannot find symbol,,  option = cmd.getOption(option);
compilation error,265,add,[CE] variable option is already defined in method processProperties(Properties),,  Option option = options.getOption(option);
compilation error,265,add,[CE] cannot find symbol,,  e.removeFirstElement();
compilation error,265,add,[CE] method processOption in class Parser cannot be applied to given types;,,  processOption(option);
compilation error,286,add,[CE] illegal start of expression,,  if(opt.hasArg()) { String value = opt.getValue(); if(value!= null) { continue; }
compilation error,286,add,[CE] ,,  opt.addValue(value);
compilation error,286,add,[CE] illegal start of expression,,  if(opt.hasArg()) { String value = opt.getKey(); if(value!= null) { continue; }
compilation error,286,add,[CE] illegal start of expression,,  if(opt.hasArg()) { String value = opt.getValue(); if(value == null) { continue; }
compilation error,295,add,[CE] variable opt is already defined in method processProperties(Properties),,  Option opt = options.getOption(opt);
compilation error,295,add,[CE] variable opt is already defined in method processProperties(Properties),,  Option opt = options.getOption(opt.getKey());
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.getOption().toString();
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.nextElement().getName();
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.nextOption().toString();
compilation error,263,replace,[CE] cannot find symbol,if (!cmd.hasOption(option)) { ,if(!cmd.hasOption(option)||(option.getValueType() == null && option.getValueType().equals(value))) {
compilation error,263,replace,[CE] cannot find symbol,if (!cmd.hasOption(option)) { ,if(!cmd.hasOption(option)||(option.getValueType() == null &&!option.hasArg())) {
compilation error,265,add,[CE] cannot find symbol,,  e.removeProperty(option);
increase failing tests,265,add, [FE] NullPointerException testPropertyOptionSingularValue,,  processOption(option, null);
compilation error,296,replace,[CE] method processProperties in class Parser cannot be applied to given types;,updateRequiredOptions(opt); ,processProperties(cmd);
increase failing tests,296,replace, [FE] AssertionFailedError testPropertyOptionGroup,updateRequiredOptions(opt); ,requiredOptions.remove(cmd);
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(cmd.hasOption(e)) { cmd.addChildToFront(e); }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(cmd.hasOption(e)) { cmd.addChildToBack(e); }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(cmd.hasOption(e)) { cmd.addOption(e); }
compilation error,261,add,[CE] illegal start of expression,,  if(e.hasMoreElements()) { if(cmd.hasOption(e)) { cmd.addArg(e.nextElement()); }
compilation error,272,replace,[CE] cannot find symbol,if (opt.hasArg()) { ,if(option.hasArg() && value!= null) {
compilation error,272,replace,[CE] cannot find symbol,if (opt.hasArg()) { ,if(option.hasArg()) {
compilation error,263,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  CommandLine cmd = cmd.addOption(option);
compilation error,263,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  if(option == null) { cmd.addOption(option); }
compilation error,263,add,[CE] cannot find symbol,,  CommandLine cmd = e.getArgumentLine();
compilation error,263,add,[CE] cannot find symbol,,  if(option == null) { CommandLine cmd = options.getCmd(); }
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.nextElement().get(option);
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.nextAst(0).toString();
compilation error,261,replace,[CE] cannot find symbol,String option = e.nextElement().toString(); ,String option = e.nextAction().toString();
compilation error,103,replace,[CE] cannot find symbol mapping,return parse(options, arguments, properties, false); ,return parse(options, arguments, properties, false, options.mapping);
increase failing tests,263,replace, [FE] AssertionFailedError testPropertyOptionSingularValue,if (!cmd.hasOption(option)) { ,if(option == null &&!cmd.hasOption(option)) {
compilation error,263,replace,[CE] cannot find symbol,if (!cmd.hasOption(option)) { ,if(!option.isRequired()) {
increase failing tests,295,add, [FE] UnsupportedOperationException testPropertyOptionSingularValue,,  opt.addValue(value); requiredOptions.remove(opt.getKey());
increase failing tests,295,add, [FE] UnsupportedOperationException testPropertyOptionSingularValue,,  if(opt.hasArg()) { opt.addValue(value); }
compilation error,286,replace,[CE] unclosed string literal,else if (!("yes".equalsIgnoreCase(value)  || "true".equalsIgnoreCase(value)   || "1".equalsIgnoreCase(value))) ,else if(!("yes".equalsIgnoreCase(value)||"true".equalsIgnoreCase(value)|| 1".equalsIgnoreCase(value)))
compilation error,265,replace,[CE] method getOption in class Options cannot be applied to given types;,Option opt = getOptions().getOption(option); ,Option opt = getOptions().getOption(option, e);
compilation error,259,replace,[CE] incompatible types,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.values(); e.hasMoreElements();) {
compilation error,259,replace,[CE] incompatible types,for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { ,for(Enumeration e = properties.keySet(); e.hasMoreElements();) {
compilation error,103,add,[CE] cannot find symbol,,  cmd.parseOptions(options, arguments, properties);
compilation error,103,add,[CE] cannot find symbol,,  requiredOptions.clear(); cmd.parse(options, arguments, properties, true);
increase failing tests,270,add, [FE] RuntimeException testPropertyOptionSingularValue,,  if(opt.hasArg()) { throw new RuntimeException(""); }
compilation error,270,add,[CE] 'try' without 'catch' or 'finally',,  if(opt.hasArg()) { try { opt.addValueForProcessing(value); }
compilation error,270,add,[CE] 'try' without 'catch' or 'finally',,  if(opt.hasArg()) { try { opt.addValueForProcessing(option); }
increase failing tests,270,add, [FE] ComparisonFailure testPropertyOptionSingularValue,,  opt.addValueForProcessing(option);
increase failing tests,270,add, [FE] AssertionFailedError testPropertyOptionMultipleValues,,  cmd.addOption(opt);
compilation error,272,add,[CE] illegal start of expression,,  if(opt.hasArg()) { if(opt.getValues() == null || opt.getValues().length == 0) { throw new RuntimeException(""); }
increase failing tests,272,add, [FE] RuntimeException testPropertyOptionSingularValue,,  if(opt.hasArg()) { throw new RuntimeException(""); }
compilation error,272,add,[CE] illegal start of expression,,  if(opt.hasArg()) { if(opt.getArguments().length == 0) { throw new RuntimeException(""); }
compilation error,296,add,[CE] cannot find symbol,,  e.removeOption(opt);
compilation error,296,add,[CE] method processOption in class Parser cannot be applied to given types;,,  processOption(e, opt);
compilation error,270,replace,[CE] incompatible types,String value = properties.getProperty(option); ,String value = properties!= null? properties.getProperty(option): properties.get(option);
compilation error,286,add,[CE] ,,  if(option.getValue() == null) { String value = opt.getValue(); if(value.equalsIgnoreCase(value)||"1".equalsIgnoreCase(value)||"2".equalsIgnore
compilation error,286,add,[CE] ,,  if(option.getValue() == null) { String value = opt.getValue(); if(value.equalsIgnoreCase(value)||"0".equalsIgnoreCase(value)||"1".equalsIgnore
compilation error,286,add,[CE] illegal start of expression,,  if(option.getValueType() == String.valueOf(value)) { String value = opt.getValueType(); if(value!= null) { cmd.addOption(value); }
compilation error,286,add,[CE] ,,  if(option.getValue() == null) { String value = opt.getValue(); if(value.equalsIgnoreCase(value)||"1".equalsIgnoreCase(value)||"0".equalsIgnore
compilation error,286,add,[CE] ,,  if(value == null) { String value = new String(value); if(value.equalsIgnoreCase(value)||"1".equalsIgnoreCase(value)||"2".equalsIgnoreCase(value))
compilation error,259,add,[CE] incompatible types,,  properties = properties.values();
compilation error,259,add,[CE] cannot find symbol,,  properties = properties.toArray(new Property(value));
compilation error,259,add,[CE] cannot find symbol,,  properties.add(new Property(properties));
compilation error,259,add,[CE] method addArg in class CommandLine cannot be applied to given types;,,  cmd.addArg(properties);
