bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyValues();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyValues();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.propertyValues();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	4	None	replace
2	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyArguments();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.propertyArguments();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.propertyArguments();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	4	None	replace
3	[BUG]  [BUGGY]  for(Enumeration  e  =  this.properties.properties();  e.hasMoreElements();)  {  [CE]  illegal  start  of  expression  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  for(Enumeration  e  =  this.properties.properties();  e.hasMoreElements();)  {  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  this.properties.properties();  e.hasMoreElements();)  {	  for(Enumeration    e    =    properties.properties();    e.hasMoreElements();)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  for(Enumeration  e  =  this.properties.propertyNames();  e.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  for(Enumeration  e  =  this.properties.propertyNames();  e.hasNext();)  {  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  this.properties.propertyNames();  e.hasNext();)  {	  for(Enumeration    e    =    properties.propertyNames();    e.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.values();  e.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  for(Enumeration  e  =  properties.values();  e.hasNext();)  {  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.values();  e.hasNext();)  {	  for(Enumeration    e    =    properties.propertyNames();    e.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.keySet();  e.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  for(Enumeration  e  =  properties.keySet();  e.hasNext();)  {  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.keySet();  e.hasNext();)  {	  for(Enumeration    e    =    properties.propertyNames();    e.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  Enumeration  <  String>  properties  =  this.properties.propertyNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  properties  =  this.properties.propertyNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  properties  =  this.properties.propertyNames();	      Enumeration    <    String>    properties    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
8	[BUG]  [BUGGY]  Enumeration  <  String>  properties  =  _properties.propertyNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  properties  =  _properties.propertyNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  properties  =  _properties.propertyNames();	      Enumeration    <    String>    properties    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
9	[BUG]  [BUGGY]  Enumeration  <  String>  properties  =  cmd.propertyNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  properties  =  cmd.propertyNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  properties  =  cmd.propertyNames();	      Enumeration    <    String>    properties    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
10	[BUG]  [BUGGY]  Enumeration  <  String>  properties  =  getProperties();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  properties  =  getProperties();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  properties  =  getProperties();	      Enumeration    <    String>    properties    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
11	[BUG]  [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.keySet());  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.keySet());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  requiredOptions  =  new  ArrayList(properties.keySet());	      List    requiredOptions    =    new    ArrayList(properties.values());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  ArrayList  requiredOptions  =  new  ArrayList(properties.values());  [CE]  illegal  start  of  type  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  ArrayList  requiredOptions  =  new  ArrayList(properties.values());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	ArrayList  requiredOptions  =  new  ArrayList(properties.values());	      List    requiredOptions    =    new    ArrayList(properties.values());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  Set  requiredOptions  =  new  HashSet(properties.values());  [CE]  illegal  start  of  expression  [FE]                    AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Set  requiredOptions  =  new  HashSet(properties.values());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Set  requiredOptions  =  new  HashSet(properties.values());	      List    requiredOptions    =    new    ArrayList(properties.values());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.properties.keySet();  e.hasMoreElements();)  {  [CE]  illegal  start  of  expression  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  for(Enumeration  e  =  properties.properties.keySet();  e.hasMoreElements();)  {  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.properties.keySet();  e.hasMoreElements();)  {	  for(Enumeration    e    =    properties.keySet();    e.hasMoreElements();)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  properties.propertyNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  properties.propertyNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  properties.propertyNames();	      List    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
16	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.propertyNames());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.propertyNames());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.propertyNames());	      List    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
17	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.properties());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.properties());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  new  ArrayList  <  String>(properties.properties());	      List    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
18	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyValues();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyValues();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyValues();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
19	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.requiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
20	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.propertyRequiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
21	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet();  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.keySet();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
22	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.get(e.nextElement());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.get(e.nextElement());  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.get(e.nextElement());	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
23	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.get(0);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.get(0);  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.get(0);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
24	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.get(value);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.get(value);  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.get(value);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
25	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getArguments();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.getArguments();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.getArguments();	      Enumeration    <    String>    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
26	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getArgumentNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.getArgumentNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.getArgumentNames();	      Enumeration    <    String>    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
27	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                  AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.properties();	      Enumeration    <    String>    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
28	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayList(properties);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayList(properties);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  Lists.newArrayList(properties);	      List    <    String>    requiredOptions    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	15	None	replace
29	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  Lists.newLinkedList();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  Lists.newLinkedList();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  Lists.newLinkedList();	      List    <    String>    requiredOptions    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	15	None	replace
30	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayList(value);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayList(value);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  Lists.newArrayList(value);	      List    <    String>    requiredOptions    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	15	None	replace
31	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyCmd();  [CE]  illegal  start  of  expression  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.propertyCmd();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.propertyCmd();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyParameters();  [CE]  illegal  start  of  expression  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.propertyParameters();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.propertyParameters();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  Properties  cmd  =  properties.propertyConfig();  [CE]  illegal  start  of  expression  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.propertyConfig();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.propertyConfig();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  this.properties.values();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  this.properties.values();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  this.properties.values();	      Enumeration    <    String>    cmd    =    properties.values();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	9	None	replace
35	[BUG]  [BUGGY]  Collections.sort(properties,  exp);  [CE]  illegal  start  of  expression  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Collections.sort(properties,  exp);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Collections.sort(properties,  exp);	      Collections.sort(properties);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  Collections.sort(properties,  requiredOptions);  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Collections.sort(properties,  requiredOptions);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Collections.sort(properties,  requiredOptions);	      Collections.sort(properties);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  Collections.sort(properties,  value);  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Collections.sort(properties,  value);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Collections.sort(properties,  value);	      Collections.sort(properties);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  properties.values();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  properties.values();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  properties.values();	      List    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
39	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  properties.getRequiredOptions();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  properties.getRequiredOptions();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  properties.getRequiredOptions();	      List    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
40	[BUG]  [BUGGY]  for(Enumeration  e  =  properties.properties();  e.hasNext();)  {  [CE]  illegal  start  of  expression  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  for(Enumeration  e  =  properties.properties();  e.hasNext();)  {  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	for(Enumeration  e  =  properties.properties();  e.hasNext();)  {	  for(Enumeration    e    =    properties.propertyNames();    e.hasNext();)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.values();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.values();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.values();	      Enumeration    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	14	None	replace
42	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requires();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.requires();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.requires();	      Enumeration    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	14	None	replace
43	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.keySet();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.keySet();	      Enumeration    <    String>    cmd    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	4	None	replace
44	[BUG]  [BUGGY]  Collections.sort(properties,  values);  [CE]  illegal  start  of  type  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Collections.sort(properties,  values);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Collections.sort(properties,  values);	      Collections.sort(properties);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  Enumeration  <  String>  properties  =  options.propertyNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  properties  =  options.propertyNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  properties  =  options.propertyNames();	      Enumeration    <    String>    properties    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	replace
46	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayList(properties.values());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayList(properties.values());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  Lists.newArrayList(properties.values());	      List    <    String>    requiredOptions    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	15	None	replace
47	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.get(value);  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.get(value);	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
48	[BUG]  [BUGGY]  Properties  cmd  =  properties.values();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.values();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.values();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  Properties  cmd  =  properties.properties();  [CE]  illegal  start  of  type  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.properties();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.properties();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  Properties  cmd  =  properties.getCmd();  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.getCmd();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.getCmd();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.values()  +  1);  [CE]  illegal  start  of  type  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  requiredOptions  =  new  ArrayList(properties.values()  +  1);  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  requiredOptions  =  new  ArrayList(properties.values()  +  1);	      List    requiredOptions    =    new    ArrayList(properties.values());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.getRequiredOptions();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.getRequiredOptions();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.getRequiredOptions();	      Enumeration    <    String>    requiredOptions    =    properties.propertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
53	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  new  ArrayList(properties.values());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  new  ArrayList(properties.values());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  new  ArrayList(properties.values());	      List    requiredOptions    =    new    ArrayList(properties.values());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	8	None	replace
54	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.values().iterator().next();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.values().iterator().next();  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.values().iterator().next();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
55	[BUG]  [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet().iterator().next();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  requiredOptions  =  properties.keySet().iterator().next();  [BUGGY]    {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  requiredOptions  =  properties.keySet().iterator().next();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	3	None	replace
56	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  properties.requires();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  properties.requires();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  properties.requires();	      List    <    String>    requiredOptions    =    properties.properties();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
57	[BUG]  [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayListWithCapacity(properties.size());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  List  <  String>  requiredOptions  =  Lists.newArrayListWithCapacity(properties.size());  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	List  <  String>  requiredOptions  =  Lists.newArrayListWithCapacity(properties.size());	      List    <    String>    requiredOptions    =    Lists.newArrayList();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	15	None	replace
58	[BUG]  [BUGGY]  Properties  cmd  =  properties.getProperties();  [CE]  illegal  start  of  type  [FE]            AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Properties  cmd  =  properties.getProperties();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Properties  cmd  =  properties.getProperties();	      Properties    cmd    =    properties.propertyNames();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.getPropertyNames();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.properties.getPropertyNames();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.properties.getPropertyNames();	      Enumeration    <    String>    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
60	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  properties.getArgumentElements();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                AlreadySelectedException    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }    [BUGGY]  Enumeration  <  String>  cmd  =  properties.getArgumentElements();  [BUGGY]    for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	Enumeration  <  String>  cmd  =  properties.getArgumentElements();	      Enumeration    <    String>    cmd    =    properties.getPropertyNames();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	7	None	replace
