bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Option opt = getOptions().getOption(option); [FE] AlreadySelectedException [CONTEXT] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [BUGGY] Option opt = getOptions().getOption(option); [BUGGY]    String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	replace	
2	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [BUGGY] [BUGGY] Option opt = getOptions().getOption(option);    String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	265	265	9	add	
3	[BUG] [BUGGY] String value = properties.getProperty(option); [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    [BUGGY] String value = properties.getProperty(option); [BUGGY]  if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	replace	
4	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    [BUGGY] [BUGGY] String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	270	270	9	add	
5	[BUG] [BUGGY] if (opt.hasArg()) { [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    String value = properties.getProperty(option); [BUGGY] if (opt.hasArg())    { [BUGGY] { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	replace	
6	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    String value = properties.getProperty(option); [BUGGY] [BUGGY] if (opt.hasArg())    { { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.5353033790313108	272	273	9	add	
7	[BUG] [BUGGY] return parse(options, arguments, properties, false); [FE] AlreadySelectedException [CONTEXT] public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { [BUGGY] return parse(options, arguments, properties, false); [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	replace	
8	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { [BUGGY] [BUGGY] return parse(options, arguments, properties, false); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	103	103	9	add	
9	[BUG] [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)  { [BUGGY] { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	replace	
10	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } [BUGGY] [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)  { { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	259	260	9	add	
11	[BUG] [BUGGY] String option = e.nextElement().toString(); [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [BUGGY] String option = e.nextElement().toString(); [BUGGY]  if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    String value = properties.getProperty(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	replace	
12	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [BUGGY] [BUGGY] String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);    String value = properties.getProperty(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	261	261	9	add	
13	[BUG] [BUGGY] if (!cmd.hasOption(option)) { [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); [BUGGY] if (!cmd.hasOption(option))   { [BUGGY] { Option opt = getOptions().getOption(option);    String value = properties.getProperty(option); if (opt.hasArg()) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	replace	
14	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); [BUGGY] [BUGGY] if (!cmd.hasOption(option))   { { Option opt = getOptions().getOption(option);    String value = properties.getProperty(option); if (opt.hasArg()) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.49746833816309105	263	264	9	add	
15	[BUG] [BUGGY] else if (!("yes".equalsIgnoreCase(value)  || "true".equalsIgnoreCase(value)   || "1".equalsIgnoreCase(value))) [FE] AlreadySelectedException [CONTEXT] try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } } [BUGGY] else if (!("yes".equalsIgnoreCase(value)      || "true".equalsIgnoreCase(value)            || "1".equalsIgnoreCase(value))) [BUGGY] || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   continue; } cmd.addOption(opt); updateRequiredOptions(opt); [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	replace	
16	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } } [BUGGY] [BUGGY] else if (!("yes".equalsIgnoreCase(value)      || "true".equalsIgnoreCase(value)            || "1".equalsIgnoreCase(value))) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   continue; } cmd.addOption(opt); updateRequiredOptions(opt); [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.4216370213557839	286	288	9	add	
17	[BUG] [BUGGY] cmd.addOption(opt); [FE] AlreadySelectedException [CONTEXT] } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   continue; } [BUGGY] cmd.addOption(opt); [BUGGY] updateRequiredOptions(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	replace	
18	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   continue; } [BUGGY] [BUGGY] cmd.addOption(opt); updateRequiredOptions(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	295	295	9	add	
19	[BUG] [BUGGY] updateRequiredOptions(opt); [FE] AlreadySelectedException [CONTEXT] else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   continue; } cmd.addOption(opt); [BUGGY] updateRequiredOptions(opt); [BUGGY] } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	replace	
20	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   continue; } cmd.addOption(opt); [BUGGY] [BUGGY] updateRequiredOptions(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.3333333333333333	296	296	9	add	
21	[BUG] [BUGGY] OptionGroup group = getOptions().getOptionGroup(opt); [FE] AlreadySelectedException [CONTEXT]  if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); }   if (getOptions().getOptionGroup(opt) != null) { [BUGGY] OptionGroup group = getOptions().getOptionGroup(opt); [BUGGY]  if (group.isRequired()) { getRequiredOptions().remove(group); } group.setSelected(opt); } } [CLASS] Parser [METHOD] updateRequiredOptions [RETURN_TYPE] void  Option opt [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList Option opt OptionGroup group boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.31426968052735443	414	414	9	replace	
22	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT]  if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); }   if (getOptions().getOptionGroup(opt) != null) { [BUGGY] [BUGGY] OptionGroup group = getOptions().getOptionGroup(opt); if (group.isRequired()) { getRequiredOptions().remove(group); } group.setSelected(opt); } } [CLASS] Parser [METHOD] updateRequiredOptions [RETURN_TYPE] void  Option opt [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList Option opt OptionGroup group boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.31426968052735443	414	414	9	add	
23	[BUG] [BUGGY] if (group.isRequired()) { [FE] AlreadySelectedException [CONTEXT] { getRequiredOptions().remove(opt.getKey()); }   if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt); [BUGGY] if (group.isRequired())   { [BUGGY] { getRequiredOptions().remove(group); } group.setSelected(opt); } } [CLASS] Parser [METHOD] updateRequiredOptions [RETURN_TYPE] void  Option opt [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList Option opt OptionGroup group boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.31426968052735443	416	417	9	replace	
24	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { getRequiredOptions().remove(opt.getKey()); }   if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt); [BUGGY] [BUGGY] if (group.isRequired())   { { getRequiredOptions().remove(group); } group.setSelected(opt); } } [CLASS] Parser [METHOD] updateRequiredOptions [RETURN_TYPE] void  Option opt [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList Option opt OptionGroup group boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.31426968052735443	416	417	9	add	
25	[BUG] [BUGGY] group.setSelected(opt); [FE] AlreadySelectedException [CONTEXT]  if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt); if (group.isRequired()) { getRequiredOptions().remove(group); } [BUGGY] group.setSelected(opt); [BUGGY] } } [CLASS] Parser [METHOD] updateRequiredOptions [RETURN_TYPE] void  Option opt [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList Option opt OptionGroup group boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.31426968052735443	421	421	9	replace	
26	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT]  if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt); if (group.isRequired()) { getRequiredOptions().remove(group); } [BUGGY] [BUGGY] group.setSelected(opt); } } [CLASS] Parser [METHOD] updateRequiredOptions [RETURN_TYPE] void  Option opt [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList Option opt OptionGroup group boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.31426968052735443	421	421	9	add	
27	[BUG] [BUGGY] OptionGroup group = (OptionGroup) it.next(); [FE] AlreadySelectedException [CONTEXT]  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { [BUGGY] OptionGroup group = (OptionGroup) it.next(); [BUGGY] group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false;  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.27801921874276636	156	156	9	replace	
28	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT]  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { [BUGGY] [BUGGY] OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false;  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.27801921874276636	156	156	9	add	
29	[BUG] [BUGGY] group.setSelected(null); [FE] AlreadySelectedException [CONTEXT] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); [BUGGY] group.setSelected(null); [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.27801921874276636	157	157	9	replace	
30	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); [BUGGY] [BUGGY] group.setSelected(null); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.27801921874276636	157	157	9	add	
31	[BUG] [BUGGY] } [FE] AlreadySelectedException [CONTEXT] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); [BUGGY] } [BUGGY]  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.27801921874276636	158	158	9	replace	
32	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); [BUGGY] [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.27801921874276636	158	158	9	add	
33	[BUG] [BUGGY] Option opt = options.getOption(option); [FE] AlreadySelectedException [CONTEXT] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [BUGGY] Option opt = options.getOption(option); [BUGGY]    String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	152	152	9	replace	
34	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [BUGGY] [BUGGY] Option opt = options.getOption(option);    String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	152	152	9	add	
35	[BUG] [BUGGY] String value = properties.getProperty(option); [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    [BUGGY] String value = properties.getProperty(option); [BUGGY]  if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { opt.addValueForProcessing(value); } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	157	157	9	replace	
36	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    [BUGGY] [BUGGY] String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { opt.addValueForProcessing(value); } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	157	157	9	add	
37	[BUG] [BUGGY] if (opt.hasArg()) { [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    String value = properties.getProperty(option); [BUGGY] if (opt.hasArg())    { [BUGGY] { if (opt.getValues() == null || opt.getValues().length == 0) { opt.addValueForProcessing(value); } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) { [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	replace	
38	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    String value = properties.getProperty(option); [BUGGY] [BUGGY] if (opt.hasArg())    { { if (opt.getValues() == null || opt.getValues().length == 0) { opt.addValueForProcessing(value); } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) { [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2721655269759087	159	160	9	add	
39	[BUG] [BUGGY] arguments = new String[0]; [FE] AlreadySelectedException [CONTEXT]  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { [BUGGY] arguments = new String[0]; [BUGGY] } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next(); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.25819888974716115	169	169	9	replace	
40	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT]  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { [BUGGY] [BUGGY] arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next(); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.25819888974716115	169	169	9	add	
41	[BUG] [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)  { [BUGGY] { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	146	147	9	replace	
42	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } [BUGGY] [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)  { { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	146	147	9	add	
43	[BUG] [BUGGY] String option = e.nextElement().toString(); [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [BUGGY] String option = e.nextElement().toString(); [BUGGY]  if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    String value = properties.getProperty(option);  [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	148	148	9	replace	
44	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [BUGGY] [BUGGY] String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = options.getOption(option);    String value = properties.getProperty(option);  [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	148	148	9	add	
45	[BUG] [BUGGY] if (!cmd.hasOption(option)) { [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); [BUGGY] if (!cmd.hasOption(option))   { [BUGGY] { Option opt = options.getOption(option);    String value = properties.getProperty(option); if (opt.hasArg()) { [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	replace	
46	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); [BUGGY] [BUGGY] if (!cmd.hasOption(option))   { { Option opt = options.getOption(option);    String value = properties.getProperty(option); if (opt.hasArg()) { [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Enumeration e Option currentOption opt List expectedOpts String currentToken option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/DefaultParser.java	0.2519763153394848	150	151	9	add	
47	[BUG] [BUGGY] processProperties(properties); [FE] AlreadySelectedException [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } [BUGGY] processProperties(properties); [BUGGY] checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2195015359561727	241	241	9	replace	
48	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } [BUGGY] [BUGGY] processProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2195015359561727	241	241	9	add	
49	[BUG] [BUGGY] if (properties == null) { [FE] AlreadySelectedException [CONTEXT] { [BUGGY] if (properties == null)  { [BUGGY] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2195015359561727	254	255	9	replace	
50	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { [BUGGY] [BUGGY] if (properties == null)  { { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2195015359561727	254	255	9	add	
51	[BUG] [BUGGY] ListIterator iterator = tokenList.listIterator(); [FE] AlreadySelectedException [CONTEXT] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [BUGGY] ListIterator iterator = tokenList.listIterator(); [BUGGY]   while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.20623947784607638	174	174	9	replace	
52	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [BUGGY] [BUGGY] ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.20623947784607638	174	174	9	add	
53	[BUG] [BUGGY] while (iterator.hasNext()) { [FE] AlreadySelectedException [CONTEXT] if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [BUGGY] while (iterator.hasNext())  { [BUGGY] { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }   [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.20623947784607638	177	178	9	replace	
54	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [BUGGY] [BUGGY] while (iterator.hasNext())  { { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }   [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.20623947784607638	177	178	9	add	
55	[BUG] [BUGGY] this.options = options; [FE] AlreadySelectedException [CONTEXT] protected void setOptions(final Options options) { [BUGGY] this.options = options; [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	48	48	9	replace	
56	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] protected void setOptions(final Options options) { [BUGGY] [BUGGY] this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	48	48	9	add	
57	[BUG] [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); [FE] AlreadySelectedException [CONTEXT] protected void setOptions(final Options options) { this.options = options; [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); [BUGGY] } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	49	49	9	replace	
58	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] protected void setOptions(final Options options) { this.options = options; [BUGGY] [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	49	49	9	add	
59	[BUG] [BUGGY] } [FE] AlreadySelectedException [CONTEXT] protected void setOptions(final Options options) { this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); [BUGGY] } [BUGGY]  [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	50	50	9	replace	
60	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] protected void setOptions(final Options options) { this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); [BUGGY] [BUGGY] } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	50	50	9	add	
61	[BUG] [BUGGY] return options; [FE] AlreadySelectedException [CONTEXT] protected Options getOptions() { [BUGGY] return options; [BUGGY] } [CLASS] Parser [METHOD] getOptions [RETURN_TYPE] Options  [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	54	54	9	replace	
62	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] protected Options getOptions() { [BUGGY] [BUGGY] return options; } [CLASS] Parser [METHOD] getOptions [RETURN_TYPE] Options  [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	54	54	9	add	
63	[BUG] [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [FE] AlreadySelectedException [CONTEXT] {  [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();)  { [BUGGY] { Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	147	148	9	replace	
64	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] {  [BUGGY] [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();)  { { Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	147	148	9	add	
65	[BUG] [BUGGY] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { [FE] AlreadySelectedException [CONTEXT] {  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); }  [BUGGY] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)  { [BUGGY] { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	154	155	9	replace	
66	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] {  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); }  [BUGGY] [BUGGY] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)  { { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	154	155	9	add	
67	[BUG] [BUGGY] setOptions(options); [FE] AlreadySelectedException [CONTEXT] }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  [BUGGY] setOptions(options); [BUGGY]  cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	161	161	9	replace	
68	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  [BUGGY] [BUGGY] setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	161	161	9	add	
69	[BUG] [BUGGY] cmd = new CommandLine(); [FE] AlreadySelectedException [CONTEXT]  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); [BUGGY] cmd = new CommandLine(); [BUGGY]  boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	replace	
70	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT]  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); [BUGGY] [BUGGY] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	163	163	9	add	
71	[BUG] [BUGGY] boolean eatTheRest = false; [FE] AlreadySelectedException [CONTEXT] { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); [BUGGY] boolean eatTheRest = false; [BUGGY]  if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	165	165	9	replace	
72	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); [BUGGY] [BUGGY] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	165	165	9	add	
73	[BUG] [BUGGY] if (arguments == null) { [FE] AlreadySelectedException [CONTEXT] group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; [BUGGY] if (arguments == null)  { [BUGGY] { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	167	168	9	replace	
74	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; [BUGGY] [BUGGY] if (arguments == null)  { { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	167	168	9	add	
75	[BUG] [BUGGY] List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [FE] AlreadySelectedException [CONTEXT] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [BUGGY] List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [BUGGY]  ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	172	172	9	replace	
76	[BUG] [BUGGY] [FE] AlreadySelectedException [CONTEXT] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [BUGGY] [BUGGY] List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli30/src/main/java/org/apache/commons/cli/Parser.java	0.2038642798875755	172	172	9	add	
