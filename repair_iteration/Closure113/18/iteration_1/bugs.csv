bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n.clone();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n.clone();  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n.clone();		non-compiled	[CE]  <identifier>  expected	107	None	add
2	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n;  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n;		non-compiled	[CE]  <identifier>  expected	107	None	add
3	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n.getParent();  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n.getParent();  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =(PreprocessorSymbolTable)n.getParent();		non-compiled	[CE]  <identifier>  expected	107	None	add
4	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  n.getPreprocessorSymbolTable();  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  n.getPreprocessorSymbolTable();  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =  n.getPreprocessorSymbolTable();		non-compiled	[CE]  <identifier>  expected	107	None	add
5	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  n.getFirstChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  n.getFirstChild();  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =  n.getFirstChild();		non-compiled	[CE]  <identifier>  expected	107	None	add
6	[BUG]  [BUGGY]    PreprocessorSymbolTable  compiler  =  n.getPreprocessorSymbolTable();  [CE]  <identifier>  expected  [FE]              AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  compiler  =  n.getPreprocessorSymbolTable();  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  compiler  =  n.getPreprocessorSymbolTable();		non-compiled	[CE]  <identifier>  expected	107	None	add
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  IllegalArgumentException( " ");	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  IllegalStateException( " ");	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
9	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  UnsupportedOperationException( " ");  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  UnsupportedOperationException( " ");	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
10	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Invalid  constructor  symbol  table: "  +  n.getString());  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  AssertionFailedError( "Invalid  constructor  symbol  table: "  +  n.getString());  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  AssertionFailedError( "Invalid  constructor  symbol  table: "  +  n.getString());	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
11	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  source  name: "  +  n.getString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  source  name: "  +  n.getString());  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  AssertionFailedError( "Unexpected  source  name: "  +  n.getString());	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
12	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  createPreprocessorSymbolTable(n);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  createPreprocessorSymbolTable(n);  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =  createPreprocessorSymbolTable(n);		non-compiled	[CE]  <identifier>  expected	107	None	add
13	[BUG]  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  getPreprocessorSymbolTable(n);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    PreprocessorSymbolTable  preprocessorSymbolTable  =  getPreprocessorSymbolTable(n);  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    PreprocessorSymbolTable  preprocessorSymbolTable  =  getPreprocessorSymbolTable(n);		non-compiled	[CE]  <identifier>  expected	107	None	add
14	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  source  name: "  +  n.getLineno());  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  AssertionFailedError( "Unexpected  source  name: "  +  n.getLineno());  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  AssertionFailedError( "Unexpected  source  name: "  +  n.getLineno());	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
15	[BUG]  [BUGGY]  throw  new  AssertionFailedError( "Unknown  symbol  table: "  +  n.getString());  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]  throw  new  AssertionFailedError( "Unknown  symbol  table: "  +  n.getString());  [BUGGY]  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	throw  new  AssertionFailedError( "Unknown  symbol  table: "  +  n.getString());	return;  	non-compiled	[CE]  <identifier>  expected	106	None	replace
16	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  this);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]      private  void  maybeAddStringNodeToSymbolTable(Node  n)  {  if  (preprocessorSymbolTable  ==  null)  {  [BUGGY]    NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]  return;  }  String  name  =  n.getString();  Node  syntheticRef  =  NodeUtil.newQualifiedNameNode(  compiler.getCodingConvention(),  name,  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	    NodeTraversal.traverse(compiler,  n,  this);		non-compiled	[CE]  <identifier>  expected	107	None	add
