bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  pn);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  pn);	  NodeTraversal.traverse(compiler,    pn,    parent);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  parent,  t);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  parent,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  parent,  t);	  NodeTraversal.traverse(compiler,    pn,    parent);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
3	[BUG]  [BUGGY]  parent!=  null  &&(t.getModule()!=  null))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&(t.getModule()!=  null))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&(t.getModule()!=  null))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
4	[BUG]  [BUGGY]  parent!=  null  &&(t.getModule()!=  null))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  parent,  this);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&(t.getModule()!=  null))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  parent,  this);  }  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&(t.getModule()!=  null))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  parent,  this);  }	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
5	[BUG]  [BUGGY]  parent!=  null  &&(t.getModule()!=  null  ||!t.hasModule()))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&(t.getModule()!=  null  ||!t.hasModule()))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&(t.getModule()!=  null  ||!t.hasModule()))  {  pn.addDefinition(n,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()!=  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()!=  Token.CALL);	  Preconditions.checkState(t.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  &&!NodeUtil.isFunctionDeclaration(n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  &&!NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.CALL  &&!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(t.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  &&!NodeUtil.isAssignmentOp(n));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  &&!NodeUtil.isAssignmentOp(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.CALL  &&!NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(t.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  parent.addDefinition(pn,  t.getModule());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(pn,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(pn,  t.getModule());	  parent.addDefinition(n,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
12	[BUG]  [BUGGY]  parent.addDefinition(t,  n.getModule());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(t,  n.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(t,  n.getModule());	  parent.addDefinition(n,    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.CALL);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()!=  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  pn  }  );  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  pn  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  pn  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    parent    }    );    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t  }  );  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    parent    }    );    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( ")));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( ")));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse ")));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse ")));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ")));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ")));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call: ")));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call: ")));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call: ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  parent);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t),    pn);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  this);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t),    pn);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn,  parent);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t),    pn);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent),  pn);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t),    pn);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()!=  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t.getModule()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    parent,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
28	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    parent,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    this);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent  },  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    this);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  getClass());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  getClass());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  getClass());	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    this);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  null);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    this);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(n));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Class[]  {  t.getModule()  }  );  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Class[]  {  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  Class[]  {  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t.getModule()    }    );    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  }  );  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t.getModule()    }    );    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  this  }  );  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  this  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  this  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    this    }    );    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  this  }  );  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  this  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  this  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    this    }    );    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  parent,  t.getModule()  }  );  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  parent,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  parent,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    pn,    new    Class[]    {    t.getModule()    }    );    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Class[]  {  pn.getModule()  }  );  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  Class[]  {  pn.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  Class[]  {  pn.getModule()  }  );	  NodeTraversal.traverse(compiler,    pn,    new    Class[]    {    t.getModule()    }    );    	non-compiled	[CE]  	17	None	replace
41	[BUG]  [BUGGY]  parent!=  pn.addDeclaration(parent,  t.getModule());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  pn.addDeclaration(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  pn.addDeclaration(parent,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
42	[BUG]  [BUGGY]  Pn.addDeclaration(parent,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Pn.addDeclaration(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Pn.addDeclaration(parent,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
43	[BUG]  [BUGGY]  parent.addDeclaration(n,  t.getModule());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDeclaration(n,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDeclaration(n,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
44	[BUG]  [BUGGY]  pn.addDeclaration(parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDeclaration(parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDeclaration(parent);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
45	[BUG]  [BUGGY]  pn.addDeclaration(parent,  declaration);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDeclaration(parent,  declaration);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDeclaration(parent,  declaration);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
46	[BUG]  [BUGGY]  pn.addDefinition(parent,  declaration);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDefinition(parent,  declaration);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDefinition(parent,  declaration);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
47	[BUG]  [BUGGY]  pn.addDeclaration(declaration,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDeclaration(declaration,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDeclaration(declaration,  parent);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  pn));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  pn));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AssertionFailedError(t));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AssertionFailedError(t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AssertionFailedError(t));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t),  pn);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t),  pn);	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  AssertionFailedError(t));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  AssertionFailedError(t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  AssertionFailedError(t));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t));    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ClassCallback());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    parent,    new    ClassCallback());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ClassCallback());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    parent,    new    ClassCallback());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.NAME,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.NAME,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    pn);    	non-compiled	[CE]  orphaned  case	63	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  pn);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  pn);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    pn);    	non-compiled	[CE]  orphaned  case	63	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  pn.getModule());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  pn.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  pn.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    pn);    	non-compiled	[CE]  	63	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    pn);    	non-compiled	[CE]  	63	None	replace
58	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  t);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  parent,  t);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	56	None	replace
59	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  this);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  parent,  this);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	56	None	replace
60	[BUG]  [BUGGY]  Traversal.traverse(compiler,  parent,  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  parent,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  parent,  n);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	56	None	replace
61	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  parent,  false);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	56	None	replace
62	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  parent,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  parent,  null);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	56	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  pn);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  pn);	  Preconditions.checkState(t.getType()    ==    Token.NAME);    	non-compiled	[CE]  	22	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()!=  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()!=  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()!=  Token.NAME);	  Preconditions.checkState(t.getType()    ==    Token.NAME);    	non-compiled	[CE]  	22	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(t.getType()    ==    Token.NAME);    	non-compiled	[CE]  	22	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  t.getModule());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	78	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	78	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	78	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call: ",  t));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call: ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call: ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    initialize    class    call:   "));    	non-compiled	[CE]  	37	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "Failed  to  initialize  class  call:   "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "Failed  to  initialize  class  call:   "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "Failed  to  initialize  class  call:   "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    initialize    class    call:   "));    	non-compiled	[CE]  	37	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call ",  t));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    initialize    class    call:   "));    	non-compiled	[CE]  	37	None	replace
72	[BUG]  [BUGGY]  pn.addReference(parent,  t.getModule());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addReference(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addReference(parent,  t.getModule());	  pn.addDependency(t.getModule());    	non-compiled	[CE]  	61	None	replace
73	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  	87	None	replace
74	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  	87	None	replace
75	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  	87	None	replace
76	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  	87	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  parent);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  orphaned  case	95	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent),  pn);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  orphaned  case	95	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule()),  n);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule()),  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule()),  n);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  orphaned  case	95	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  parent);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  orphaned  case	95	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  c),  pn);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  c),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  c),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  orphaned  case	95	None	replace
82	[BUG]  [BUGGY]  Pn.addDefinition(parent,  t.getModule());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Pn.addDefinition(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Pn.addDefinition(parent,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    	non-compiled	[CE]  orphaned  case	50	None	replace
83	[BUG]  [BUGGY]  parent.addDefinition(t.getModule());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(t.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    	non-compiled	[CE]  orphaned  case	50	None	replace
84	[BUG]  [BUGGY]  parent.addDefinition(t,  pn.getModule());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(t,  pn.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(t,  pn.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    	non-compiled	[CE]  orphaned  case	50	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  pn);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  pn);	  NodeTraversal.traverse(compiler,    pn,    n);    	non-compiled	[CE]  orphaned  case	55	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION,  t.getModule());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    t.getModule());    	non-compiled	[CE]  orphaned  case	43	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parent.getModule());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parent.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parent.getModule());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    t.getModule());    	non-compiled	[CE]  orphaned  case	43	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.FUNCTION,  n.getModule());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.FUNCTION,  n.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.FUNCTION,  n.getModule());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    t.getModule());    	non-compiled	[CE]  orphaned  case	43	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  t.getModule()!=  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  t.getModule()!=  Token.EXPR_RESULT);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  t.getModule()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    t.getModule());    	non-compiled	[CE]  orphaned  case	43	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule(),  pn));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule(),  pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule(),  pn));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  orphaned  case	94	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent.getModule()));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent.getModule()));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  orphaned  case	94	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  pn.getModule()));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  pn.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  pn.getModule()));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  orphaned  case	94	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t,  n.getModule()));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t,  n.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t,  n.getModule()));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  orphaned  case	94	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  n.getModule()));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  n.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  n.getModule()));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  orphaned  case	94	None	replace
95	[BUG]  [BUGGY]  pn.addDefinition(t.getModule());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDefinition(t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDefinition(t.getModule());	  pn.setModule(parent.getModule());    	non-compiled	[CE]  orphaned  case	46	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	44	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  ClassCallback(),  t);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  ClassCallback(),  t);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  ClassCallback(),  t);	  NodeTraversal.traverse(compiler,    pn,    new    ClassCallback());    	non-compiled	[CE]  	3	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  t);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  t);	  NodeTraversal.traverse(compiler,    n,    this,    t);    	non-compiled	[CE]  	5	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t,  pn);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  t,  pn);	  NodeTraversal.traverse(compiler,    n,    this,    t);    	non-compiled	[CE]  	5	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  t);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  null,  t);	  NodeTraversal.traverse(compiler,    n,    this,    t);    	non-compiled	[CE]  	5	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()!=  Token.CALL  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()!=  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()!=  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	13	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(pn));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(pn));	  NodeTraversal.traverse(compiler,    pn,    new    AssertionFailedError(t));    	non-compiled	[CE]  	31	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t,  n));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t,  n));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t,  n));	  NodeTraversal.traverse(compiler,    pn,    new    AssertionFailedError(t));    	non-compiled	[CE]  orphaned  case	31	None	replace
107	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  AssertionFailedError(t));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  new  AssertionFailedError(t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  new  AssertionFailedError(t));	  NodeTraversal.traverse(compiler,    pn,    new    AssertionFailedError(t));    	non-compiled	[CE]  orphaned  case	31	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule(),  n));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule(),  n));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule(),  n));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  orphaned  case	24	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  orphaned  case	24	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent,  pn));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent,  pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  parent,  pn));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  orphaned  case	24	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  parent));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  parent));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  parent));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  orphaned  case	24	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  this);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  this);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  orphaned  case	24	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  pn  }  );  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  pn  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  pn  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  orphaned  case	38	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  n  }  );  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  n  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  orphaned  case	38	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  n  }  );  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  n  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  orphaned  case	38	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n,  parent  }  );  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n,  parent  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n,  parent  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  orphaned  case	38	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  pn);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  pn);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  pn);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  orphaned  case	2	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  parent);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  parent);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  orphaned  case	2	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  pn);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  pn);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  pn);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  orphaned  case	2	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  parent);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  parent);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  orphaned  case	2	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  parent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  parent);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  orphaned  case	16	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  pn);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  pn);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  orphaned  case	16	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  pn);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  pn);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  orphaned  case	16	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t.getModule()  },  n);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t.getModule()  },  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t.getModule()  },  n);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  orphaned  case	16	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  parent);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  parent);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  orphaned  case	16	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions: "  +  t.getMessage()));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions: "  +  t.getMessage()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions: "  +  t.getMessage()));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  orphaned  case	74	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions: "  +  name,  t));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions: "  +  name,  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions: "  +  name,  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  orphaned  case	74	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  t),  pn);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  t),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  t),  pn);	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  orphaned  case	74	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  parent));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  parent));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  parent));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  orphaned  case	74	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse    class   "));    	non-compiled	[CE]  orphaned  case	36	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t.getModule()));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t.getModule()));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse    class   "));    	non-compiled	[CE]  orphaned  case	36	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class: "));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class: "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class: "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse    class   "));    	non-compiled	[CE]  orphaned  case	36	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "Failed  to  parse  class   "));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "Failed  to  parse  class   "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "Failed  to  parse  class   "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse    class   "));    	non-compiled	[CE]  orphaned  case	36	None	replace
134	[BUG]  [BUGGY]  pn.addDeclaration(declaration,  parent,  t.getModule());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDeclaration(declaration,  parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDeclaration(declaration,  parent,  t.getModule());	  pn.addDeclaration(declaration,    t.getModule());    	non-compiled	[CE]  orphaned  case	49	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  orphaned  case	57	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  orphaned  case	57	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(e));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(e));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(e));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  orphaned  case	57	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(this));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(this));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(this));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  orphaned  case	57	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t,  n));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t,  n));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t,  n));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  orphaned  case	57	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  pn,  t.getModule()  }  );  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  pn,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  pn,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  orphaned  case	15	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  n,  t.getModule()  }  );  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  n,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  n,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  orphaned  case	15	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent.getModule()  }  );  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  orphaned  case	15	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  ctxt,  parent,  t.getModule()  }  );  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  ctxt,  parent,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  ctxt,  parent,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  orphaned  case	15	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()!=  Token.CALL);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()!=  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()!=    Token.CALL);    	non-compiled	[CE]  orphaned  case	10	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  this);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  n,  this);	  NodeTraversal.traverse(compiler,    t,    n);    	non-compiled	[CE]  orphaned  case	54	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  parent);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  n,  parent);	  NodeTraversal.traverse(compiler,    t,    n);    	non-compiled	[CE]  orphaned  case	54	None	replace
147	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
148	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compil  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compil  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compil	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
149	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  n,  parent,  t,  n  }  );  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  n,  parent,  t,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  n,  parent,  t,  n  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t,    n    }    );    	non-compiled	[CE]  orphaned  case	41	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  pn,  parent,  t,  n  }  );  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  pn,  parent,  t,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  pn,  parent,  t,  n  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t,    n    }    );    	non-compiled	[CE]  orphaned  case	41	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n,  n  }  );  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n,  n  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t,    n    }    );    	non-compiled	[CE]  orphaned  case	41	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NAME);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	82	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()!=  Token.NAME);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	82	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  &&  n.getType()  ==  Token.NAME);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()!=  Token.CALL  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	82	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  ||  n.getType()  ==  Token.NAME);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()!=  Token.CALL  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	82	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  null));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  null));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  null));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  orphaned  case	28	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  this,  pn));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  this,  pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  this,  pn));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule(),  this));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule(),  this));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  AssertionFailedError(t.getModule(),  this));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t.getModule(),  this));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t.getModule(),  this));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t.getModule(),  this));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  this),  pn);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  this),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  this),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  pn  }  );  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  pn  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  pn  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    pn    }    );    	non-compiled	[CE]  <identifier>  expected	83	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  pn,  n  }  );  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  pn,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  pn,  n  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    pn    }    );    	non-compiled	[CE]  <identifier>  expected	83	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  pn  }  );  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  pn  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  pn  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    pn    }    );    	non-compiled	[CE]  <identifier>  expected	83	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  child  }  );  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  child  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  child  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    pn    }    );    	non-compiled	[CE]  <identifier>  expected	83	None	replace
166	[BUG]  [BUGGY]  pn.addModule(parent,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addModule(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addModule(parent,  t.getModule());	  pn.addModule(t.getModule());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  this,  pn);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  this,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  this,  pn);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    this);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    this);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  null);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    this);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  RuntimeException( " "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  RuntimeException( " "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    parent,    new    RuntimeException(   "   "));    	non-compiled	[CE]  <identifier>  expected	34	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  RuntimeException( " "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  RuntimeException( " "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    parent,    new    RuntimeException(   "   "));    	non-compiled	[CE]  <identifier>  expected	34	None	replace
176	[BUG]  [BUGGY]  Pn.addDefinition(n,  t.getModule());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Pn.addDefinition(n,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Pn.addDefinition(n,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()!=  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n,  parent));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n,  parent));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n,  parent));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t,  n));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t,  n));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  AssertionFailedError(t,  n));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  n));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  n));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  n));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.CALL,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()!=  Token.CALL);	  Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  pn);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  null,  pn);	  NodeTraversal.traverse(compiler,    n,    this,    pn);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    this,    pn);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  pn);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  pn);	  NodeTraversal.traverse(compiler,    n,    this,    pn);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  pn);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  pn);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    parent);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  n  },  parent);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  n  },  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  n  },  parent);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    parent);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  },  parent);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  },  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  },  parent);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    parent);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  }  );  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t,    n    }    );    	non-compiled	[CE]  <identifier>  expected	40	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  new  Class[]  {  t,  n  }  );  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  new  Class[]  {  t,  n  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  new  Class[]  {  t,  n  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t,    n    }    );    	non-compiled	[CE]  <identifier>  expected	40	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  new  Class[]  {  t,  parent  }  );  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  new  Class[]  {  t,  parent  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  new  Class[]  {  t,  parent  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t,    n    }    );    	non-compiled	[CE]  <identifier>  expected	40	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  n);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  null  }  );  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  null  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  null  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    null    }    );    	non-compiled	[CE]  <identifier>  expected	84	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  null  }  );  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  null  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n,  null  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    null    }    );    	non-compiled	[CE]  <identifier>  expected	84	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
202	[BUG]  [BUGGY]  pn.addDependency(t,  n.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(t,  n.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(t,  n.getModule());	  pn.addDefinition(t,    parent.getModule());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  NodeUtil.isAssignmentOp(n));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  NodeUtil.isAssignmentOp(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  &&  NodeUtil.isAssignmentOp(n));	  Preconditions.checkState(n.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  parent,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  parent,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  parent,  this);	  NodeTraversal.traverse(compiler,    parent,    n,    this);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  n,  this);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  n,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  n,  this);	  NodeTraversal.traverse(compiler,    parent,    n,    this);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  this,  t);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  this,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  n,  this,  t);	  NodeTraversal.traverse(compiler,    parent,    n,    this);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
210	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
211	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
212	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
213	[BUG]  [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent!=  null  &&  t.getModule()!=  null)  {  pn.addDeclaration(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  t);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  t);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  parent);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  parent);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  parent);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  null);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  null);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  null,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  null,  this);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  null,  this);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
218	[BUG]  [BUGGY]  AssertionFailedError  pn  =  new  AssertionFailedError(t.getModule());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  AssertionFailedError  pn  =  new  AssertionFailedError(t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	AssertionFailedError  pn  =  new  AssertionFailedError(t.getModule());	  NodeTraversal.traverse(compiler,    pn,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallbacks(),  t);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallbacks(),  t);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallbacks(),  t);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallbacks());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ClassCallbacks());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ClassCallbacks());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ClassCallbacks());	  NodeTraversal.traverse(compiler,    n,    new    ClassCallbacks());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  ClassCallbacks());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  ClassCallbacks());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  ClassCallbacks());	  NodeTraversal.traverse(compiler,    n,    new    ClassCallbacks());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
225	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  ClassCallbacks());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  new  ClassCallbacks());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  new  ClassCallbacks());	  NodeTraversal.traverse(compiler,    n,    new    ClassCallbacks());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
226	[BUG]  [BUGGY]  parent.addDefinition(t,  pn);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(t,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(t,  pn);	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  true);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  true);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n  },  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent  },  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  },  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t,  n  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  true);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  true);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    false);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t.getModule()  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    false);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t.getModule()  },  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t.getModule()  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  new  Class[]  {  t.getModule()  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    false);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    false);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
237	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ClassCallback());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    n,    null,    new    ClassCallback());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ClassCallback());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    n,    null,    new    ClassCallback());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null,  new  ClassCallback());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  null,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    n,    null,    new    ClassCallback());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
241	[BUG]  [BUGGY]  pn.addDependency(definitionClass,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(definitionClass,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(definitionClass,  t.getModule());	  pn.add(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  parent));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    pn));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
243	[BUG]  [BUGGY]  pn.addDeclaration(t,  n.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDeclaration(t,  n.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDeclaration(t,  n.getModule());	  pn.addDeclaration(t,    parent.getModule());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
244	[BUG]  [BUGGY]  parent.addDeclaration(t,  pn.getModule());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDeclaration(t,  pn.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDeclaration(t,  pn.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(parent));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(parent));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(parent));	  NodeTraversal.traverse(compiler,    parent,    new    AssertionFailedError(t));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  t);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  t);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse: "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse: "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse: "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse   "));    	non-compiled	[CE]  <identifier>  expected	35	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse ",  t));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse   "));    	non-compiled	[CE]  <identifier>  expected	35	None	replace
250	[BUG]  [BUGGY]  pn.addDependency(n,  t.getModule());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(n,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(n,  t.getModule());	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
251	[BUG]  [BUGGY]  pn.addDependency(t,  parent.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(t,  parent.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(t,  parent.getModule());	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
252	[BUG]  [BUGGY]  pn.addDependency(definitionFactory,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(definitionFactory,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(definitionFactory,  t.getModule());	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  t);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent,  t);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(t.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(t.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule(),  pn));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule(),  pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule(),  pn));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AssertionFailedError(t.getModule()));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule()),  pn);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule()),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule()),  pn);	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  new  AssertionFailedError(t.getModule()));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  parent,  n);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  parent,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  parent,  n);	  NodeTraversal.traverse(compiler,    t,    parent,    n);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  n,  pn);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  n,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  parent,  n,  pn);	  NodeTraversal.traverse(compiler,    t,    parent,    n);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	20	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	69	None	replace
264	[BUG]  [BUGGY]  parent.addDeclaration(parent,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDeclaration(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDeclaration(parent,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
265	[BUG]  [BUGGY]  parent.setModule(t.getModule());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.setModule(t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.setModule(t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
266	[BUG]  [BUGGY]  parent.setModule(null);  pn.addDeclaration(parent,  t.getModule());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.setModule(null);  pn.addDeclaration(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.setModule(null);  pn.addDeclaration(parent,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  null);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n));    	non-compiled	[CE]  <identifier>  expected	70	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ClassCallback(),  n);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ClassCallback(),  n);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ClassCallback(),  n);	  NodeTraversal.traverse(compiler,    parent,    new    ClassCallback());    	non-compiled	[CE]  <identifier>  expected	1	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.parent);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this.parent);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
271	[BUG]  [BUGGY]  pn.addReferenceDeclaration(declaration,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addReferenceDeclaration(declaration,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addReferenceDeclaration(declaration,  t.getModule());	  pn.addDeclaration(declaration,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  n,  parent);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  this,  n,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  this,  n,  parent);	  NodeTraversal.traverse(compiler,    parent,    n,    this);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
273	[BUG]  [BUGGY]  pn.setDeclaration(declaration);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.setDeclaration(declaration);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.setDeclaration(declaration);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parent,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parent,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  parent,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
275	[BUG]  [BUGGY]  pn.addDependency(definitionProvider,  t.getModule());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(definitionProvider,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(definitionProvider,  t.getModule());	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
276	[BUG]  [BUGGY]  pn.addDependency(definitionFunction,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(definitionFunction,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(definitionFunction,  t.getModule());	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
277	[BUG]  [BUGGY]  pn.addDependency(declaration,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(declaration,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(declaration,  t.getModule());	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
278	[BUG]  [BUGGY]  parent.addDefinition(t.getModule(),  n);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(t.getModule(),  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(t.getModule(),  n);	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
279	[BUG]  [BUGGY]  parent.addDefinition(t,  n);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(t,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(t,  n);	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  JSError.class  }  );  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  JSError.class  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  JSError.class  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    this    }    );    	non-compiled	[CE]  <identifier>  expected	85	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  getClass()  }  );  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  getClass()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  getClass()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    this    }    );    	non-compiled	[CE]  <identifier>  expected	85	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n  },  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  Class[]  {  t,  n  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    this);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
284	[BUG]  [BUGGY]  parent.processBaseClassCall(t,  n);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.processBaseClassCall(t,  n);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.processBaseClassCall(t,  n);	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
285	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
286	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  null));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  null));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t,  null));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn,  this);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n),  pn,  this);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t),    pn);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t),  pn,  this);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t),  pn,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t),  pn,  this);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t),    pn);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallbacks(),  this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallbacks(),  this);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallbacks(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallbacks());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n  },  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t,    n    }    );    	non-compiled	[CE]  <identifier>  expected	41	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n  },  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t,  n  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t,    n    }    );    	non-compiled	[CE]  <identifier>  expected	41	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule(),  this));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule(),  this));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule(),  this));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  getClass()));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  getClass()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  getClass()));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()!=  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  RuntimeException( "Failed  to  initialize  class  call: "));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  RuntimeException( "Failed  to  initialize  class  call: "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  RuntimeException( "Failed  to  initialize  class  call: "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    initialize    class    call:   "));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(t.getModule()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getModule()  ==  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getModule()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
300	[BUG]  [BUGGY]  if(parent!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(parent!=  null)  {  pn.addDefinition(parent,  t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(parent!=  null)  {  pn.addDefinition(parent,  t.getModule());  }	  pn.addDefinition(t,    parent.getModule());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
301	[BUG]  [BUGGY]  if(parent!=  null)  {  pn.addDefinition(t,  parent.getModule());  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(parent!=  null)  {  pn.addDefinition(t,  parent.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(parent!=  null)  {  pn.addDefinition(t,  parent.getModule());  }	  pn.addDefinition(t,    parent.getModule());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parser);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parser);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parser);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.n,  new  AssertionFailedError(t));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  this.n,  new  AssertionFailedError(t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  this.n,  new  AssertionFailedError(t));	  NodeTraversal.traverse(compiler,    parent,    new    AssertionFailedError(t));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
305	[BUG]  [BUGGY]  parent.setModule(null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.setModule(null);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.setModule(null);	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")),  t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")),  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")),  t);	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( " ")));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( " ")));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  RuntimeException( " ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")),  pn);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")),  pn);	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  scope),  pn);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  scope),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  scope),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
311	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  this.parent);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  this.parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  this.parent);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
312	[BUG]  [BUGGY]  parent.addDefinition(parent,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDefinition(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDefinition(parent,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  AssertionFailedError(t.getModule()));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule()  +  1));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule()  +  1));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AssertionFailedError(t.getModule()  +  1));	  NodeTraversal.traverse(compiler,    n,    this,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	27	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  parent);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  null,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
317	[BUG]  [BUGGY]  parent.addDependency(n,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDependency(n,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDependency(n,  t.getModule());	  parent.addDefinition(n,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
319	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NeighborTraversal.traverse(compiler,  n,  this);	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
320	[BUG]  [BUGGY]  parent.addDeclaration(t.getModule(),  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDeclaration(t.getModule(),  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDeclaration(t.getModule(),  n);	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
321	[BUG]  [BUGGY]  parent.addDeclaration(t,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDeclaration(t,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDeclaration(t,  n);	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(false));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(false));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(false));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
323	[BUG]  [BUGGY]  parent.addDependency(t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDependency(t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDependency(t.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  parent.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  pn);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  pn);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  pn);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  null);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  this,  null);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    this);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( ". "));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( ". "));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( ". "));	  NodeTraversal.traverse(compiler,    parent,    new    RuntimeException(   "   "));    	non-compiled	[CE]  <identifier>  expected	34	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  pn),  this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  pn),  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  pn),  this);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    pn));    	non-compiled	[CE]  <identifier>  expected	29	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  pn);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  pn);	  NodeTraversal.traverse(compiler,    n,    this,    pn);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule()),  pn);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule()),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule()),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  <identifier>  expected	94	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pn,  this.parent);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  pn,  this.parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  pn,  this.parent);	  NodeTraversal.traverse(compiler,    pn,    parent);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.n,  new  AssertionFailedError(t.getModule()));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  this.n,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  this.n,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    parent,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	26	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  t.getModule()  }  );  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  parent,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  <identifier>  expected	15	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  module,  parent,  t.getModule()  }  );  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  module,  parent,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  module,  parent,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  <identifier>  expected	15	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  type,  parent,  t.getModule()  }  );  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  type,  parent,  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  type,  parent,  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    parent,    t.getModule()    }    );    	non-compiled	[CE]  <identifier>  expected	15	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  pn);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  pn);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  this);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  parent,  t.getModule()  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    this);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  this,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  this,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  this,  null);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    this);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()!=  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()!=  null);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()!=  null);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.hasChildren());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.hasChildren());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.hasChildren());	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  parent);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  parent);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    null    }    );    	non-compiled	[CE]  <identifier>  expected	84	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    null    }    );    	non-compiled	[CE]  <identifier>  expected	84	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    parent);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n  },  parent,  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    parent);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  null);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  null);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ClassCallback(),  t);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ClassCallback(),  t);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ClassCallback(),  t);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(pn.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(pn.getType()  ==  Token.CALL  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.CALL    &&    NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  e));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  e));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  e));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  pn));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  pn));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ",  pn));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions:  {  0  }   ",  t));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions:  {  0  }   ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions:  {  0  }   ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
352	[BUG]  [BUGGY]  pn.addDefinition(parent,  t.getModule());  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDefinition(parent,  t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDefinition(parent,  t.getModule());  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  <identifier>  expected	38	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  pn);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent  },  pn);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  <identifier>  expected	38	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  parent);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  this,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  this,  parent);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  AssertionFailedError(t.getModule()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  AssertionFailedError(t.getModule()));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  node,  new  AssertionFailedError(t.getModule()));	  NodeTraversal.traverse(compiler,    pn,    new    AssertionFailedError(t.getModule()));    	non-compiled	[CE]  <identifier>  expected	25	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
358	[BUG]  [BUGGY]  pn.addReferenceDeclaration(parent,  t.getModule());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addReferenceDeclaration(parent,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addReferenceDeclaration(parent,  t.getModule());	  pn.addDeclaration(n,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    pn);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  pn.getFirstChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  pn.getFirstChild());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  pn.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    pn);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
361	[BUG]  [BUGGY]  parent.addDeclaration(t,  pn,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDeclaration(t,  pn,  t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDeclaration(t,  pn,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDeclaration(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  Class[]  {  t.getModule()  }  );  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  Class[]  {  t.getModule()  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  node,  new  Class[]  {  t.getModule()  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t.getModule()    }    );    	non-compiled	[CE]  <identifier>  expected	14	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()!=  Token.CALL  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
364	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }	  pn.addDependency(t.getModule());    	non-compiled	[CE]  <identifier>  expected	61	None	replace
365	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }	  pn.addDependency(t.getModule());    	non-compiled	[CE]  <identifier>  expected	61	None	replace
366	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addDependency(t.getModule());  }  else  {  throw  new  IllegalStateException( " ");  }	  pn.addDependency(t.getModule());    	non-compiled	[CE]  <identifier>  expected	61	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  n,  parent);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  n,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
368	[BUG]  [BUGGY]  pn.addReference(t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addReference(t.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addReference(t.getModule());	  pn.setModule(parent.getModule());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
369	[BUG]  [BUGGY]  pn.addDefinition(t,  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDefinition(t,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDefinition(t,  n);	  pn.setModule(parent.getModule());    	non-compiled	[CE]  <identifier>  expected	46	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  getClass());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  getClass());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  getClass());	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    this);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
371	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addModule(t.getModule());  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addModule(t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addModule(t.getModule());  }	  pn.addModule(t.getModule());    	non-compiled	[CE]  <identifier>  expected	89	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ClassCallback());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  node,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    parent,    new    ClassCallback());    	non-compiled	[CE]  <identifier>  expected	1	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  null);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  pn,  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    pn);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parser);	  NodeTraversal.traverse(compiler,    pn,    n);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NAME,  t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.CALL    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
379	[BUG]  [BUGGY]  pattern.addDefinition(n,  t.getModule());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pattern.addDefinition(n,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pattern.addDefinition(n,  t.getModule());	  if(t.getModule()!=    null)    {    pn.addDefinition(n,    t.getModule());    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  this  }  );  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  this  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  this  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  <identifier>  expected	38	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  null  }  );  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  null  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  parent,  null  }  );	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n,    parent    }    );    	non-compiled	[CE]  <identifier>  expected	38	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  pn  },  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  pn  },  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  pn  },  this);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    this);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
383	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addDeclaration(n,  t.getModule());  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addDeclaration(n,  t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addDeclaration(n,  t.getModule());  }	  pn.addDeclaration(n,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	47	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(t.getType()  ==  Token.CALL);	  Preconditions.checkState(t.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  ||  t.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  ||  t.getType()  ==  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.CALL  ||  t.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(t.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  ||  t.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.CALL  ||  t.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.CALL  ||  t.getType()  ==  Token.GETPROP);	  Preconditions.checkState(t.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t),  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t),  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  parse  class ",  t),  n);	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    parse    class   "));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  n,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
392	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  [Delete]  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	[Delete]	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
393	[BUG]  [BUGGY]  parent.addDependency(t.getModule(),  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addDependency(t.getModule(),  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addDependency(t.getModule(),  n);	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call. "),  t);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call. "),  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  initialize  class  call. "),  t);	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    initialize    class    call:   "));    	non-compiled	[CE]  <identifier>  expected	37	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ")));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ")));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   ")));    	non-compiled	[CE]  <identifier>  expected	58	None	replace
396	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(parent,  t.getModule());  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(parent,  t.getModule());  }  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addDependency(parent,  t.getModule());  }	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
397	[BUG]  [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(t.getModule()!=  null)  {  pn.addDependency(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(t.getModule()!=  null)  {  pn.addDependency(parent,  t.getModule());  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  }	  pn.addDependency(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	18	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  this));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  this));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn,  this));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  pn),  null);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    pn));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
400	[BUG]  [BUGGY]  pn.addChildToFront(parent);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addChildToFront(parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addChildToFront(parent);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
401	[BUG]  [BUGGY]  pn.addChildToBack(parent);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addChildToBack(parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addChildToBack(parent);	  pn.addDeclaration(declaration);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  null  },  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  true,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  true,  false);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  true,  false);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    false);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isExpressionNode(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	69	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValueDeclaration(n));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValueDeclaration(n));  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isLiteralValueDeclaration(n));	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION    ||!NodeUtil.isFunctionDeclaration(n));    	non-compiled	[CE]  <identifier>  expected	69	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule()  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule()  +  1));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule()  +  1));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  <identifier>  expected	94	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule(),  this));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule(),  this));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t,  n.getModule(),  this));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t,    n.getModule()));    	non-compiled	[CE]  <identifier>  expected	94	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  pn  },  parent);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  pn  },  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  n,  pn  },  parent);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t,    n    },    parent);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  null,  false));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  null,  false));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  null,  false));	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule(),    this));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
410	[BUG]  [BUGGY]  try  ==  pn.addDefinition(parent,  t.getModule());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  try  ==  pn.addDefinition(parent,  t.getModule());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	try  ==  pn.addDefinition(parent,  t.getModule());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
411	[BUG]  [BUGGY]  try  ==  pn.addDefinition(parent,  t.getModule());  }  finally  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  try  ==  pn.addDefinition(parent,  t.getModule());  }  finally  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	try  ==  pn.addDefinition(parent,  t.getModule());  }  finally  {  throw  new  IllegalStateException( " ");  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
412	[BUG]  [BUGGY]  try  ==  pn.addDefinition(parent,  t.getModule());  }  catch(NoSuchMethodException  nsme)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  try  ==  pn.addDefinition(parent,  t.getModule());  }  catch(NoSuchMethodException  nsme)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	try  ==  pn.addDefinition(parent,  t.getModule());  }  catch(NoSuchMethodException  nsme)  {  throw  new  IllegalStateException( " ");  }	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
413	[BUG]  [BUGGY]  pn.addReference(t,  n.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addReference(t,  n.getModule());  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addReference(t,  n.getModule());	  pn.addDeclaration(t,    parent.getModule());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(t.getType()  ==  Token.NAME);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(t.getType()  ==  Token.NAME);	  Preconditions.checkState(t.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  false,  null);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  false,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t.getModule()  },  false,  null);	  NodeTraversal.traverse(compiler,    n,    new    Class[]    {    t.getModule()    },    false);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(label));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(label));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(label));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t),  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t),  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException(t),  n);	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "));    	non-compiled	[CE]  <identifier>  expected	57	None	replace
418	[BUG]  [BUGGY]  if(declaration!=  null)  {  pn.addDeclaration(declaration,  t.getModule());  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(declaration!=  null)  {  pn.addDeclaration(declaration,  t.getModule());  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(declaration!=  null)  {  pn.addDeclaration(declaration,  t.getModule());  }	  pn.addDeclaration(declaration,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
419	[BUG]  [BUGGY]  if(declaration!=  null)  {  pn.addDeclaration(declaration,  t.getModule());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  if(declaration!=  null)  {  pn.addDeclaration(declaration,  t.getModule());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	if(declaration!=  null)  {  pn.addDeclaration(declaration,  t.getModule());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  pn.addDeclaration(declaration,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	49	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||  t.getModule()  ==  Token.CALL);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||  t.getModule()  ==  Token.CALL);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(t.getType()  ==  Token.FUNCTION  ||  t.getModule()  ==  Token.CALL);	  Preconditions.checkState(t.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  parent.getFirstChild()  ==  n);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  parent.getFirstChild()  ==  n);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(parent.getType()  ==  Token.CALL  ||  parent.getFirstChild()  ==  n);	  Preconditions.checkState(parent.getType()    ==    Token.CALL);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  Object.class),  pn);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  Object.class),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  Object.class),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  ctxt),  pn);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  ctxt),  pn);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(t.getModule(),  ctxt),  pn);	  NodeTraversal.traverse(compiler,    n,    new    AssertionFailedError(t.getModule()),    pn);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  t);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  t);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null,  t);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  t,  null);	  NodeTraversal.traverse(compiler,    n,    this,    null);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t,  n);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  t,  n);	  NodeTraversal.traverse(compiler,    n,    this,    t);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  pn,  parent);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  pn,  parent);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  pn,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    pn);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  pn,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  pn,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  this,  pn,  null);	  NodeTraversal.traverse(compiler,    n,    this,    pn);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions, ",  t));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions, ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions, ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions. ",  t));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions. ",  t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Failed  to  add  class  definitions. ",  t));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "Failed    to    add    class    definitions   ",    t));    	non-compiled	[CE]  <identifier>  expected	74	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
434	[BUG]  [BUGGY]  parent.addChildToFront(t,  n);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addChildToFront(t,  n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addChildToFront(t,  n);	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
435	[BUG]  [BUGGY]  parent.addChildToFront(n);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  parent.addChildToFront(n);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	parent.addChildToFront(n);	  if(t.getModule()!=    null)    {    pn.addDefinition(parent,    t.getModule());    }    else    {    NodeTraversal.traverse(compiler,    n,    this);    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t));  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t));	  NodeTraversal.traverse(compiler,    parent,    new    AssertionFailedError(t));    	non-compiled	[CE]  <identifier>  expected	32	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  null  }  );  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  null  }  );  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class[]  {  t,  null  }  );	  NodeTraversal.traverse(compiler,    parent,    new    Class[]    {    t,    n    }    );    	non-compiled	[CE]  <identifier>  expected	40	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ClassCallbacks());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  ClassCallbacks());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  new  ClassCallbacks());	  NodeTraversal.traverse(compiler,    n,    new    ClassCallbacks());    	non-compiled	[CE]  <identifier>  expected	75	None	replace
439	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  null);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  null);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	Traversal.traverse(compiler,  n,  null);	  Traversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  n);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  n);  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCallback(),  t,  n);	  NodeTraversal.traverse(compiler,    n,    new    ClassCallback(),    t);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  n,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent,  n,  this);  [BUGGY]      }    private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  t,  parent,  n,  this);	  NodeTraversal.traverse(compiler,    t,    parent,    n);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser,  new  ClassCallback());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parser,  new  ClassCallback());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	NodeTraversal.traverse(compiler,  n,  parser,  new  ClassCallback());	  NodeTraversal.traverse(compiler,    n,    null,    new    ClassCallback());    	non-compiled	[CE]  <identifier>  expected	4	None	replace
443	[BUG]  [BUGGY]  pn.addDependency(t,  t.getModule());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addDependency(t,  t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addDependency(t,  t.getModule());	  pn.add(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
444	[BUG]  [BUGGY]  pn.addChildToFront(t.getModule());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      pn.addDefinition(parent,  t.getModule());  }  }  }  }      [BUGGY]  pn.addChildToFront(t.getModule());  [BUGGY]          private  void  processBaseClassCall(NodeTraversal  t,  Node  n)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	pn.addChildToFront(t.getModule());	  pn.add(parent,    t.getModule());    	non-compiled	[CE]  <identifier>  expected	65	None	replace
