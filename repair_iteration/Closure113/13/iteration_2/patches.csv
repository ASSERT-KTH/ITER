bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  null));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  null));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  null));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    null));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  null);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    null));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(unwrappedType));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(unwrappedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(unwrappedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unwrappedType));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(unwrappedType));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(unwrappedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(unwrappedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unwrappedType));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType,  arg));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType,  arg));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unwrappedType));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType),  t);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType),  t);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType),  t);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unwrappedType));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType),  arg);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType),  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType),  arg);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unwrappedType));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
11	[BUG]  [BUGGY]  Context.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.checkState(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
12	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
13	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
14	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
15	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
16	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
17	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
18	[BUG]  [BUGGY]  if(unwrappedType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
19	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
20	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
21	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
22	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ": "+arg;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ": "+arg;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + ": "+arg;	  String    methodName    =    arg.getQualifiedName()    +   ":   "+methodName;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
23	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ".: "+arg;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ".: "+arg;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + ".: "+arg;	  String    methodName    =    arg.getQualifiedName()    +   ":   "+methodName;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  DEFAULT_TYPE);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  DEFAULT_TYPE);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  DEFAULT_TYPE);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    type);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  type);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  type);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  type);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    type);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  this);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  this);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    type);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
27	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName()  ==  desiredType)  {	  if    (methodName.getQualifiedName()!=    null    &&    methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(wantedType));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(wantedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(wantedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wantedType));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(arg,  desiredType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(arg,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wantedType));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(wantedType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(wantedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(wantedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wantedType));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  desiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wantedType));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  desiredType,  new  AssertionFailedError(methodName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  desiredType,  new  AssertionFailedError(methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  desiredType,  new  AssertionFailedError(methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wantedType));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
33	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  &&  arg.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  &&  arg.getType()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  &&  arg.getType()  ==  desiredType)  {	  if(methodName.getQualifiedName()    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
34	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  &&  arg.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  &&  arg.getType()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  &&  arg.getType()  ==  desiredType)  {	  if(methodName.getQualifiedName()    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
35	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getType()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  methodName.getType()  ==  desiredType)  {	  if(methodName.getQualifiedName()    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
36	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  methodName.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  methodName.getType()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  ||  methodName.getType()  ==  desiredType)  {	  if(methodName.getQualifiedName()    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
37	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	43	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expectedType,  new  AssertionFailedError(t,  methodName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  expectedType,  new  AssertionFailedError(t,  methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  expectedType,  new  AssertionFailedError(t,  methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    expectedType));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  expectedType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  expectedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  expectedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    expectedType));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    expectedType));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  expectedType),  arg);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  expectedType),  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  expectedType),  arg);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    expectedType));    	non-compiled	[CE]  <identifier>  expected	63	None	replace
42	[BUG]  [BUGGY]  AssertionFailedError.traverse(t,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.traverse(t,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.traverse(t,  methodName,  arg,  desiredType);	  AssertionFailedError.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
43	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);	  AssertionFailedError.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
44	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  expected);	  AssertionFailedError.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
45	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType,  null);	  AssertionFailedError.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
46	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getLastChild();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getLastChild();	  MethodName    methodName    =    arg.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
47	[BUG]  [BUGGY]  MethodName  methodName  =  t.getFirstChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getFirstChild();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getFirstChild();	  MethodName    methodName    =    arg.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
48	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getType();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getType();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getType();	  MethodName    methodName    =    arg.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
49	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
51	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
52	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
53	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
54	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  arg);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  arg);	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
55	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
56	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg,  desiredType));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
57	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
58	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  DEFAULT_TYPE,  desiredType));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  DEFAULT_TYPE,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  DEFAULT_TYPE,  desiredType));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
59	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(t,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(t,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(t,  methodName,  arg,  desiredType);	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
60	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.getType());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.getType());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.getType());	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(t,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(t,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleMissingClass(t,  methodName,  arg,  desiredType);	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
62	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName.getQualifiedName());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName.getQualifiedName());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName.getQualifiedName());	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
63	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(null,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(null,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(null,  methodName,  arg,  desiredType);	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
64	[BUG]  [BUGGY]  MethodName  methodName  =  t.getMethodName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getMethodName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getMethodName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
65	[BUG]  [BUGGY]  MethodName  methodName  =  t.getMemberName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getMemberName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getMemberName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
66	[BUG]  [BUGGY]  MethodName  methodName  =  t.getSimpleName();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getSimpleName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getSimpleName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  this.indent);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  this.indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  this.indent);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    indent);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent,  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent,  false);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    indent);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent,  expected);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent,  expected);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    indent);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
70	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
71	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
72	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
73	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
74	[BUG]  [BUGGY]  AssertionFailedError  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
75	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_TYPE,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_TYPE,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_TYPE,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
76	[BUG]  [BUGGY]  String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "null ";  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "null ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "null ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "null   ";    	non-compiled	[CE]  <identifier>  expected	108	None	replace
77	[BUG]  [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  null> ";  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  null> ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  null> ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "null   ";    	non-compiled	[CE]  <identifier>  expected	108	None	replace
78	[BUG]  [BUGGY]  if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	78	None	replace
79	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	78	None	replace
80	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	78	None	replace
81	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  0  :  arg.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  0  :  arg.getQualifiedName()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  <  1)?  0  :  arg.getQualifiedName()  +  1;	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
82	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  0  :  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  0  :  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  <  1)?  0  :  arg.getQualifiedName();	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
83	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  null  :  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  null  :  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  <  1)?  null  :  arg.getQualifiedName();	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
84	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  -1  :  arg.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  <  1)?  -1  :  arg.getQualifiedName()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  <  1)?  -1  :  arg.getQualifiedName()  +  1;	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
85	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
86	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
87	[BUG]  [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
88	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getSimpleNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getSimpleNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getSimpleNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
89	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
90	[BUG]  [BUGGY]  if(arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
91	[BUG]  [BUGGY]  if(arg.getType()!=  requiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  requiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  requiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
92	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
93	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
94	[BUG]  [BUGGY]  For(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
95	[BUG]  [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
96	[BUG]  [BUGGY]  AssertionFailedError.for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
97	[BUG]  [BUGGY]  Node  methodName  =  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Node  methodName  =  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Node  methodName  =  arg.getQualifiedName();	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
98	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
99	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
100	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
101	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
102	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
103	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType,  arg.getQualifiedName());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType,  arg.getQualifiedName());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType,  arg.getQualifiedName());	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
104	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(null,  methodName,  arg.getQualifiedName());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(null,  methodName,  arg.getQualifiedName());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(null,  methodName,  arg.getQualifiedName());	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
105	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName);	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(methodName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(methodName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	8	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    desiredType));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    desiredType));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  DEFAULT_TYPE,  desiredType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  DEFAULT_TYPE,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  DEFAULT_TYPE,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    desiredType));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
116	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
117	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
118	[BUG]  [BUGGY]  if(wangedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wangedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wangedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
119	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
120	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
121	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
122	[BUG]  [BUGGY]  if(arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
123	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
124	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName()  ==  desiredType)  {	  if    (methodName.getQualifiedName()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
125	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()  ==  arg)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getQualifiedName()  ==  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()  ==  arg)  {	  if    (methodName.getQualifiedName()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
126	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName()!=  desiredType)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName()!=  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName()!=  desiredType)  {	  if    (methodName.getQualifiedName()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
127	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
128	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
129	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
130	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
131	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
132	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
133	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
134	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	79	None	replace
135	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	79	None	replace
136	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	79	None	replace
137	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	79	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  arg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType),  arg);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
139	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg,  desiredType);	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
140	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg);	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
141	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.getQualifiedName());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.getQualifiedName());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.getQualifiedName());	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
142	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(requiredType,  methodName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(requiredType,  methodName);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(requiredType,  methodName);	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
143	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.toString());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.toString());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  arg.toString());	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
144	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  null);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
145	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  t);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  t);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  t);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
146	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  expected);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
147	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  false);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
148	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName().trim();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName().trim();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName().trim();	  String    methodName    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
149	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName().toLowerCase();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName().toLowerCase();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName().toLowerCase();	  String    methodName    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
150	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName().trim().toLowerCase();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName().trim().toLowerCase();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName().trim().toLowerCase();	  String    methodName    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
151	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName().trim()  +  1;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName().trim()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName().trim()  +  1;	  String    methodName    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
152	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(t,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(t,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleMissingName(t,  methodName,  arg,  desiredType);	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
153	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
154	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
155	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  desiredType  ||  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  desiredType  ||  desiredType!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  desiredType  ||  desiredType!=  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
156	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  desiredType  ||  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  desiredType  ||  desiredType!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  desiredType  ||  desiredType!=  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
157	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  ||  desiredType!=  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
158	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  desiredType!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  desiredType!=  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
159	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  arg  ||  desiredType  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  arg  ||  desiredType  ==  0)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  arg  ||  desiredType  ==  0)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
160	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
161	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
162	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
163	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
164	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
165	[BUG]  [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
166	[BUG]  [BUGGY]  if(arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
167	[BUG]  [BUGGY]  if(arg.getType()!=  requiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  requiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  requiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  true);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  true);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    false);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  false);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    false);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
170	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  0)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  0)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
171	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  Token.NAME)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  Token.NAME)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
172	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  Token.FUNCTION)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  ||  desiredType  ==  Token.FUNCTION)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
173	[BUG]  [BUGGY]  MethodName  methodName  =  t.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getQualifiedName()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getQualifiedName()  +  1;	  MethodName    methodName    =    t.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
174	[BUG]  [BUGGY]  MethodName  methodName  =  t.getRawClass();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getRawClass();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getRawClass();	  MethodName    methodName    =    t.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
175	[BUG]  [BUGGY]  MethodName  methodName  =  t.getReturnType();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getReturnType();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getReturnType();	  MethodName    methodName    =    t.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(unknownType));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(unknownType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(unknownType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unknownType));    	non-compiled	[CE]  <identifier>  expected	109	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(unknownType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(unknownType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(unknownType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unknownType));    	non-compiled	[CE]  <identifier>  expected	109	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType,  arg));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType,  arg));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unknownType));    	non-compiled	[CE]  <identifier>  expected	109	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType),  t);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType),  t);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType),  t);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unknownType));    	non-compiled	[CE]  <identifier>  expected	109	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType),  arg);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType),  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType),  arg);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unknownType));    	non-compiled	[CE]  <identifier>  expected	109	None	replace
181	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
182	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
183	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
184	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
185	[BUG]  [BUGGY]  Context.traverse(t,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(t,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(t,  methodName,  arg,  desiredType);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
186	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  desiredType,  expected);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
187	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  desiredType,  null);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
188	[BUG]  [BUGGY]  if  (methodName.getType()  ==  desiredType  ||  methodName.getQualifiedName()!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getType()  ==  desiredType  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getType()  ==  desiredType  ||  methodName.getQualifiedName()!=  null)  {	  if    (methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
189	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
190	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
191	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
192	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  false;	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
193	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
194	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
195	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(wrappedType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(wrappedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(wrappedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wrappedType));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(wrappedType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(wrappedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(wrappedType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wrappedType));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType),  t);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType),  t);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType),  t);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wrappedType));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType,  desiredType));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wrappedType));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType,  arg));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType,  arg));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wrappedType));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
201	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
202	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  desiredType,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  desiredType,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  desiredType,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
203	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_TYPE,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_TYPE,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_TYPE,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
204	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
205	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  null);	  NodeTraversal.traverse(compiler,    methods,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  methodName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  methodName);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  methodName);	  NodeTraversal.traverse(compiler,    methods,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  expected);	  NodeTraversal.traverse(compiler,    methods,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
210	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
211	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
212	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
213	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
214	[BUG]  [BUGGY]  String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "  <  unknown> ";  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "  <  unknown> ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "  <  unknown> ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "    <    unknown>   ";    	non-compiled	[CE]  <identifier>  expected	107	None	replace
215	[BUG]  [BUGGY]  String  methodName  =  arg  ==  null?  methodName.getQualifiedName()  : "  <  unknown> ";  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg  ==  null?  methodName.getQualifiedName()  : "  <  unknown> ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg  ==  null?  methodName.getQualifiedName()  : "  <  unknown> ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "    <    unknown>   ";    	non-compiled	[CE]  <identifier>  expected	107	None	replace
216	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
217	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
218	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
219	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
220	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
221	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getNext())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getNext())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getNext())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
222	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  scope));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  scope));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  scope));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    scope));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(t,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    scope));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(scope));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(scope));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(scope));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    scope));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
226	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methods,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methods,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methods,  arg,  desiredType);	  MutableNodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
227	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType,  methodName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType,  methodName);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType,  methodName);	  MutableNodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  reportError);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  reportError);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  reportError);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    null);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  error);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  error);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  error);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    null);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
230	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
231	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType  ||  arg!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType  ||  arg!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType  ||  arg!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
232	[BUG]  [BUGGY]  if(arg  ==  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg  ==  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg  ==  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
233	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
234	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
235	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
236	[BUG]  [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	96	None	replace
237	[BUG]  [BUGGY]  if(unwrappedType  ||  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType  ||  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType  ||  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	96	None	replace
238	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
239	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  null);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
240	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  false);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
241	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  type);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  type);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  type);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
242	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + "_ "+arg;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + "_ "+arg;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + "_ "+arg;	  String    methodName    =    arg.getQualifiedName()    +   "_   "+methodName;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desired,  expected);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desired,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desired,  expected);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  ignored);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  ignored);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  ignored);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  unexpected);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  unexpected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  unexpected);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  unknown);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  unknown);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  unknown);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
247	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	73	None	replace
248	[BUG]  [BUGGY]  if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	73	None	replace
249	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	73	None	replace
250	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase(Locale.ENGLISH);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getQualifiedName().toLowerCase(Locale.ENGLISH);	  MethodName    methodName    =    arg.getQualifiedName().toLowerCase();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
251	[BUG]  [BUGGY]  MethodName  methodName  =  t.getQualifiedName().toLowerCase();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getQualifiedName().toLowerCase();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getQualifiedName().toLowerCase();	  MethodName    methodName    =    arg.getQualifiedName().toLowerCase();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
252	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toUpperCase();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toUpperCase();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getQualifiedName().toUpperCase();	  MethodName    methodName    =    arg.getQualifiedName().toLowerCase();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
253	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase()  +  1;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getQualifiedName().toLowerCase()  +  1;	  MethodName    methodName    =    arg.getQualifiedName().toLowerCase();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  expected);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  expected);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  message);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  message);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  message);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  null);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  required);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  required);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  required);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
258	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
259	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType,  null);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
260	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
261	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  type);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  type);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType,  type);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
262	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
263	[BUG]  [BUGGY]  For(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
264	[BUG]  [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
265	[BUG]  [BUGGY]  AssertionFailedError.for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(requiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(requiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(requiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(requiredType));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(requiredType));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(requiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(requiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(requiredType));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
273	[BUG]  [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
274	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
275	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
277	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.traverse(compiler,  methodName,  arg);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
278	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
279	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
280	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()  ==  null  &&  methodName.getQualifiedName()!=  desiredType)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getQualifiedName()  ==  null  &&  methodName.getQualifiedName()!=  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()  ==  null  &&  methodName.getQualifiedName()!=  desiredType)  {	  if    (methodName.getQualifiedName()!=    null    ||    methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
281	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "._ ";  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "._ ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + "._ ";	  String    methodName    =    arg.getQualifiedName()    +   "_   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
282	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + "_ ";  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + "_ ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + "_ ";	  String    methodName    =    arg.getQualifiedName()    +   "_   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
283	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desiredType: ";  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desiredType: ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ",  desiredType: ";	  String    methodName    =    arg.getQualifiedName()    +   "_   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
284	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desiredType ";  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desiredType ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ",  desiredType ";	  String    methodName    =    arg.getQualifiedName()    +   "_   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
285	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ": ";  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ": ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + ": ";	  String    methodName    =    arg.getQualifiedName()    +   ":   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
286	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ".: ";  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + ".: ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + ".: ";	  String    methodName    =    arg.getQualifiedName()    +   ":   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
287	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
288	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
289	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent  ==  null  &&  parent.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent  ==  null  &&  parent.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
290	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
291	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent  ==  null  &&  parent.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent  ==  null  &&  parent.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
292	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()  >=  desiredType)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getQualifiedName()  >=  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()  >=  desiredType)  {	  if    (methodName.getQualifiedName()!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
293	[BUG]  [BUGGY]  if(wangedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wangedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wangedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	19	None	replace
294	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()  ==  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()  ==  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getQualifiedName()  ==  null);	  Preconditions.checkState(methodName.getQualifiedName()!=    null);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getQualifiedName()!=  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getQualifiedName()!=  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getQualifiedName()!=  null);	  Preconditions.checkState(methodName.getQualifiedName()!=    null);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()  >=  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()  >=  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getQualifiedName()  >=  null);	  Preconditions.checkState(methodName.getQualifiedName()!=    null);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getQualifiedName()  ==  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getQualifiedName()  ==  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getQualifiedName()  ==  null);	  Preconditions.checkState(methodName.getQualifiedName()!=    null);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
299	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
300	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
301	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
302	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
303	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
304	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
305	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
306	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
307	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  type)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
308	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
309	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
310	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
311	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
312	[BUG]  [BUGGY]  if(arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
313	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
314	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
315	[BUG]  [BUGGY]  if(unwrappedType.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
316	[BUG]  [BUGGY]  if(unwrappedType.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	21	None	replace
317	[BUG]  [BUGGY]  String  methodName  =  t.getQualifiedName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  t.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  t.getQualifiedName();	  String    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
318	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  +  1;	  String    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
319	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName(),  desiredType);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName(),  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName(),  desiredType);	  String    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
320	[BUG]  [BUGGY]  aughtExceptionHandler.handleError(t,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleError(t,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleError(t,  methodName,  arg,  desiredType);	  if(arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
321	[BUG]  [BUGGY]  Iterator  <  Node>  it  =  args.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Iterator  <  Node>  it  =  args.iterator();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Iterator  <  Node>  it  =  args.iterator();	  if(arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
322	[BUG]  [BUGGY]  aughtExceptionHandler.handleError(t,  methodName,  arg,  desiredType);  return  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleError(t,  methodName,  arg,  desiredType);  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleError(t,  methodName,  arg,  desiredType);  return  false;	  if(arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
323	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  t);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  t);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  t);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType));    	non-compiled	[CE]  <identifier>  expected	106	None	replace
324	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  this);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  this);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  this);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType));    	non-compiled	[CE]  <identifier>  expected	106	None	replace
325	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  event);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  event);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType),  event);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType));    	non-compiled	[CE]  <identifier>  expected	106	None	replace
326	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
329	[BUG]  [BUGGY]  MethodName  methodName  =  arg,  arg.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg,  arg.getQualifiedName()  +  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg,  arg.getQualifiedName()  +  1;	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
330	[BUG]  [BUGGY]  MethodName  methodName  =  arg,  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg,  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg,  arg.getQualifiedName();	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
331	[BUG]  [BUGGY]  MethodName  methodName  =  null.getQualifiedName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  null.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  null.getQualifiedName();	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
332	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
333	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
334	[BUG]  [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
335	[BUG]  [BUGGY]  if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	85	None	replace
336	[BUG]  [BUGGY]  &&  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  &&  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	&&  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	85	None	replace
337	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
338	[BUG]  [BUGGY]  if(unwrappedType)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
339	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(arg));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  t,  new  AssertionFailedError(arg));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(arg));    	non-compiled	[CE]  <identifier>  expected	7	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
346	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
347	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getNext();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getNext();	  MethodName    methodName    =    arg.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	92	None	replace
348	[BUG]  [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
349	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(t,  methodName,  arg);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(t,  methodName,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(t,  methodName,  arg);	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
350	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
351	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
352	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  null)  {  if(arg.getType()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  null)  {  if(arg.getType()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  null)  {  if(arg.getType()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
353	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodsName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodsName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodsName,  arg,  desiredType);	  MutableNodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
354	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  MethodName.class,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  MethodName.class,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  MethodName.class,  arg,  desiredType);	  MutableNodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
355	[BUG]  [BUGGY]  MethodName  methodName  =  n.getQualifiedName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  n.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  n.getQualifiedName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
356	[BUG]  [BUGGY]  MethodName  methodName  =  t.getScope().getQualifiedName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getScope().getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getScope().getQualifiedName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
357	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
358	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
359	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  path  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  path  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  path	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
360	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.get  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.get  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.get	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
361	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualified  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualified  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualified	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
362	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg,  desiredType));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
363	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
364	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
365	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  false));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  false));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  new  AssertionFailedError(t,  false));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
366	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	43	None	replace
367	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	43	None	replace
368	[BUG]  [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	43	None	replace
369	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  args)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  args)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  args)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	43	None	replace
370	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
371	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
372	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
373	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  name.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  name.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  name.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType),  arg);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType),  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType),  arg);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wrappedType));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
375	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
376	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
377	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
378	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
379	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.get  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.get  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.get	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
380	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
381	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedTypeError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedTypeError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedTypeError(t,  desiredType));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
382	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
383	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
384	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
385	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.get  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.get  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.get	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
386	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  UNKNOWN_EXPR_TYPE);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  UNKNOWN_EXPR_TYPE);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  UNKNOWN_EXPR_TYPE);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  INVALID_ARGUMENT_ERROR);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
389	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType  ||  arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
390	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  null)  {  if(arg.getType()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  null)  {  if(arg.getType()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  null)  {  if(arg.getType()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
391	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
392	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	85	None	replace
393	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	85	None	replace
394	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	85	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(unwrappedType  ==  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(unwrappedType  ==  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(unwrappedType  ==  false);	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkArgument(unwrappedType  ==  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(unwrappedType  ==  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(unwrappedType  ==  false);	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(unwrappedType!=  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(unwrappedType!=  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(unwrappedType!=  false);	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkArgument(unwrappedType!=  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(unwrappedType!=  false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(unwrappedType!=  false);	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkNotNull(arg);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkNotNull(arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkNotNull(arg);	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
400	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
401	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
402	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
403	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	21	None	replace
404	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	21	None	replace
405	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg),  desiredType));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg),  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName,  arg),  desiredType));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
406	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  null);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    null);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  report);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  report);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  report);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    null);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
409	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	96	None	replace
410	[BUG]  [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	96	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualified  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualified  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualified	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null),  desiredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null),  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null),  desiredType);	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    null));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  this));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  this));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  this));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    null));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName())	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
423	[BUG]  [BUGGY]  MethodName  methodName  =  t.getQualifiedName(null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getQualifiedName(null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getQualifiedName(null);	  MethodName    methodName    =    t.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
424	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
425	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  preferredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  preferredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  preferredType);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
427	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
428	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  desiredType  ||  methodName.getQualifiedName()!=  arg)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getQualifiedName()!=  desiredType  ||  methodName.getQualifiedName()!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  desiredType  ||  methodName.getQualifiedName()!=  arg)  {	  if    (methodName.getQualifiedName()!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
429	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
430	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
432	[BUG]  [BUGGY]  String  methodName  =  arg!=  null?  methodName.getQualifiedName()  : "  <  unknown> ";  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg!=  null?  methodName.getQualifiedName()  : "  <  unknown> ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg!=  null?  methodName.getQualifiedName()  : "  <  unknown> ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "    <    unknown>   ";    	non-compiled	[CE]  <identifier>  expected	107	None	replace
433	[BUG]  [BUGGY]  if(requiredType)  {  if(arg!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(arg!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
434	[BUG]  [BUGGY]  if(requiredType  ||  arg!=  null)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg!=  null)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg!=  null)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
435	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
441	[BUG]  [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg,  desiredType));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg,  desiredType));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg,  desiredType));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
442	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  arg.getQualifiedName();	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
443	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null?  arg.getQualifiedName()  :  arg.getQualifiedName());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null?  arg.getQualifiedName()  :  arg.getQualifiedName());  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  ==  null?  arg.getQualifiedName()  :  arg.getQualifiedName());	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
444	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null)?  0  :  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null)?  0  :  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  ==  null)?  0  :  arg.getQualifiedName();	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
445	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  : "null ";  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  : "null ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  : "null ";	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
446	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "_ ",  desiredType);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "_ ",  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + "_ ",  desiredType);	  String    methodName    =    arg.getQualifiedName()    +   "_   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
447	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
448	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  true;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
449	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "._ "+methodName;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "._ "+methodName;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + "._ "+methodName;	  String    methodName    =    arg.getQualifiedName()    +   "_   "+methodName;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
450	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  arg.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  ||  arg.getType()  ==  desiredType)  {	  if(methodName.getQualifiedName()    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
451	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getType()!=  desiredType)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getType()!=  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  methodName.getType()!=  desiredType)  {	  if(methodName.getQualifiedName()    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  INVALID_ARGUMENT_ERROR,  desiredType));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  INVALID_ARGUMENT_ERROR,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  INVALID_ARGUMENT_ERROR,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    desiredType));    	non-compiled	[CE]  <identifier>  expected	62	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  indent);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  indent);	  NodeTraversal.traverse(compiler,    methods,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
454	[BUG]  [BUGGY]  String  methodName  =  methodName.toLowerCase();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.toLowerCase();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.toLowerCase();	  String    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
455	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  unknownType,  new  AssertionFailedError(methodName));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  unknownType,  new  AssertionFailedError(methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  unknownType,  new  AssertionFailedError(methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(unknownType));    	non-compiled	[CE]  <identifier>  expected	109	None	replace
456	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
457	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName().replace('.',  '_');  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName().replace('.',  '_');  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName().replace('.',  '_');	  String    methodName    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
458	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
459	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
460	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName())    	non-compiled	[CE]  <identifier>  expected	44	None	replace
461	[BUG]  [BUGGY]  MethodName  argName  =  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  argName  =  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  argName  =  arg.getQualifiedName();	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
462	[BUG]  [BUGGY]  MethodName  methodsName  =  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodsName  =  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodsName  =  arg.getQualifiedName();	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
463	[BUG]  [BUGGY]  MethodName  pathName  =  arg.getQualifiedName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  pathName  =  arg.getQualifiedName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  pathName  =  arg.getQualifiedName();	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
464	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
465	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
466	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  expected,  desiredType);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  expected,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  expected,  desiredType);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
467	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase(false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase(false);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getQualifiedName().toLowerCase(false);	  MethodName    methodName    =    arg.getQualifiedName().toLowerCase();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
468	[BUG]  [BUGGY]  if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
469	[BUG]  [BUGGY]  if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
470	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
471	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  preferredType);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  preferredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  preferredType);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
472	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType));	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
473	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType,  indent);	  Opcodes.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
474	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  preferredType);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  preferredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  preferredType);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
475	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  expectedType);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  expectedType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  expectedType);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
476	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  null);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  null);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
477	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
478	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  name.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  name.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  name.getQualifiedName()));  return  false;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
479	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  return  false;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
480	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
481	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType,  arg);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType,  arg);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType,  arg);	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
482	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
483	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
484	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  t,  desiredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  t,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  t,  desiredType);	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
485	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName),  arg,  desiredType));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName),  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName),  arg,  desiredType));	  if(arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
486	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
487	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
488	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(requiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(requiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  arg,  new  AssertionFailedError(requiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(requiredType));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  requiredType,  new  AssertionFailedError(methodName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  requiredType,  new  AssertionFailedError(methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  requiredType,  new  AssertionFailedError(methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(requiredType));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
491	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
492	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
493	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
494	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
495	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
496	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  type,  desiredType);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  type,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  type,  desiredType);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    type);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
497	[BUG]  [BUGGY]  if(methodName!=  null  ||  methodName.getQualifiedName()  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName!=  null  ||  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName!=  null  ||  methodName.getQualifiedName()  ==  null)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
498	[BUG]  [BUGGY]  if(methodName  ==  null  ||  methodName.getQualifiedName()!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName  ==  null  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName  ==  null  ||  methodName.getQualifiedName()!=  null)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
499	[BUG]  [BUGGY]  String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "  <  null> ";  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "  <  null> ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName!=  null?  arg.getQualifiedName()  : "  <  null> ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "null   ";    	non-compiled	[CE]  <identifier>  expected	108	None	replace
500	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ".: ";  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ".: ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ".: ";	  String    methodName    =    arg.getQualifiedName()    +   ":   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
501	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
502	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	19	None	replace
503	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
504	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ".: "+methodName;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ".: "+methodName;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ".: "+methodName;	  String    methodName    =    arg.getQualifiedName()    +   ":   "+methodName;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
505	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	78	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrapped));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrapped));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrapped));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(arg));    	non-compiled	[CE]  <identifier>  expected	7	None	replace
507	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  null)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  null)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  null)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
508	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
509	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
510	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName,  arg,  desiredType));	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
511	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName,  arg),  desiredType));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName,  arg),  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName,  arg),  desiredType));	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
512	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	73	None	replace
513	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	73	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
516	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
517	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  arg  &&  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  arg  &&  desiredType!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  arg  &&  desiredType!=  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
518	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  arg  ||  desiredType  ==  arg)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  arg  ||  desiredType  ==  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  arg  ||  desiredType  ==  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
519	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg),  desiredType);	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
520	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  new  ASsertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  new  ASsertionFailedError(t,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  new  ASsertionFailedError(t,  desiredType));	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
521	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  indent);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  indent);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    indent);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
522	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  null  ||  methodName.getQualifiedName()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName.getQualifiedName()!=  null  ||  methodName.getQualifiedName()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  null  ||  methodName.getQualifiedName()  ==  desiredType)  {	  if    (methodName.getQualifiedName()!=    null    ||    methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
523	[BUG]  [BUGGY]  if  (methodName!=  null  ||  methodName.getQualifiedName()!=  desiredType)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if  (methodName!=  null  ||  methodName.getQualifiedName()!=  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName!=  null  ||  methodName.getQualifiedName()!=  desiredType)  {	  if    (methodName.getQualifiedName()!=    null    ||    methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
524	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
525	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName());  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName());  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName());  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
526	[BUG]  [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName())  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName())	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkArgument(!requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
531	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  preferredType));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  preferredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  preferredType));	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType));    	non-compiled	[CE]  <identifier>  expected	106	None	replace
532	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  expectedType));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  expectedType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  expectedType));	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType));    	non-compiled	[CE]  <identifier>  expected	106	None	replace
533	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
534	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
535	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
536	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
537	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  DEFAULT_NAME_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    ENVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
538	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  state,  desiredType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  state,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  state,  desiredType));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
539	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  destination));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  destination));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  destination));	  Context.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	53	None	replace
540	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
541	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
542	[BUG]  [BUGGY]  if(wantedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wantedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wantedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(wantedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  typeName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  typeName);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg,  desiredType,  typeName);	  NodeTraversal.traverse(compiler,    methods,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
544	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
545	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.get  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.get  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.get	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
546	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
547	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
548	[BUG]  [BUGGY]  if(requiredType!=  arg.getType())  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType!=  arg.getType())  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType!=  arg.getType())  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
549	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
550	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
551	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
552	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()  ==  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()  ==  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()  ==  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
553	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);	  MutableNodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	102	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  t,  new  AssertionFailedError(t,  methodName));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    scope));    	non-compiled	[CE]  <identifier>  expected	54	None	replace
555	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
556	[BUG]  [BUGGY]  if(arg!=  null)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(arg.getType()  ==  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
557	[BUG]  [BUGGY]  String  methodName  =  t.getSimpleName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  t.getSimpleName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  t.getSimpleName();	  String    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
558	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  null,  desiredType);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  null,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  null,  desiredType);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    null);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
559	[BUG]  [BUGGY]  if(requiredType!=  arg.getType())  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType!=  arg.getType())  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType!=  arg.getType())  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
560	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg.getType()!=    desiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
561	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	79	None	replace
562	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	79	None	replace
563	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  expected);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  expected);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  preferredType,  expected);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
564	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  expected,  desired);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  expected,  desired);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  expected,  desired);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    expected);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
565	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName().length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName().length()  >  0)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName().length()  >  0)  {	  if    (methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
566	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName().equals(arg))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName().equals(arg))  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName().equals(arg))  {	  if    (methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
567	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	  if(requiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
568	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	19	None	replace
569	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName()  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName!=  null  &&  methodName.getQualifiedName()  ==  null)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
570	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName().equals(arg))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName().equals(arg))  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName().equals(arg))  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
571	[BUG]  [BUGGY]  if(methodName  ==  null  ||  methodName.getQualifiedName()  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName  ==  null  ||  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName  ==  null  ||  methodName.getQualifiedName()  ==  null)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
572	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName().length()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName().length()  ==  desiredType)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  methodName.getQualifiedName().length()  ==  desiredType)  {	  if(methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
573	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desired ";  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desired ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ",  desired ";	  String    methodName    =    arg.getQualifiedName()    +   "_   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
574	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
575	[BUG]  [BUGGY]  if(requiredType  <  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  <  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  <  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
576	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
577	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiredType  ||  arg.getType()!=  requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()!=  null,  desiredType);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()!=  null,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getQualifiedName()!=  null,  desiredType);	  Preconditions.checkState(methodName.getQualifiedName()!=    null);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
579	[BUG]  [BUGGY]  if(unwrappedType  ||  arg!=  null)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType  ||  arg!=  null)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType  ||  arg!=  null)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	96	None	replace
580	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
581	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
582	[BUG]  [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	try  ==  false)  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
583	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
584	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
585	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
586	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
587	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
588	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
589	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
590	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
591	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
592	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
593	[BUG]  [BUGGY]  MethodName  methodName  =  t.getReferenceName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getReferenceName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getReferenceName();	  MethodName    methodName    =    t.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
594	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  expected  type: "+methodName;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  expected  type: "+methodName;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ",  expected  type: "+methodName;	  String    methodName    =    arg.getQualifiedName()    +   ":   "+methodName;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
595	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ".. "+methodName;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ".. "+methodName;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ".. "+methodName;	  String    methodName    =    arg.getQualifiedName()    +   ":   "+methodName;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
596	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(methodName.getType()    ==    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
597	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  methodName,  desiredType);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  arg,  methodName,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  arg,  methodName,  desiredType);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
598	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg;	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
599	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  methodName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  methodName);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  t,  methodName);	  NodeTraversal.traverse(compiler,    arg,    methodName);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
600	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  parent  ==  null  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	parent  ==  null  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    pathName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
601	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + "._ "+arg;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName.getQualifiedName()  + "._ "+arg;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName()  + "._ "+arg;	  String    methodName    =    arg.getQualifiedName()    +   "_   "+methodName;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
602	[BUG]  [BUGGY]  AssertionFailedToName(t,  methodName,  arg,  desiredType))  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedToName(t,  methodName,  arg,  desiredType))  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedToName(t,  methodName,  arg,  desiredType))  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
603	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
604	[BUG]  [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
605	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    	non-compiled	[CE]  <identifier>  expected	26	None	replace
606	[BUG]  [BUGGY]  if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
607	[BUG]  [BUGGY]  if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
608	[BUG]  [BUGGY]  if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(  methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(  methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  <=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(  methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
609	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getType())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
610	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
611	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedNames())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	  for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.toString()));    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
612	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	85	None	replace
613	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true    	non-compiled	[CE]  <identifier>  expected	78	None	replace
614	[BUG]  [BUGGY]  MethodName  methodName  =  (arg.getQualifiedName()  +  1)/  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  (arg.getQualifiedName()  +  1)/  2;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  (arg.getQualifiedName()  +  1)/  2;	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
615	[BUG]  [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()  +  1)+  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()  +  1)+  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =(arg.getQualifiedName()  +  1)+  1;	  MethodName    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
616	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  VALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  VALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  VALID_ARGUMENT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
617	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  MISSING_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  MISSING_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getFirstChild())  {  compiler.report(t.makeError(methodName,  MISSING_ARGUMENT_ERROR,  arg.getQualifiedName	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName    	non-compiled	[CE]  <identifier>  expected	35	None	replace
618	[BUG]  [BUGGY]  if(wantedType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wantedType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wantedType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(arg.getType()!=    desiredType)    {    for(Node    methodName    :    arg.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
619	[BUG]  [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
620	[BUG]  [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
621	[BUG]  [BUGGY]  Traversal.traverse(compiler,  t,  new  AssertionFailedError(methodName,  arg));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  t,  new  AssertionFailedError(methodName,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  t,  new  AssertionFailedError(methodName,  arg));	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
622	[BUG]  [BUGGY]  Traversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  arg,  new  AssertionFailedError(t,  methodName));	  Traversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    arg));    	non-compiled	[CE]  <identifier>  expected	55	None	replace
623	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desired  type: ";  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ",  desired  type: ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ",  desired  type: ";	  String    methodName    =    arg.getQualifiedName()    +   ":   ";    	non-compiled	[CE]  <identifier>  expected	6	None	replace
624	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
625	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
626	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
627	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
628	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
629	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
630	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.get  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.get  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.get	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
631	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  t);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType,  t);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType,  t);	  Traversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
632	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(t,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(t,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleMissingClass(t,  arg,  desiredType);	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
633	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(t,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(t,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleMissingName(t,  arg,  desiredType);	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
634	[BUG]  [BUGGY]  Context.checkArgument(arg.getType()!=  desiredType);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.checkArgument(arg.getType()!=  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.checkArgument(arg.getType()!=  desiredType);	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
635	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(t,  methodName,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  aughtExceptionHandler.handleMissingName(t,  methodName,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	aughtExceptionHandler.handleMissingName(t,  methodName,  arg,  desiredType));	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
636	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
637	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
638	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
639	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  if(requiresType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
640	[BUG]  [BUGGY]  if(requiresType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiresType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiresType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	  if(requiresType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
641	[BUG]  [BUGGY]  String  methodName  =  (arg.getQualifiedName()  +  1)/  2;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  (arg.getQualifiedName()  +  1)/  2;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  (arg.getQualifiedName()  +  1)/  2;	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
642	[BUG]  [BUGGY]  String  methodName  =(arg.getQualifiedName()  +  1)+  1;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =(arg.getQualifiedName()  +  1)+  1;  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =(arg.getQualifiedName()  +  1)+  1;	  String    methodName    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
643	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  desiredType,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  desiredType,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  desiredType,  arg.getQualifiedName()));  }	  For(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
644	[BUG]  [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
645	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false    	non-compiled	[CE]  <identifier>  expected	25	None	replace
646	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(tokenName,  desiredType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(tokenName,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(tokenName,  desiredType);	  AssertionFailedError    t    =    new    AssertionFailedError(methodName,    desiredType);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
647	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
648	[BUG]  [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(methodName.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()    	non-compiled	[CE]  <identifier>  expected	46	None	replace
649	[BUG]  [BUGGY]  MutableNodeTraversal.traverseWithType(compiler,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverseWithType(compiler,  methodName,  arg,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverseWithType(compiler,  methodName,  arg,  desiredType);	  MutableNodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
650	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  methodName,  desiredType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  methodName,  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  methodName,  desiredType);	  MutableNodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
651	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
652	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  if(methodName.getType()!=    desiredType)    {    for(Node    methodName    :    methods.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
653	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  arg,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  arg,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(requiredType));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
654	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  arg));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName,  arg));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(requiredType));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
655	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
656	[BUG]  [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg!=  null)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(requiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	  if(requiredType)    {    if(methodName.getQualifiedName()!=    null)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
657	[BUG]  [BUGGY]  if(requiredType!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
658	[BUG]  [BUGGY]  if(requiredType!=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType!=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType!=  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
659	[BUG]  [BUGGY]  if(requiredType  ==  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ==  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ==  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
660	[BUG]  [BUGGY]  if(requiredType  ==  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(requiredType  ==  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ==  0)  {  if(arg.getType()!=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	  if(requiredType    ||    arg!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    arg.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
661	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName().replace('.',  '.');  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg.getQualifiedName().replace('.',  '.');  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName().replace('.',  '.');	  String    methodName    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
662	[BUG]  [BUGGY]  String  methodName  =  arg!=  null?  arg.getQualifiedName()  : "  <  unknown> ";  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  arg!=  null?  arg.getQualifiedName()  : "  <  unknown> ";  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg!=  null?  arg.getQualifiedName()  : "  <  unknown> ";	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "    <    unknown>   ";    	non-compiled	[CE]  <identifier>  expected	107	None	replace
663	[BUG]  [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  unknown> ",  desiredType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  unknown> ",  desiredType);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  unknown> ",  desiredType);	  String    methodName    =    methodName    ==    null?    arg.getQualifiedName()    :   "    <    unknown>   ";    	non-compiled	[CE]  <identifier>  expected	107	None	replace
664	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  arg  ||  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(methodName.getQualifiedName()  ==  arg  ||  desiredType!=  arg)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  arg  ||  desiredType!=  arg)  {	  if(methodName.getQualifiedName()!=    arg    ||    desiredType!=    arg)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
665	[BUG]  [BUGGY]  AssertionFailedToName(t,  methodName,  arg,  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  AssertionFailedToName(t,  methodName,  arg,  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedToName(t,  methodName,  arg,  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
666	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  NON_OBJECT_ERROR,  methodName.getQualifiedName()));  }	  for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
667	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  expectedValue);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  expectedValue);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR,  expectedValue);	  NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType,    INVALID_ARGUMENT_ERROR);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
668	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  desiredType,  indent);	  Context.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
669	[BUG]  [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  true;  }	  if(unwrappedType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
670	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wantedType,  arg));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wantedType,  arg));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wantedType,  arg));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(wantedType));    	non-compiled	[CE]  <identifier>  expected	76	None	replace
671	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(  t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }	  if(requiredType)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(t.makeError(methodName,    INVALID_OBJECT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
672	[BUG]  [BUGGY]  MethodName  methodName  =  t.getSourceName();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getSourceName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getSourceName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
673	[BUG]  [BUGGY]  MethodName  methodName  =  t.getScope().getMethodName();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  MethodName  methodName  =  t.getScope().getMethodName();  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getScope().getMethodName();	  MethodName    methodName    =    methodName.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
674	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null,  desiredType));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]          private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {      [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null,  desiredType));  [BUGGY]      if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null,  desiredType));	  NodeTraversal.traverse(compiler,    methodName,    new    AssertionFailedError(t,    null));    	non-compiled	[CE]  <identifier>  expected	52	None	replace
