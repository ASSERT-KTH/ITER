bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (methodName.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if  (methodName.getType()  ==  desiredType)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getType()  ==  desiredType)  {	  if    (methodName.getType()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  String  methodName  =  methodName.getQualifiedName();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  methodName.getQualifiedName();  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName.getQualifiedName();	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
3	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  arg.getQualifiedName()  +  1;  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  +  1;	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "_ ";  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "_ ";  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + "_ ";	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName().trim();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  arg.getQualifiedName().trim();  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName().trim();	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ": ";  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ": ";  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ": ";	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(arg));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(arg));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(arg));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(methodName));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wrappedType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(requiredType));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(requiredType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(requiredType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unwrappedType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
13	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
14	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
15	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
16	[BUG]  [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType  ||  arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg.getType()!=  desiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
17	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
23	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()  ==  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
24	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
26	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
27	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MethodName  methodName  =  arg.getQualifiedName()  +  1;  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getQualifiedName()  +  1;	      MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  MethodName  methodName  =  methodName.getQualifiedName();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MethodName  methodName  =  methodName.getQualifiedName();  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  methodName.getQualifiedName();	      MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  MethodName  methodName  =  t.getQualifiedName();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MethodName  methodName  =  t.getQualifiedName();  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  t.getQualifiedName();	      MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
30	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MethodName  methodName  =  arg.getQualifiedName().toLowerCase();  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getQualifiedName().toLowerCase();	      MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
31	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	For(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  Context.traverse(compiler,  methodName,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  arg,  desiredType);	      NodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  Traversal.traverse(compiler,  methodName,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  arg,  desiredType);	      NodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  Opcodes.traverse(compiler,  methodName,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Opcodes.traverse(compiler,  methodName,  arg,  desiredType);	      NodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methods,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methods,  arg,  desiredType);	      NodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if  (methodName.getQualifiedName()  ==  desiredType)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()  ==  desiredType)  {	  if    (arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  arg.getType()  ==  desiredType)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getQualifiedName()  ==  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null  ||  arg.getType()  ==  desiredType)  {	  if    (arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName())	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methods.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName()!=  desiredType)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if  (methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName()!=  desiredType)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  null  &&  methodName.getQualifiedName()!=  desiredType)  {	  if    (methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  null  ||  methodName.getQualifiedName()!=  desiredType)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if  (methodName.getQualifiedName()!=  null  ||  methodName.getQualifiedName()!=  desiredType)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  null  ||  methodName.getQualifiedName()!=  desiredType)  {	  if    (methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if  (methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  null)  {	  if    (methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  if  (methodName.getQualifiedName()!=  arg)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if  (methodName.getQualifiedName()!=  arg)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if  (methodName.getQualifiedName()!=  arg)  {	  if    (methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  null));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
53	[BUG]  [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Context.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  scope));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  scope));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  scope));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Traversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  arg));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  expected);	      NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  null);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  null);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  null);	      NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  type);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  type);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  type);	      NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  false);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  false);	      NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "_ "+methodName;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  arg.getQualifiedName()  + "_ "+methodName;  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + "_ "+methodName;	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ": "+methodName;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  arg.getQualifiedName()  + ": "+methodName;  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  arg.getQualifiedName()  + ": "+methodName;	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  desiredType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  expectedType));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  expectedType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(t,  expectedType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(t,    methodName));    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
65	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  arg.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
67	[BUG]  [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  arg  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
70	[BUG]  [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiresType)  {  if(methodName.getQualifiedName()!=  null)  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
71	[BUG]  [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError.traverse(compiler,  methodName,  arg,  desiredType);	      NodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
72	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
73	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
74	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
75	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wantedType));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wantedType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(wantedType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
77	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
78	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
79	[BUG]  [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
80	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
81	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
82	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
83	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
84	[BUG]  [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
85	[BUG]  [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  INVALID_ARGUMENT_ERROR);	      NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  arg,  desiredType,  indent);	      NodeTraversal.traverse(compiler,    methodName,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
88	[BUG]  [BUGGY]  if(methodName.getQualifiedName()  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getQualifiedName()  ==  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()  ==  null)  {	  if    (arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
89	[BUG]  [BUGGY]  if(arg!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(arg!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
90	[BUG]  [BUGGY]  if(requiredType  ||  arg!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType  ||  arg!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType  ||  arg!=  null)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
91	[BUG]  [BUGGY]  if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(requiredType)  {  if(arg.getType()!=  desiredType)  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  arg.toString()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    if(arg.getType()!=    desiredType)    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MethodName  methodName  =  arg.getFirstChild();  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MethodName  methodName  =  arg.getFirstChild();	      MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
93	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_OBJECT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
95	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  pathName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
96	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
97	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  ENVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  methodName);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  arg,  methodName);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  arg,  methodName);	      NodeTraversal.traverse(compiler,    arg,    desiredType);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
99	[BUG]  [BUGGY]  if(methodName.getQualifiedName()!=  arg  ||  desiredType!=  arg)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(methodName.getQualifiedName()!=  arg  ||  desiredType!=  arg)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(methodName.getQualifiedName()!=  arg  ||  desiredType!=  arg)  {	  if    (methodName.getQualifiedName()!=    desiredType)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
101	[BUG]  [BUGGY]  if(wantedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(wantedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(wantedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  true;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    true;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
102	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType);	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()!=  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  Preconditions.checkState(methodName.getQualifiedName()!=  null);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	Preconditions.checkState(methodName.getQualifiedName()!=  null);	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
104	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  arg,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  arg,  desiredType);	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
105	[BUG]  [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType);  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	AssertionFailedError  t  =  new  AssertionFailedError(methodName,  desiredType);	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
106	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	MutableNodeTraversal.traverse(compiler,  methodName,  arg,  desiredType));	      if(methodName.getQualifiedName()!=    null)    {    for(Node    arg    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
107	[BUG]  [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  unknown> ";  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  unknown> ";  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "  <  unknown> ";	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
108	[BUG]  [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "null ";  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "null ";  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	String  methodName  =  methodName  ==  null?  arg.getQualifiedName()  : "null ";	      String    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType));  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	NodeTraversal.traverse(compiler,  methodName,  new  AssertionFailedError(unknownType));	      NodeTraversal.traverse(compiler,    arg,    new    AssertionFailedError(methodName));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
110	[BUG]  [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(unwrappedType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
111	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  arg.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
112	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]        private  boolean  verifyOfType(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {    [BUGGY]  if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [BUGGY]    if  (arg.getType()  !=  desiredType)  {  compiler.report(  t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	if(arg.getType()!=  desiredType)  {  for(Node  methodName  :  methodName.getQualifiedName())  {  compiler.report(t.makeError(methodName,  INVALID_ARGUMENT_ERROR,  methodName.getQualifiedName()));  return  false;  }	      if(methodName.getQualifiedName()!=    null)    {    for(Node    methodName    :    methodName.getQualifiedName())    {    compiler.report(    t.makeError(methodName,    INVALID_ARGUMENT_ERROR,    methodName.getQualifiedName()));    return    false;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
