bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent  ==  null)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent  ==  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  name  =  parent.getLastChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  name  =  parent.getLastChild().getQualifiedName();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  parent.getLastChild().getQualifiedName();	      name    =    parent.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  Name  name  =  t.getFirstChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  t.getFirstChild().getQualifiedName();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  t.getFirstChild().getQualifiedName();	      Name    name    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  Name  name  =  parent.getLastChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  parent.getLastChild().getQualifiedName();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  parent.getLastChild().getQualifiedName();	      Name    name    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  if(providedNames!=  null  ||  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames!=  null  ||  name.length()  ==  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  ||  name.length()  ==  0)  {	  if(providedNames!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if(providedNames!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  Name  pn  =  parent.providedNames.get(name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  parent.providedNames.get(name);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  parent.providedNames.get(name);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  Name  pn  =  this.providedNames.get(name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  this.providedNames.get(name);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  this.providedNames.get(name);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  providedNames.get(name  +  1);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name  +  1);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  Name  pn  =  givenNames.get(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  givenNames.get(name);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  givenNames.get(name);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
11	[BUG]  [BUGGY]  Name  name  =  t.getLastChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  t.getLastChild().getQualifiedName();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  t.getLastChild().getQualifiedName();	      Name    name    =    n.getLastChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  name  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  name  =  n.getFirstChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  n.getFirstChild();	      name    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  name  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  name  =  parent.getLastChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  parent.getLastChild();	      name    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  name  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  name  =  parent.getFirstChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  parent.getFirstChild();	      name    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(name!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(name!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name  ==  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(name!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  if(name!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(name!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  name  =  n.getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  name  =  n.getLastChild().getString();  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  n.getLastChild().getString();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.length()  ==  0)  {	  if(name    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  t  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  t  =  n.getLastChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  n.getLastChild();	      t    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  t  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  t  =  parent.getFirstChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  parent.getFirstChild();	      t    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  t  =  name.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  t  =  name.getFirstChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  name.getFirstChild();	      t    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  ||  name.length()  >  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.length()  >  0)  {	  if(name!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  if(name  ==  null  &&  name.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name  ==  null  &&  name.length()  >  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.length()  >  0)  {	  if(name!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
26	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  name.length()  ==  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.length()  ==  0)  {	  if(name!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
27	[BUG]  [BUGGY]  if(name!=  null  &&  parent.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  parent.length()  >  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.length()  >  0)  {	  if(name!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  if(name!=  null  ||  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  ||  name.getType()  ==  Token.NAME)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  if(name  ==  null  &&  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name  ==  null  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  if(parent!=  null  &&  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent!=  null  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  parent.isQualifiedName())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName())  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
33	[BUG]  [BUGGY]  if(name  ==  null  &&  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name  ==  null  &&  name.isQualifiedName())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.isQualifiedName())  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  if(name!=  null  ||  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  ||  name.isQualifiedName())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.isQualifiedName())  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent!=  null  &&  name.isQualifiedName())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName())  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  if(name!=  null  &&  name.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  name.hasChildren())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
37	[BUG]  [BUGGY]  if(providedNames  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames  ==  null)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames  ==  null)  {	  if(providedNames!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(providedNames!=  null  &&  name.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames!=  null  &&  name.length()  >  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  name.length()  >  0)  {	  if(providedNames!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  Name  name  =  n.getLastChild().getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  n.getLastChild().getQualifiedName()  +  1;  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getLastChild().getQualifiedName()  +  1;	      Name    name    =    n.getLastChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
40	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  n.getFirstChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild();	      name    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
41	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName()  +  1;	      Name    name    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(parent);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName(parent);	      Name    name    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(name!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name,  parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  providedNames.get(name,  parent);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name,  parent);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  t  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  t  =  n.removeFirstChild();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  n.removeFirstChild();	      t    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
46	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getName();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  name  =  n.getFirstChild().getName();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getName();	      Name    name    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
48	[BUG]  [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
49	[BUG]  [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
50	[BUG]  [BUGGY]  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  parent  =  n.getParent();  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	parent  =  n.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  t.printStackTrace();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  t.printStackTrace();  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.printStackTrace();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  t.getComment().addChildToBack(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  t.getComment().addChildToBack(name);  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().addChildToBack(name);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  if(pn!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(pn!=  null)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(pn!=  null)  {	  if(name    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  Name  pn  =  super.providedNames.get(name);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  super.providedNames.get(name);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  super.providedNames.get(name);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
55	[BUG]  [BUGGY]  Name  pn  =  suppliedNames.get(name);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  Name  pn  =  suppliedNames.get(name);  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  suppliedNames.get(name);	      Name    pn    =    providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
59	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(parent!=  null  &&  parent.hasChildren())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.hasChildren())  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames!=  null  &&  parent.isExprResult())  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.isExprResult())  {	  if(providedNames!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
61	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(providedNames!=  null  &&  parent.getFirstChild()  ==  null)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.getFirstChild()  ==  null)  {	  if(providedNames!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
62	[BUG]  [BUGGY]  name  =  n.getFirstChild().getName();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  name  =  n.getFirstChild().getName();  [BUGGY]    if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  n.getFirstChild().getName();	      name    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
64	[BUG]  [BUGGY]  if(name!=  null  &&  names.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }    [BUGGY]  if(name!=  null  &&  names.length  >  0)  {  [BUGGY]    if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  names.length  >  0)  {	  if(name!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
