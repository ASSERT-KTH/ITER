bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t  =  parent.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t  =  parent.removeFirstChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  parent.removeFirstChild();	  t    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
2	[BUG]  [BUGGY]  t  =  name.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t  =  name.removeFirstChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  name.removeFirstChild();	  t    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
3	[BUG]  [BUGGY]  if(name  ==  null  ||  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  name.isQualifiedName())  {	  if(name    ==    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
4	[BUG]  [BUGGY]  Name  pn  =  givenNames.get(name  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  givenNames.get(name  +  1);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  givenNames.get(name  +  1);	  Name    pn    =    givenNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  Name  pn  =  givenNames.get(name,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  givenNames.get(name,  parent);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  givenNames.get(name,  parent);	  Name    pn    =    givenNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(name!=    null    ||    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
7	[BUG]  [BUGGY]  Name  name  =  parent.getFirstChild().getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  parent.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  parent.getFirstChild().getQualifiedName()  +  1;	  Name    name    =    n.getFirstChild().getQualifiedName()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
8	[BUG]  [BUGGY]  Name  name  =  t.getFirstChild().getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  t.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  t.getFirstChild().getQualifiedName()  +  1;	  Name    name    =    n.getFirstChild().getQualifiedName()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
9	[BUG]  [BUGGY]  if(name!=  null)  {  t.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null)  {  t.printStackTrace();  }  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null)  {  t.printStackTrace();  }	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
10	[BUG]  [BUGGY]  t.printStackTrace(System.err);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.printStackTrace(System.err);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.printStackTrace(System.err);	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
11	[BUG]  [BUGGY]  if(name!=  null)  {  t.printStackTrace();  }  else  {  processProvideFromPreviousPass(t,  name,  parent);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null)  {  t.printStackTrace();  }  else  {  processProvideFromPreviousPass(t,  name,  parent);  }  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null)  {  t.printStackTrace();  }  else  {  processProvideFromPreviousPass(t,  name,  parent);  }	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
12	[BUG]  [BUGGY]  if(name!=  null)  {  t.printStackTrace();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null)  {  t.printStackTrace();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null)  {  t.printStackTrace();  }  else  {  throw  new  IllegalStateException( " ");  }	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
13	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.isQualifiedName())  {	  if(parent!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
14	[BUG]  [BUGGY]  if(name!=  null  ||  names.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  names.length  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  names.length  >  0)  {	  if(name!=    null    &&    names.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
15	[BUG]  [BUGGY]  if(name!=  null  &&  name.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.length  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.length  >  0)  {	  if(name!=    null    &&    names.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
16	[BUG]  [BUGGY]  if(name  ==  null  &&  names.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  names.length  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  names.length  >  0)  {	  if(name!=    null    &&    names.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
17	[BUG]  [BUGGY]  if(name  ==  null  ||  names.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  names.length  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  names.length  >  0)  {	  if(name!=    null    &&    names.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
18	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name,  t);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name,  t);	  Name    pn    =    providedNames.get(name,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
19	[BUG]  [BUGGY]  Name  pn  =  this.providedNames.get(name,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  this.providedNames.get(name,  parent);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  this.providedNames.get(name,  parent);	  Name    pn    =    providedNames.get(name,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
20	[BUG]  [BUGGY]  Name  pn  =  parent.get(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  parent.get(name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  parent.get(name);	  Name    pn    =    providedNames.get(name,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
21	[BUG]  [BUGGY]  if(name!=  null  &&  name.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getBooleanProp(Node.IS_NAMESPACE))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  if(name!=  null  ||  providedNames.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  providedNames.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  providedNames.length()  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  name.length()  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  if(name  ==  null  ||  providedNames.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  providedNames.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  providedNames.length()  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  if(name!=  null  ||  parent.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.length()  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getType()  ==  Token.NAME)  {	  if(parent!=    null    &&    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if(providedNames!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  if(name!=  null  &&  provider.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  provider.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  provider.getType()  ==  Token.NAME)  {	  if(providedNames!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  Name  name  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getLastChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getLastChild();	  name    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.NAME  &&  name.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.NAME  &&  name.getString().equals( "prototype "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getType()  ==  Token.NAME  &&  name.getString().equals( "prototype "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME    ||    name.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
31	[BUG]  [BUGGY]  if(name!=  null  ||  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype   "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype   "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype   "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME    ||    name.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
32	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype   "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype   "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype   "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME    ||    name.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
33	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.length()  >=  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.length()  >=  0)  {	  if(name!=    null    &&    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
34	[BUG]  [BUGGY]  if(name!=  null  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
35	[BUG]  [BUGGY]  Name  name  =  parent.getFirstChild().getQualifiedName(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  parent.getFirstChild().getQualifiedName(n);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  parent.getFirstChild().getQualifiedName(n);	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
36	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(t);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName(t);	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
37	[BUG]  [BUGGY]  Name  name  =  n.getLastChild().getQualifiedName(parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getLastChild().getQualifiedName(parent);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getLastChild().getQualifiedName(parent);	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
38	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(pn);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(pn);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName(pn);	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
39	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(t,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(t,  parent);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName(t,  parent);	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
40	[BUG]  [BUGGY]  if(name!=  null  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.hasChildren())  {	  if(parent!=    null    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
41	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.hasChildren())  {	  if(parent!=    null    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
42	[BUG]  [BUGGY]  if(name!=  null  ||  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.hasChildren())  {	  if(parent!=    null    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
43	[BUG]  [BUGGY]  Name  name  =  parent.getFirstChild().getName();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  parent.getFirstChild().getName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  parent.getFirstChild().getName();	  Name    name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
44	[BUG]  [BUGGY]  Name  name  =  n.getLastChild().getName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getLastChild().getName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getLastChild().getName();	  Name    name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
45	[BUG]  [BUGGY]  Name  name  =  t.getFirstChild().getName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  t.getFirstChild().getName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  t.getFirstChild().getName();	  Name    name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
46	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.isQualifiedName())  {	  if(name!=    null    &&    parent.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
47	[BUG]  [BUGGY]  if(name!=  null  ||  parent.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.isQualifiedName())  {	  if(name!=    null    &&    parent.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
48	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  name.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  name.length()  >  0)  {	  if(name    ==    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
49	[BUG]  [BUGGY]  Name  pn  =(name!=  null)?  this.providedNames.get(name):  name;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name!=  null)?  this.providedNames.get(name):  name;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name!=  null)?  this.providedNames.get(name):  name;	  Name    pn    =    this.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  name  =  parent.getFirstChild().getName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  name  =  parent.getFirstChild().getName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  parent.getFirstChild().getName();	  name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
51	[BUG]  [BUGGY]  name  =  n.getLastChild().getName();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  name  =  n.getLastChild().getName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  n.getLastChild().getName();	  name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
52	[BUG]  [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.isQualifiedName()  ||  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
53	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  name.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
54	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  name.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
55	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
56	[BUG]  [BUGGY]  t.getComment().addChildToBack(parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.getComment().addChildToBack(parent);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().addChildToBack(parent);	  t.getComment().addChildToBack(name);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
57	[BUG]  [BUGGY]  t.getComment().addChildToBack(name,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.getComment().addChildToBack(name,  parent);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().addChildToBack(name,  parent);	  t.getComment().addChildToBack(name);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
58	[BUG]  [BUGGY]  t.getComment().removeChild(name);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.getComment().removeChild(name);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().removeChild(name);	  t.getComment().addChildToBack(name);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
59	[BUG]  [BUGGY]  t.getComment().addChildToBack(pn);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.getComment().addChildToBack(pn);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().addChildToBack(pn);	  t.getComment().addChildToBack(name);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
60	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getFirstChild()  ==  null)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getFirstChild()  ==  null)  {	  if(providedNames!=    null    &&    parent.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
61	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.getFirstChild()  ==  null)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getFirstChild()  ==  null)  {	  if(providedNames!=    null    &&    parent.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
62	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.getFirstChild()  ==  null)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getFirstChild()  ==  null)  {	  if(providedNames!=    null    &&    parent.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
63	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getLastChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getLastChild()  ==  null)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getLastChild()  ==  null)  {	  if(providedNames!=    null    &&    parent.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
64	[BUG]  [BUGGY]  Name  pn  =  providerNames.get(name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providerNames.get(name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providerNames.get(name);	  Name    pn    =    parent.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  Name  pn  =  super.providedNames.get(name  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  super.providedNames.get(name  +  1);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  super.providedNames.get(name  +  1);	  Name    pn    =    super.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
66	[BUG]  [BUGGY]  Name  pn  =  super.providedNames.get(name,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  super.providedNames.get(name,  parent);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  super.providedNames.get(name,  parent);	  Name    pn    =    super.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
67	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	parent  =  parent.getParent();	  parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
68	[BUG]  [BUGGY]  parent  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  parent  =  n.getNext();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	parent  =  n.getNext();	  parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
69	[BUG]  [BUGGY]  t  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t  =  parent.getLastChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  parent.getLastChild();	  t    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
70	[BUG]  [BUGGY]  t  =  name.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t  =  name.getLastChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  name.getLastChild();	  t    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
71	[BUG]  [BUGGY]  Name  name  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  parent.getFirstChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  parent.getFirstChild();	  Name    name    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
72	[BUG]  [BUGGY]  Name  name  =  t.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  t.getFirstChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  t.getFirstChild();	  Name    name    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
73	[BUG]  [BUGGY]  Name  name  =  n.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getQualifiedName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getQualifiedName();	  Name    name    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
74	[BUG]  [BUGGY]  if(parent!=  null  &&  name.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.hasChildren())  {	  if(name!=    null    &&    name.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
75	[BUG]  [BUGGY]  if(name  ==  null  &&  name.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.hasChildren())  {	  if(name!=    null    &&    name.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
76	[BUG]  [BUGGY]  Name  name  =  parent.getLastChild().getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  parent.getLastChild().getQualifiedName()  +  1;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  parent.getLastChild().getQualifiedName()  +  1;	  Name    name    =    n.getLastChild().getQualifiedName()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
77	[BUG]  [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  ||  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  ||  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.isQualifiedName()  ||  parent.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
78	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  name.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
79	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  name.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  name.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  name.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
80	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
81	[BUG]  [BUGGY]  if(name  ==  null  ||  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  name.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  name.getType()  ==  Token.NAME)  {	  if(name!=    null    ||    name.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
82	[BUG]  [BUGGY]  name  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  name  =  n.getFirstChild().getString();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  n.getFirstChild().getString();	  name    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
83	[BUG]  [BUGGY]  name  =  parent.getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  name  =  parent.getLastChild().getString();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  parent.getLastChild().getString();	  name    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  if(name  ==  null  &&  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.length()  ==  0)  {	  if(name!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
85	[BUG]  [BUGGY]  if(parent!=  null  ||  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  ||  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  ||  name.length()  ==  0)  {	  if(name!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
86	[BUG]  [BUGGY]  if(parent!=  null  ||  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  ||  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  ||  name.isQualifiedName())  {	  if(name!=    null    ||    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
87	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_UNKNOWN))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
88	[BUG]  [BUGGY]  if(name!=  null  &&  name.getBooleanProp(Node.IS_UNKNOWN))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getBooleanProp(Node.IS_UNKNOWN))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getBooleanProp(Node.IS_UNKNOWN))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_UNKNOWN))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
89	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_UNKNOWN))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
90	[BUG]  [BUGGY]  if(name!=  null  ||  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.getBooleanProp(Node.IS_UNKNOWN))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_UNKNOWN))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
91	[BUG]  [BUGGY]  if(name!=  null  &&  providedNames.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  providedNames.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  providedNames.length()  >  0)  {	  if(providedNames!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
92	[BUG]  [BUGGY]  if(name!=  null  &&  providerNames.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  providerNames.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  providerNames.length()  >  0)  {	  if(providedNames!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
93	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
94	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
95	[BUG]  [BUGGY]  if(name!=  null  ||  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
96	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
97	[BUG]  [BUGGY]  if(name!=  null  &&  name.getBooleanProp(Node.IS_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getBooleanProp(Node.IS_PREFIX))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getBooleanProp(Node.IS_PREFIX))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
98	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
99	[BUG]  [BUGGY]  if(name!=  null  ||  parent.getBooleanProp(Node.IS_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.getBooleanProp(Node.IS_PREFIX))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.getBooleanProp(Node.IS_PREFIX))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
100	[BUG]  [BUGGY]  if(providedNames!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(providedNames!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isExprResult())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isExprResult())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
102	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.isExprResult())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.isExprResult())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
103	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.isExprResult())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.isExprResult())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
104	[BUG]  [BUGGY]  if(providedNames!=  null  ||  parent.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  ||  parent.isExprResult())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  ||  parent.isExprResult())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
105	[BUG]  [BUGGY]  if(name!=  null  &&  provider.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  provider.isExprResult())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  provider.isExprResult())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
106	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.length()  >  0)  {	  if(name!=    null    &&    parent.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
107	[BUG]  [BUGGY]  if(name!=  null  ||  parent.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.length()  >  0)  {	  if(name!=    null    &&    parent.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
108	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.length()  >  0)  {	  if(name!=    null    &&    parent.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
109	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name  +  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name  +  2);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name  +  2);	  Name    pn    =    providedNames.get(name    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
110	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name  *  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name  *  1);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name  *  1);	  Name    pn    =    providedNames.get(name    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
111	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name  +  3);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name  +  3);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name  +  3);	  Name    pn    =    providedNames.get(name    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
112	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  name.length()  <  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.length()  <  0)  {	  if(name!=    null    ||    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
113	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(name!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
114	[BUG]  [BUGGY]  if(name  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  if(name!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
115	[BUG]  [BUGGY]  if(name!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  parent.getType()  ==  Token.FUNCTION)  {	  if(name!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
116	[BUG]  [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getType()  ==  Token.FUNCTION)  {	  if(name!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
117	[BUG]  [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  ||  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.isQualifiedName()  ||  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.isQualifiedName()  ||  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
118	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  name.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
119	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  name.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  name.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  name.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
120	[BUG]  [BUGGY]  if(name!=  null  ||  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
121	[BUG]  [BUGGY]  Name  pn  =(name!=  null)?  super.providedNames.get(name):  name;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name!=  null)?  super.providedNames.get(name):  name;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name!=  null)?  super.providedNames.get(name):  name;	  Name    pn    =    super.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
122	[BUG]  [BUGGY]  if(providedNames!=  null  ||  name.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  ||  name.isEmpty())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  ||  name.isEmpty())  {	  if(providedNames    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
123	[BUG]  [BUGGY]  if(name!=  null  &&  providedNames.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  providedNames.length  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  providedNames.length  >  0)  {	  if(providedNames!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
124	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
125	[BUG]  [BUGGY]  if(name!=  null  &&  name.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getString().equals( "prototype "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getString().equals( "prototype "))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
126	[BUG]  [BUGGY]  if(t!=  null)  {  t.printStackTrace();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(t!=  null)  {  t.printStackTrace();  }  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(t!=  null)  {  t.printStackTrace();  }	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
127	[BUG]  [BUGGY]  if(name  ==  null  &&  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME    ||    name.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
128	[BUG]  [BUGGY]  if(name  ==  null  &&  name.getType()  ==  Token.NAME  &&  name.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.getType()  ==  Token.NAME  &&  name.getString().equals( "prototype "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.getType()  ==  Token.NAME  &&  name.getString().equals( "prototype "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME    ||    name.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
129	[BUG]  [BUGGY]  if(name  ==  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.isQualifiedName()  &&  parent.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
130	[BUG]  [BUGGY]  if(name!=  null  &&  name.getString().equals( "provide "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getString().equals( "provide "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getString().equals( "provide "))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
131	[BUG]  [BUGGY]  Name  name  =  n.getlastChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getlastChild().getQualifiedName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getlastChild().getQualifiedName();	  Name    name    =    parent.getLastChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
132	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getSimpleName();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getSimpleName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getSimpleName();	  Name    name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
133	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name,  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name,  name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name,  name);	  Name    pn    =    providedNames.get(name,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
134	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name,  parent;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name,  parent;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name,  parent;	  Name    pn    =    providedNames.get(name,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
135	[BUG]  [BUGGY]  Name  pn  =(name!=  null)?  this.providedNames.get(name):  providedNames.get(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name!=  null)?  this.providedNames.get(name):  providedNames.get(name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name!=  null)?  this.providedNames.get(name):  providedNames.get(name);	  Name    pn    =    this.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
136	[BUG]  [BUGGY]  Name  pn  =(name!=  null)?  this.providedNames.get(name):  names.get(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name!=  null)?  this.providedNames.get(name):  names.get(name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name!=  null)?  this.providedNames.get(name):  names.get(name);	  Name    pn    =    this.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
137	[BUG]  [BUGGY]  Name  pn  =  suppliedNames.get(name,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  suppliedNames.get(name,  parent);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  suppliedNames.get(name,  parent);	  Name    pn    =    suppliedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
138	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  name.length()  >=  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.length()  >=  0)  {	  if(name!=    null    ||    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
139	[BUG]  [BUGGY]  if(name  ==  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
140	[BUG]  [BUGGY]  Name  name  =  n.getfirstChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getfirstChild().getQualifiedName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getfirstChild().getQualifiedName();	  Name    name    =    n.getLastChild().getQualifiedName()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
141	[BUG]  [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
142	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_UNKNOWN))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
143	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(parent))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(NodeUtil.isGetProp(parent))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(NodeUtil.isGetProp(parent))  {	  if(parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
144	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(parent))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(NodeUtil.isAssignmentOp(parent))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(NodeUtil.isAssignmentOp(parent))  {	  if(pn!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
145	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.isPreviousPass())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  parent.isPreviousPass())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.isPreviousPass())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
146	[BUG]  [BUGGY]  if(providedNames!=  null  &&  name.isExprResult())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  name.isExprResult())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  name.isExprResult())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
147	[BUG]  [BUGGY]  t.getComment().reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.getComment().reportCodeChange();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().reportCodeChange();	  t.getComment().addChildToBack(name);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
148	[BUG]  [BUGGY]  if(name!=  null  ||  name.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  ||  name.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  ||  name.hasChildren())  {	  if(name!=    null    &&    name.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
149	[BUG]  [BUGGY]  if(providedNames!=  null  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  ||  parent.getType()  ==  Token.NAME)  {	  if(providedNames!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
150	[BUG]  [BUGGY]  parent  =  name.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  parent  =  name.getParent();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	parent  =  name.getParent();	  parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
151	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(name);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName(name);	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
152	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name  +  1L);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name  +  1L);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name  +  1L);	  Name    pn    =    providedNames.get(name    +    1);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
153	[BUG]  [BUGGY]  if(parent  ==  null  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent  ==  null  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent  ==  null  &&  parent.hasChildren())  {	  if(parent!=    null    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
154	[BUG]  [BUGGY]  if(n!=  null  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(n!=  null  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(n!=  null  &&  parent.hasChildren())  {	  if(parent!=    null    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
155	[BUG]  [BUGGY]  if(name  ==  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  parent.getBooleanProp(Node.IS_NAMESPACE))  {	  if(name!=    null    ||    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
156	[BUG]  [BUGGY]  if(name  ==  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
157	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
158	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.VAR)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
159	[BUG]  [BUGGY]  t.printStackTrace(name);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.printStackTrace(name);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.printStackTrace(name);	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
160	[BUG]  [BUGGY]  n.printStackTrace();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  n.printStackTrace();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	n.printStackTrace();	  t.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
161	[BUG]  [BUGGY]  Name  pn  =  namedNames.get(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  namedNames.get(name);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  namedNames.get(name);	  Name    pn    =    givenNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
162	[BUG]  [BUGGY]  Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getBooleanProp(Node.IS_NAMESPACE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getBooleanProp(Node.IS_NAMESPACE);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getBooleanProp(Node.IS_NAMESPACE);	  Name    pn    =    this.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
163	[BUG]  [BUGGY]  Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getFirstChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getFirstChild().getQualifiedName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getFirstChild().getQualifiedName();	  Name    pn    =    this.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
164	[BUG]  [BUGGY]  Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getBooleanProp(Node.IS_PROP);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getBooleanProp(Node.IS_PROP);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name  ==  null)?  this.providedNames.get(name):  parent.getBooleanProp(Node.IS_PROP);	  Name    pn    =    this.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
165	[BUG]  [BUGGY]  if(name  ==  null  &&  parent!=  null  &&  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  &&  parent!=  null  &&  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  &&  parent!=  null  &&  name.isQualifiedName())  {	  if(parent!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
166	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  NodeUtil.isAssignmentOp(parent))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  NodeUtil.isAssignmentOp(parent))  {	  if(parent!=    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
167	[BUG]  [BUGGY]  if(name!=  null  &&  name.getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  name.getString().endsWith( "__ "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  name.getString().endsWith( "__ "))  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_NAMESPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
168	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN)||  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN)||  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getBooleanProp(Node.IS_UNKNOWN)||  name.isQualifiedName())  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_UNKNOWN))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
169	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX)||  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX)||  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.getBooleanProp(Node.IS_PREFIX)||  name.isQualifiedName())  {	  if(parent!=    null    &&    parent.getBooleanProp(Node.IS_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
170	[BUG]  [BUGGY]  if(name  >=  null  &&  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  >=  null  &&  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  >=  null  &&  name.isQualifiedName())  {	  if(name!=    null    ||    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
171	[BUG]  [BUGGY]  if(name!=  null  &&  providedNames.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  providedNames.size()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  providedNames.size()  >  0)  {	  if(providedNames!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
172	[BUG]  [BUGGY]  if(name!=  null  &&  named.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  named.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  named.length()  >  0)  {	  if(providedNames!=    null    &&    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
173	[BUG]  [BUGGY]  if(providedNames!=  null  &&  name.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  name.getType()  ==  Token.NAME)  {	  if(providedNames!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
174	[BUG]  [BUGGY]  if(providedNames  ==  null  ||  name!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames  ==  null  ||  name!=  null)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames  ==  null  ||  name!=  null)  {	  if(providedNames    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
175	[BUG]  [BUGGY]  if(providedNames  ==  null  ||  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames  ==  null  ||  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames  ==  null  ||  name.length()  ==  0)  {	  if(providedNames    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
176	[BUG]  [BUGGY]  if(providedNames  ==  null  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames  ==  null  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames  ==  null  ||  parent.getType()  ==  Token.NAME)  {	  if(providedNames    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
177	[BUG]  [BUGGY]  Name  name  =  node.getFirstChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  node.getFirstChild().getQualifiedName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  node.getFirstChild().getQualifiedName();	  Name    name    =    n.getFirstChild().getQualifiedName()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
178	[BUG]  [BUGGY]  if(name!=  null  &&  providedNames.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  providedNames.size()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  providedNames.size()  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
179	[BUG]  [BUGGY]  if(providedNames!=  null  &&  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  name.length()  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
180	[BUG]  [BUGGY]  if(name!=  null  &&  providedNames.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  providedNames.length  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  providedNames.length  ==  0)  {	  if(providedNames!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
181	[BUG]  [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.isQualifiedName()  &&  parent.getType()  ==  Token.NAME)  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
182	[BUG]  [BUGGY]  if(parent!=  null  &&  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.length()  ==  0)  {	  if(name!=    null    ||    name.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
183	[BUG]  [BUGGY]  if(parent!=  null  &&  name.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  name.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  name.length()  >  0)  {	  if(name!=    null    ||    name.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
184	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  name.length()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  name.length()  >  0)  {	  if(name!=    null    &&    parent.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
185	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.NAME  ||  name.equals(parent.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.NAME  ||  name.equals(parent.getString()))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getType()  ==  Token.NAME  ||  name.equals(parent.getString()))  {	  if(name!=    null    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
186	[BUG]  [BUGGY]  if(providedNames!=  null  &&  name.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  name.isQualifiedName())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  name.isQualifiedName())  {	  if(name    ==    null    &&    name.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
187	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.hasChildren()  ||  name.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(parent!=  null  &&  parent.hasChildren()  ||  name.length()  ==  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(parent!=  null  &&  parent.hasChildren()  ||  name.length()  ==  0)  {	  if(parent!=    null    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
188	[BUG]  [BUGGY]  Name  pn  =(name!=  null)?  super.providedNames.get(name):  NON_GLOBAL_NAME;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name!=  null)?  super.providedNames.get(name):  NON_GLOBAL_NAME;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name!=  null)?  super.providedNames.get(name):  NON_GLOBAL_NAME;	  Name    pn    =    super.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
189	[BUG]  [BUGGY]  Name  pn  =(name!=  null)?  super.providedNames.get(name):  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =(name!=  null)?  super.providedNames.get(name):  null;  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =(name!=  null)?  super.providedNames.get(name):  null;	  Name    pn    =    super.providedNames.get(name);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
190	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.isFirstChild())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  parent.isFirstChild())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.isFirstChild())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
191	[BUG]  [BUGGY]  if(providedNames!=  null  &&  parent.isContainer())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(providedNames!=  null  &&  parent.isContainer())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(providedNames!=  null  &&  parent.isContainer())  {	  if(providedNames!=    null    &&    parent.isExprResult())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
192	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getQualifiedName(n.getLastChild());  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getQualifiedName(n.getLastChild());	  Name    name    =    n.getFirstChild().getQualifiedName(parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
193	[BUG]  [BUGGY]  Name  pn  =  providedNames.get(name,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  pn  =  providedNames.get(name,  n);  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  pn  =  providedNames.get(name,  n);	  Name    pn    =    providedNames.get(name,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
194	[BUG]  [BUGGY]  if(name  ==  null  ||  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name  ==  null  ||  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name  ==  null  ||  name.getType()  ==  Token.NAME  ||  name.getString().equals( "prototype "))  {	  if(name!=    null    &&    name.getType()    ==    Token.NAME    ||    name.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
195	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  n.getFirstChild().getString();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  n.getFirstChild().getString();	  Name    name    =    n.getFirstChild().getName();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
196	[BUG]  [BUGGY]  t  =  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t  =  n.removeLastChild();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t  =  n.removeLastChild();	  t    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
197	[BUG]  [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.isQualifiedName()  &&  parent.hasChildren())  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.isQualifiedName()  &&  parent.hasChildren())  {	  if(name!=    null    &&    name.isQualifiedName()    &&    parent.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(NodeUtil.isExpressionNode(parent))  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(NodeUtil.isExpressionNode(parent))  {	  if(pn!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
199	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(parent)&&  name!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(NodeUtil.isAssignmentOp(parent)&&  name!=  null)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(NodeUtil.isAssignmentOp(parent)&&  name!=  null)  {	  if(pn!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
200	[BUG]  [BUGGY]  if(name!=  null  &&  names.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  names.size()  >  0)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  names.size()  >  0)  {	  if(name!=    null    &&    names.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
201	[BUG]  [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  if(name!=  null  &&  parent.getType()  ==  Token.ASSIGN)  {  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	if(name!=  null  &&  parent.getType()  ==  Token.ASSIGN)  {	  if(name!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
202	[BUG]  [BUGGY]  Name  name  =  node.getLastChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  Name  name  =  node.getLastChild().getQualifiedName();  [BUGGY]      if  (name  !=  null)  {  if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	Name  name  =  node.getLastChild().getQualifiedName();	  Name    name    =    parent.getLastChild().getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
203	[BUG]  [BUGGY]  t.getComment().addChildToFront(name);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  t.getComment().addChildToFront(name);  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	t.getComment().addChildToFront(name);	  t.getComment().addChildToBack(name);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
204	[BUG]  [BUGGY]  name  =  parent.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (n.isAssign()  &&  parent.isExprResult())  {  name  =  n.getFirstChild().getQualifiedName();  }      [BUGGY]  name  =  parent.getFirstChild().getString();  [BUGGY]      if  (parent.getBooleanProp(Node.IS_NAMESPACE))  {  processProvideFromPreviousPass(t,  name,  parent);  }  else  {  ProvidedName  pn  =  providedNames.get(name);  if  (pn  !=  null)  {  [CLASS]  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	name  =  parent.getFirstChild().getString();	  name    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
