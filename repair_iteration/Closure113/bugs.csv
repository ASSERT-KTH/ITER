bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
69	[BUG] [BUGGY] maybeAddStringNodeToSymbolTable(arg); [FE] AssertionFailedError [CONTEXT] module != providedModule && !moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); [BUGGY] maybeAddStringNodeToSymbolTable(arg); [BUGGY]       if (provided != null) { parent.detachFromParent(); compiler.reportCodeChange(); } [CLASS] ProcessClosurePrimitives 1 ProvidedName UnrecognizedRequire [METHOD] processRequireCall [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Set exportedVariables NodeTraversal t CheckLevel requiresLevel ProvidedName provided Node arg candidateDefinition explicitNode externs firstNode left n name node originalRoot parent replacement replacementNode requireNode root scriptRoot value PreprocessorSymbolTable preprocessorSymbolTable String GOOG inputName methodName name namespace ns typeDecl JSModuleGraph moduleGraph AbstractCompiler compiler boolean DiagnosticType BASE_CLASS_ERROR DUPLICATE_NAMESPACE_ERROR EXPECTED_OBJECTLIT_ERROR EXPECTED_STRING_ERROR FUNCTION_NAMESPACE_ERROR INVALID_ARGUMENT_ERROR INVALID_CSS_RENAMING_MAP INVALID_DEFINE_NAME_ERROR INVALID_PROVIDE_ERROR INVALID_STYLE_ERROR LATE_PROVIDE_ERROR MISSING_DEFINE_ANNOTATION MISSING_PROVIDE_ERROR NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR NULL_ARGUMENT_ERROR TOO_MANY_ARGUMENTS_ERROR XMODULE_REQUIRE_ERROR error JSModule explicitModule firstModule minimumModule module providedModule List defineCalls typeDecls unrecognizedRequires Map providedNames  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	322	322	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] module != providedModule && !moduleGraph.dependsOn(module, providedModule)) { compiler.report( t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName())); } } maybeAddToSymbolTable(left); [BUGGY] [BUGGY] maybeAddStringNodeToSymbolTable(arg);      if (provided != null) { parent.detachFromParent(); compiler.reportCodeChange(); } [CLASS] ProcessClosurePrimitives 1 ProvidedName UnrecognizedRequire [METHOD] processRequireCall [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Set exportedVariables NodeTraversal t CheckLevel requiresLevel ProvidedName provided Node arg candidateDefinition explicitNode externs firstNode left n name node originalRoot parent replacement replacementNode requireNode root scriptRoot value PreprocessorSymbolTable preprocessorSymbolTable String GOOG inputName methodName name namespace ns typeDecl JSModuleGraph moduleGraph AbstractCompiler compiler boolean DiagnosticType BASE_CLASS_ERROR DUPLICATE_NAMESPACE_ERROR EXPECTED_OBJECTLIT_ERROR EXPECTED_STRING_ERROR FUNCTION_NAMESPACE_ERROR INVALID_ARGUMENT_ERROR INVALID_CSS_RENAMING_MAP INVALID_DEFINE_NAME_ERROR INVALID_PROVIDE_ERROR INVALID_STYLE_ERROR LATE_PROVIDE_ERROR MISSING_DEFINE_ANNOTATION MISSING_PROVIDE_ERROR NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR NULL_ARGUMENT_ERROR TOO_MANY_ARGUMENTS_ERROR XMODULE_REQUIRE_ERROR error JSModule explicitModule firstModule minimumModule module providedModule List defineCalls typeDecls unrecognizedRequires Map providedNames  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	322	322	1	add	
71	[BUG] [BUGGY] if (provided != null) { [FE] AssertionFailedError [CONTEXT] } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);      [BUGGY] if (provided != null) { [BUGGY] parent.detachFromParent(); compiler.reportCodeChange(); } } } [CLASS] ProcessClosurePrimitives 1 ProvidedName UnrecognizedRequire [METHOD] processRequireCall [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Set exportedVariables NodeTraversal t CheckLevel requiresLevel ProvidedName provided Node arg candidateDefinition explicitNode externs firstNode left n name node originalRoot parent replacement replacementNode requireNode root scriptRoot value PreprocessorSymbolTable preprocessorSymbolTable String GOOG inputName methodName name namespace ns typeDecl JSModuleGraph moduleGraph AbstractCompiler compiler boolean DiagnosticType BASE_CLASS_ERROR DUPLICATE_NAMESPACE_ERROR EXPECTED_OBJECTLIT_ERROR EXPECTED_STRING_ERROR FUNCTION_NAMESPACE_ERROR INVALID_ARGUMENT_ERROR INVALID_CSS_RENAMING_MAP INVALID_DEFINE_NAME_ERROR INVALID_PROVIDE_ERROR INVALID_STYLE_ERROR LATE_PROVIDE_ERROR MISSING_DEFINE_ANNOTATION MISSING_PROVIDE_ERROR NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR NULL_ARGUMENT_ERROR TOO_MANY_ARGUMENTS_ERROR XMODULE_REQUIRE_ERROR error JSModule explicitModule firstModule minimumModule module providedModule List defineCalls typeDecls unrecognizedRequires Map providedNames  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	329	329	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } maybeAddToSymbolTable(left); maybeAddStringNodeToSymbolTable(arg);      [BUGGY] [BUGGY] if (provided != null) { parent.detachFromParent(); compiler.reportCodeChange(); } } } [CLASS] ProcessClosurePrimitives 1 ProvidedName UnrecognizedRequire [METHOD] processRequireCall [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Set exportedVariables NodeTraversal t CheckLevel requiresLevel ProvidedName provided Node arg candidateDefinition explicitNode externs firstNode left n name node originalRoot parent replacement replacementNode requireNode root scriptRoot value PreprocessorSymbolTable preprocessorSymbolTable String GOOG inputName methodName name namespace ns typeDecl JSModuleGraph moduleGraph AbstractCompiler compiler boolean DiagnosticType BASE_CLASS_ERROR DUPLICATE_NAMESPACE_ERROR EXPECTED_OBJECTLIT_ERROR EXPECTED_STRING_ERROR FUNCTION_NAMESPACE_ERROR INVALID_ARGUMENT_ERROR INVALID_CSS_RENAMING_MAP INVALID_DEFINE_NAME_ERROR INVALID_PROVIDE_ERROR INVALID_STYLE_ERROR LATE_PROVIDE_ERROR MISSING_DEFINE_ANNOTATION MISSING_PROVIDE_ERROR NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR NULL_ARGUMENT_ERROR TOO_MANY_ARGUMENTS_ERROR XMODULE_REQUIRE_ERROR error JSModule explicitModule firstModule minimumModule module providedModule List defineCalls typeDecls unrecognizedRequires Map providedNames  	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	329	329	1	add	
73	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (provided != null) { parent.detachFromParent(); compiler.reportCodeChange(); } } [BUGGY] } [BUGGY]     private void processProvideCall(NodeTraversal t, Node n, Node parent) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	334	334	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (provided != null) { parent.detachFromParent(); compiler.reportCodeChange(); } } [BUGGY] [BUGGY] }    private void processProvideCall(NodeTraversal t, Node n, Node parent) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	334	334	1	add	
75	[BUG] [BUGGY] JSDocInfo info = n.getFirstChild().getJSDocInfo(); [FE] AssertionFailedError [CONTEXT]    private void handleTypedefDefinition( NodeTraversal t, Node n) { [BUGGY] JSDocInfo info = n.getFirstChild().getJSDocInfo(); [BUGGY] if (t.inGlobalScope() && info != null && info.hasTypedefType()) { String name = n.getFirstChild().getQualifiedName(); if (name != null) { ProvidedName pn = providedNames.get(name); if (pn != null) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	388	388	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private void handleTypedefDefinition( NodeTraversal t, Node n) { [BUGGY] [BUGGY] JSDocInfo info = n.getFirstChild().getJSDocInfo(); if (t.inGlobalScope() && info != null && info.hasTypedefType()) { String name = n.getFirstChild().getQualifiedName(); if (name != null) { ProvidedName pn = providedNames.get(name); if (pn != null) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	388	388	1	add	
77	[BUG] [BUGGY] if (t.inGlobalScope() && info != null && info.hasTypedefType()) { [FE] AssertionFailedError [CONTEXT]   private void handleTypedefDefinition( NodeTraversal t, Node n) { JSDocInfo info = n.getFirstChild().getJSDocInfo(); [BUGGY] if (t.inGlobalScope() && info != null && info.hasTypedefType()) { [BUGGY] String name = n.getFirstChild().getQualifiedName(); if (name != null) { ProvidedName pn = providedNames.get(name); if (pn != null) { pn.addDefinition(n, t.getModule()); [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	389	389	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   private void handleTypedefDefinition( NodeTraversal t, Node n) { JSDocInfo info = n.getFirstChild().getJSDocInfo(); [BUGGY] [BUGGY] if (t.inGlobalScope() && info != null && info.hasTypedefType()) { String name = n.getFirstChild().getQualifiedName(); if (name != null) { ProvidedName pn = providedNames.get(name); if (pn != null) { pn.addDefinition(n, t.getModule()); [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	389	389	1	add	
79	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (pn != null) { pn.addDefinition(n, t.getModule()); } } } [BUGGY] } [BUGGY]     private void handleCandidateProvideDefinition( [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	398	398	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (pn != null) { pn.addDefinition(n, t.getModule()); } } } [BUGGY] [BUGGY] }    private void handleCandidateProvideDefinition( [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	398	398	1	add	
81	[BUG] [BUGGY] if (t.inGlobalScope()) { [FE] AssertionFailedError [CONTEXT]    private void handleCandidateProvideDefinition( NodeTraversal t, Node n, Node parent) { [BUGGY] if (t.inGlobalScope()) { [BUGGY] String name = null; if (n.isName() && parent.isVar()) { name = n.getString(); } else if (n.isAssign() && parent.isExprResult()) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	405	405	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private void handleCandidateProvideDefinition( NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] if (t.inGlobalScope()) { String name = null; if (n.isName() && parent.isVar()) { name = n.getString(); } else if (n.isAssign() && parent.isExprResult()) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	405	405	1	add	
83	[BUG] [BUGGY] String name = null; [FE] AssertionFailedError [CONTEXT]   private void handleCandidateProvideDefinition( NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { [BUGGY] String name = null; [BUGGY] if (n.isName() && parent.isVar()) { name = n.getString(); } else if (n.isAssign() && parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	406	406	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   private void handleCandidateProvideDefinition( NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { [BUGGY] [BUGGY] String name = null; if (n.isName() && parent.isVar()) { name = n.getString(); } else if (n.isAssign() && parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	406	406	1	add	
85	[BUG] [BUGGY] if (n.isName() && parent.isVar()) { [FE] AssertionFailedError [CONTEXT]  private void handleCandidateProvideDefinition( NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { String name = null; [BUGGY] if (n.isName() && parent.isVar()) { [BUGGY] name = n.getString(); } else if (n.isAssign() && parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	407	407	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  private void handleCandidateProvideDefinition( NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { String name = null; [BUGGY] [BUGGY] if (n.isName() && parent.isVar()) { name = n.getString(); } else if (n.isAssign() && parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	407	407	1	add	
87	[BUG] [BUGGY] } else if (n.isAssign() && parent.isExprResult()) { [FE] AssertionFailedError [CONTEXT] NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { String name = null; if (n.isName() && parent.isVar()) { name = n.getString(); [BUGGY] } else if (n.isAssign() &&   parent.isExprResult()) { [BUGGY] parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); } if (name != null) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	409	410	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] NodeTraversal t, Node n, Node parent) { if (t.inGlobalScope()) { String name = null; if (n.isName() && parent.isVar()) { name = n.getString(); [BUGGY] [BUGGY] } else if (n.isAssign() &&   parent.isExprResult()) { parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); } if (name != null) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	409	410	1	add	
89	[BUG] [BUGGY] if (name != null) { [FE] AssertionFailedError [CONTEXT] } else if (n.isAssign() && parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); } [BUGGY] if (name != null) { [BUGGY] if (parent.getBooleanProp(Node.IS_NAMESPACE)) { processProvideFromPreviousPass(t, name, parent); } else { ProvidedName pn = providedNames.get(name); if (pn != null) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (n.isAssign() && parent.isExprResult()) { name = n.getFirstChild().getQualifiedName(); } [BUGGY] [BUGGY] if (name != null) { if (parent.getBooleanProp(Node.IS_NAMESPACE)) { processProvideFromPreviousPass(t, name, parent); } else { ProvidedName pn = providedNames.get(name); if (pn != null) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	414	414	1	add	
91	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] pn.addDefinition(parent, t.getModule()); } } } } [BUGGY] } [BUGGY]     private void processBaseClassCall(NodeTraversal t, Node n) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] pn.addDefinition(parent, t.getModule()); } } } } [BUGGY] [BUGGY] }    private void processBaseClassCall(NodeTraversal t, Node n) { [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	425	425	1	add	
93	[BUG] [BUGGY] return verifyNotNull(t, methodName, arg) && verifyOfType(t, methodName, arg, Token.STRING) && verifyIsLast(t, methodName, arg); [FE] AssertionFailedError [CONTEXT]    private boolean verifyLastArgumentIsString( NodeTraversal t, Node methodName, Node arg) { [BUGGY] return verifyNotNull(t, methodName, arg) &&  verifyOfType(t, methodName, arg, Token.STRING) &&    verifyIsLast(t, methodName, arg); [BUGGY] verifyOfType(t, methodName, arg, Token.STRING) && verifyIsLast(t, methodName, arg); }   [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	770	772	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private boolean verifyLastArgumentIsString( NodeTraversal t, Node methodName, Node arg) { [BUGGY] [BUGGY] return verifyNotNull(t, methodName, arg) &&  verifyOfType(t, methodName, arg, Token.STRING) &&    verifyIsLast(t, methodName, arg); verifyOfType(t, methodName, arg, Token.STRING) && verifyIsLast(t, methodName, arg); }   [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	770	772	1	add	
95	[BUG] [BUGGY] if (arg == null) { [FE] AssertionFailedError [CONTEXT]    private boolean verifyNotNull(NodeTraversal t, Node methodName, Node arg) { [BUGGY] if (arg == null) { [BUGGY] compiler.report( t.makeError(methodName, NULL_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	779	779	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private boolean verifyNotNull(NodeTraversal t, Node methodName, Node arg) { [BUGGY] [BUGGY] if (arg == null) { compiler.report( t.makeError(methodName, NULL_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	779	779	1	add	
97	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(methodName, NULL_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [BUGGY] return true; [BUGGY] }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	785	785	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(methodName, NULL_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [BUGGY] [BUGGY] return true; }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	785	785	1	add	
99	[BUG] [BUGGY] if (arg.getType() != desiredType) { [FE] AssertionFailedError [CONTEXT]    private boolean verifyOfType(NodeTraversal t, Node methodName, Node arg, int desiredType) { [BUGGY] if (arg.getType() != desiredType) { [BUGGY] compiler.report( t.makeError(methodName, INVALID_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private boolean verifyOfType(NodeTraversal t, Node methodName, Node arg, int desiredType) { [BUGGY] [BUGGY] if (arg.getType() != desiredType) { compiler.report( t.makeError(methodName, INVALID_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	793	793	1	add	
101	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(methodName, INVALID_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [BUGGY] return true; [BUGGY] }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	799	799	1	replace	
102	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(methodName, INVALID_ARGUMENT_ERROR, methodName.getQualifiedName())); return false; } [BUGGY] [BUGGY] return true; }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	799	799	1	add	
103	[BUG] [BUGGY] if (arg.getNext() != null) { [FE] AssertionFailedError [CONTEXT]    private boolean verifyIsLast(NodeTraversal t, Node methodName, Node arg) { [BUGGY] if (arg.getNext() != null) { [BUGGY] compiler.report( t.makeError(methodName, TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName())); return false; } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	806	806	1	replace	
104	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private boolean verifyIsLast(NodeTraversal t, Node methodName, Node arg) { [BUGGY] [BUGGY] if (arg.getNext() != null) { compiler.report( t.makeError(methodName, TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName())); return false; } [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	806	806	1	add	
105	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(methodName, TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName())); return false; } [BUGGY] return true; [BUGGY] }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	812	812	1	replace	
106	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(methodName, TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName())); return false; } [BUGGY] [BUGGY] return true; }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	812	812	1	add	
107	[BUG] [BUGGY] if (preprocessorSymbolTable == null) { [FE] AssertionFailedError [CONTEXT]     private void maybeAddStringNodeToSymbolTable(Node n) { [BUGGY] if (preprocessorSymbolTable == null) { [BUGGY] return; } String name = n.getString(); Node syntheticRef = NodeUtil.newQualifiedNameNode( [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1172	1172	1	replace	
108	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]     private void maybeAddStringNodeToSymbolTable(Node n) { [BUGGY] [BUGGY] if (preprocessorSymbolTable == null) { return; } String name = n.getString(); Node syntheticRef = NodeUtil.newQualifiedNameNode( [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1172	1172	1	add	
109	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT]    private void maybeAddStringNodeToSymbolTable(Node n) { if (preprocessorSymbolTable == null) { [BUGGY] return; [BUGGY] } String name = n.getString(); Node syntheticRef = NodeUtil.newQualifiedNameNode( compiler.getCodingConvention(), name, [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	replace	
110	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private void maybeAddStringNodeToSymbolTable(Node n) { if (preprocessorSymbolTable == null) { [BUGGY] [BUGGY] return; } String name = n.getString(); Node syntheticRef = NodeUtil.newQualifiedNameNode( compiler.getCodingConvention(), name, [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1173	1173	1	add	
111	[BUG] [BUGGY] if (preprocessorSymbolTable != null) { [FE] AssertionFailedError [CONTEXT]    private void maybeAddToSymbolTable(Node n) { [BUGGY] if (preprocessorSymbolTable != null) { [BUGGY] preprocessorSymbolTable.addReference(n); } }   [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1212	1212	1	replace	
112	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    private void maybeAddToSymbolTable(Node n) { [BUGGY] [BUGGY] if (preprocessorSymbolTable != null) { preprocessorSymbolTable.addReference(n); } }   [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1212	1212	1	add	
113	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT]  private void maybeAddToSymbolTable(Node n) { if (preprocessorSymbolTable != null) { preprocessorSymbolTable.addReference(n); } [BUGGY] } [BUGGY]      [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1215	1215	1	replace	
114	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  private void maybeAddToSymbolTable(Node n) { if (preprocessorSymbolTable != null) { preprocessorSymbolTable.addReference(n); } [BUGGY] [BUGGY] }     [CLASS] 	projects/Closure113/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	1.0	1215	1215	1	add	
