bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  double  stepSize  =  dt.doubleValue()  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	double  stepSize  =  dt.doubleValue()  +  1;	      double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  *  k;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  double  stepSize  =  dt.doubleValue()  *  k;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	double  stepSize  =  dt.doubleValue()  *  k;	      double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  double  stepSize  =  dt.doubleValue()  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  double  stepSize  =  dt.doubleValue()  +  2;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	double  stepSize  =  dt.doubleValue()  +  2;	      double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  final  double  stepSize  =  dt.getEventTime();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  dt.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  dt.getEventTime();	      final    double    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getEventTime();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interface.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interface.getEventTime();	      final    double    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  manager.getEventTime();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  manager.getEventTime();	      final    double    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  final  double  stepSize  =  handler.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  handler.getEventTime()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  handler.getEventTime()  -  1;	      final    double    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  final  double  stepSize  =  dt.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  dt.doubleValue()  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  dt.doubleValue()  +  1;	      final    double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  final  double  stepSize  =  dt.doubleValue()  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  dt.doubleValue()  +  2;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  dt.doubleValue()  +  2;	      final    double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  final  double  stepSize  =  dt.doubleValue()  *  k;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  dt.doubleValue()  *  k;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  dt.doubleValue()  *  k;	      final    double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  int  stepSize  =  dt.getStepSize();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getStepSize();	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
12	[BUG]  [BUGGY]  int  stepSize  =  interpolator.getStepSize();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  interpolator.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  interpolator.getStepSize();	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  int  stepSize  =  interface.getStepSize();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  interface.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  interface.getStepSize();	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  int  stepSize  =  prototype.getStepSize();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  prototype.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  prototype.getStepSize();	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  final  double  stepSize  =  interpolator.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interpolator.getEventTime()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interpolator.getEventTime()  -  stepStart;	      final    double    stepSize    =    handler.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  final  double  stepSize  =  manager.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  manager.getEventTime()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  manager.getEventTime()  -  stepStart;	      final    double    stepSize    =    handler.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interface.getEventTime()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interface.getEventTime()  -  stepStart;	      final    double    stepSize    =    handler.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  final  double  stepSize  =  handler.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  handler.getEventTime()  /  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  handler.getEventTime()  /  stepStart;	      final    double    stepSize    =    handler.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  int  stepSize  =  processStep(dt,  t0);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(dt,  t0);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(dt,  t0);	      int    stepSize    =    processStep(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  int  stepSize  =  processStep(dt,  t1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(dt,  t1);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(dt,  t1);	      int    stepSize    =    processStep(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  int  stepSize  =  processStep(rki,  dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(rki,  dt);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(rki,  dt);	      int    stepSize    =    processStep(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  dt,  k);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(t0,  dt,  k);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(t0,  dt,  k);	      int    stepSize    =    processStep(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  int  stepSize  =  dt.getStep()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getStep()  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getStep()  +  1;	      int    stepSize    =    dt.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
24	[BUG]  [BUGGY]  int  stepSize  =  dt.getStep(k);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getStep(k);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getStep(k);	      int    stepSize    =    dt.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
25	[BUG]  [BUGGY]  int  stepSize  =  dt.getMinimumStep();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getMinimumStep();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getMinimumStep();	      int    stepSize    =    dt.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  dt  =  manager.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  dt  =  manager.getEventTime()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	dt  =  manager.getEventTime()  -  1;	      dt    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  dt  =  manager.getEventTime()  -  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  dt  =  manager.getEventTime()  -  stepSize;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	dt  =  manager.getEventTime()  -  stepSize;	      dt    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  dt  =  manager.getEventTime()  +  stepSize;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  dt  =  manager.getEventTime()  +  stepSize;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	dt  =  manager.getEventTime()  +  stepSize;	      dt    =    manager.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
29	[BUG]  [BUGGY]  if(Math.abs(dt)>  Math.abs(stepSize))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)>  Math.abs(stepSize))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)>  Math.abs(stepSize))  {	  if(Math.abs(dt)    <    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(stepSize  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(stepSize  +  1))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(stepSize  +  1))  {	  if(Math.abs(dt)    <    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(str.length()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(str.length()))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(str.length()))  {	  if(Math.abs(dt)    <    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getStepSize()  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interface.getStepSize()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interface.getStepSize()  -  1;	      final    double    stepSize    =    interface.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getStepSize()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interface.getStepSize()  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interface.getStepSize()  +  1;	      final    double    stepSize    =    interface.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
34	[BUG]  [BUGGY]  final  double  stepSize  =  dt.getStepSize();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  dt.getStepSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  dt.getStepSize();	      final    double    stepSize    =    interface.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  int  stepSize  =  dt.intValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.intValue()  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.intValue()  +  1;	      int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  double  stepSize  =  dt.intValue();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  double  stepSize  =  dt.intValue();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	double  stepSize  =  dt.intValue();	      int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  int  stepSize  =  dt.intValue()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.intValue()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.intValue()  -  1;	      int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(dt))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(dt))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(dt))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(dt)||  stepSize  <  Math.abs(dt))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(dt)||  stepSize  <  Math.abs(dt))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(dt)||  stepSize  <  Math.abs(dt))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
40	[BUG]  [BUGGY]  dt  =  interpolator.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  dt  =  interpolator.getEventTime()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	dt  =  interpolator.getEventTime()  -  stepStart;	      dt    =    manager.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
41	[BUG]  [BUGGY]  dt  =  manager.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  dt  =  manager.getEventTime()  /  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	dt  =  manager.getEventTime()  /  stepStart;	      dt    =    manager.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  int  stepSize  =  processStep(dt,  yTmp,  t0);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(dt,  yTmp,  t0);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(dt,  yTmp,  t0);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
43	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  dt,  yTmp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(t0,  dt,  yTmp);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(t0,  dt,  yTmp);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
44	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  dt,  y);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(t0,  dt,  y);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(t0,  dt,  y);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
45	[BUG]  [BUGGY]  int  stepSize  =  processStep(dt,  yTmp,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(dt,  yTmp,  t);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(dt,  yTmp,  t);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
46	[BUG]  [BUGGY]  if  (Math.abs(dt)  <  =  Math.abs(dt  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if  (Math.abs(dt)  <  =  Math.abs(dt  +  1))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if  (Math.abs(dt)  <  =  Math.abs(dt  +  1))  {	  if    (Math.abs(dt)    <    =    Math.abs(dt))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  if  (Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt  +  stepSize)  <  Math.abs(dt))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if  (Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt  +  stepSize)  <  Math.abs(dt))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if  (Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt  +  stepSize)  <  Math.abs(dt))  {	  if    (Math.abs(dt)    <    =    Math.abs(dt))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  if  (Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt  +  stepSize)  <  =  Math.abs(dt))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if  (Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt  +  stepSize)  <  =  Math.abs(dt))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if  (Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt  +  stepSize)  <  =  Math.abs(dt))  {	  if    (Math.abs(dt)    <    =    Math.abs(dt))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  if  (Math.abs(dt)  <  Math.abs(dt  +  1))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if  (Math.abs(dt)  <  Math.abs(dt  +  1))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if  (Math.abs(dt)  <  Math.abs(dt  +  1))  {	  if    (Math.abs(dt)    <    =    Math.abs(dt))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  int  stepSize  =  dt.getStep(interpolator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getStep(interpolator);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getStep(interpolator);	      int    stepSize    =    dt.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  int  stepSize  =  dt.getRangeStep();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getRangeStep();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getRangeStep();	      int    stepSize    =    dt.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  int  stepSize  =  dt.doubleValue();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.doubleValue();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.doubleValue();	      int    stepSize    =    dt.intValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  handler.getStepSize()  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  handler.getStepSize()  +  1;	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  int  stepSize  =  handler.getStepSize()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  handler.getStepSize()  -  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  handler.getStepSize()  -  1;	      int    stepSize    =    handler.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  dt  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(t0,  dt  +  1);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(t0,  dt  +  1);	      int    stepSize    =    processStep(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
56	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getRangeSize();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interface.getRangeSize();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interface.getRangeSize();	      final    double    stepSize    =    interface.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
57	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(yTmp.length))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(yTmp.length))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(yTmp.length))  {	  if(Math.abs(dt)    <    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  y0,  dt);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(t0,  y0,  dt);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(t0,  y0,  dt);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  final  double  stepSize  =  handler.getStepSize()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  handler.getStepSize()  -  stepStart;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  handler.getStepSize()  -  stepStart;	      final    double    stepSize    =    handler.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
60	[BUG]  [BUGGY]  final  double  stepSize  =  handler.getStep();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  handler.getStep();  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  handler.getStep();	      final    double    stepSize    =    handler.getEventTime();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(stepSize)-  1)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(stepSize)-  1)  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(stepSize)-  1)  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt)  <  stepSize))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt)  <  stepSize))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(dt)||  Math.abs(dt)  <  stepSize))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(stepSize)||  Math.abs(dt)  <  Math.abs(stepSize))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(stepSize)||  Math.abs(dt)  <  Math.abs(stepSize))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(stepSize)||  Math.abs(dt)  <  Math.abs(stepSize))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  double  stepSize  =  processStep(t0,  yTmp,  dt);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  double  stepSize  =  processStep(t0,  yTmp,  dt);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	double  stepSize  =  processStep(t0,  yTmp,  dt);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
65	[BUG]  [BUGGY]  int  stepSize  =  processStep(t0,  nextStep,  dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  processStep(t0,  nextStep,  dt);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  processStep(t0,  nextStep,  dt);	      int    stepSize    =    processStep(t0,    yTmp,    dt);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
66	[BUG]  [BUGGY]  final  double  stepSize  =  handler.getEventTime()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  handler.getEventTime()  -  stepStart  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  handler.getEventTime()  -  stepStart  +  1;	      final    double    stepSize    =    handler.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  int  stepSize  =  dt.getStep(step);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  int  stepSize  =  dt.getStep(step);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	int  stepSize  =  dt.getStep(step);	      int    stepSize    =    dt.getStep();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  double  stepSize  =  processStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  double  stepSize  =  processStep(t0,  dt);  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	double  stepSize  =  processStep(t0,  dt);	      int    stepSize    =    processStep(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  final  double  stepSize  =  dt.doubleValue()  *  2;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  dt.doubleValue()  *  2;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  dt.doubleValue()  *  2;	      final    double    stepSize    =    dt.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
70	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(yTmp))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  =  Math.abs(yTmp))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  if(Math.abs(dt)  <  Math.abs(yTmp))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  Math.abs(yTmp))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  Math.abs(yTmp))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(stepSize  +  1))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(stepSize  +  1))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  =  Math.abs(stepSize  +  1))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
73	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt)/  2  +  stepSize))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt)/  2  +  stepSize))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  =  Math.abs(dt)/  2  +  stepSize))  {	  if(Math.abs(dt)    <    =    Math.abs(stepSize))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
74	[BUG]  [BUGGY]  dt  =  manager.getEventTime()  -  stepStart  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  dt  =  manager.getEventTime()  -  stepStart  +  1;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	dt  =  manager.getEventTime()  -  stepStart  +  1;	      dt    =    manager.getEventTime()    -    stepStart;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  final  double  stepSize  =  interface.getStepSize()  /  2;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  final  double  stepSize  =  interface.getStepSize()  /  2;  [BUGGY]    if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	final  double  stepSize  =  interface.getStepSize()  /  2;	      final    double    stepSize    =    interface.getStepSize();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
76	[BUG]  [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt  +  stepSize))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;    [BUGGY]  if(Math.abs(dt)  <  =  Math.abs(dt  +  stepSize))  {  [BUGGY]          loop  =  false;  }  else  {  stepSize  =  dt;  }  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	174	174	2	replace	if(Math.abs(dt)  <  =  Math.abs(dt  +  stepSize))  {	  if    (Math.abs(dt)    <    =    Math.abs(dt))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
