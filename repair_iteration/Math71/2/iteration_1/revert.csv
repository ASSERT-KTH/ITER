projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.min(hNew,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=dt;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt)-stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=false;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=true;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(rki,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(rki,dt);loop=true;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(rki,t0,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop="";
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=null;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=loopedStepInterpolator.evaluateStep(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=loopedStepInterpolator.evaluateStep(interpolator,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=loopedStepInterpolator.evaluateStep(manager,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.floor(hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=hNew;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=dt;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=Math.max(dt,hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=Math.abs(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(dt,rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(rki,dt,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(t0,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(y0,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(t0,hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(dt,t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(loop);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(loopedStepInterpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(loopedStep);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaces.evaluateStep(loopedStepInterpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt)/stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt)-1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt)-2;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);hNew=Math.abs(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);inthNew=Math.abs(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);doublehNew=Math.abs(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);dt=Math.abs(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);hNew=Math.abs(dt));
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(dt,loopedStepInterpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(t0,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(dt,l);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(manager,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=manager.evaluateStep(loop,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaces.evaluateStep(manager,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(dt,hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,dt+stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,dt+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300Looperl=newLooper(hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300Looperl=newLooper();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(dt,rki);loop=true;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(t0,dt);loop=false;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.min(hNew,dt+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.min(hNew,dt+stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=Math.min(hNew,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=Math.abs(dt)+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=Math.max(l,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.floor(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.ceil(hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt+stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=dt+stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(dt,t0,rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(rki,dt,t0);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(y0,t0,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(t0,dt,rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaces.evaluateStep(dt,loopedStepInterpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interpolator.evaluateStep(dt,a);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaces.evaluateStep(loop);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaceInterpolator.evaluateStep(loop);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.min(hNew,dt-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);inthNew=Math.min(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt);hNew=Math.min(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt)-error;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(t0,dt);loop=true;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(y0,dt);loop=true;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=dt+1;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=newCombinedEquationsManager(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=newCombinedEquationsManager(interpolator,hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=newCombinedEquationsManager(interpolator.getEventTime(),dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=newCombinedEquationsManager(interpolator.getEventTime(),hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300Loopt=interfaces.get(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300Loopt=loop.step();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300Loopt=interfaces.get(rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,t0+stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.floor(hNew+stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.floor(hNew+1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,dt-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=newCombinedEquationsManager(t0,y0,dt,hNew);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.abs(dt-stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=handler.evaluateStep(manager,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,dt-stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.min(hNew,dt)-stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.max(hNew,dt)-stepSize;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=newDouble(dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300hNew=Math.min(hNew,dt-stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300loop=t0;
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LoophNew=newLoop(t0,t0,y,t+stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LoophNew=newLoop(t0,dt,stepSize);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=(Looper)super.evaluate(rt,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaces.evaluateStep(interpolator);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interface.evaluateStep(loop);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=interfaces.evaluateStep(dt,dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java300LooperhNew=loopedStepInterpolator.evaluateStep(interpolator,dt,stepSize);
