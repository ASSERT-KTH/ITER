bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Loop  t  =  interpolator.step();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interpolator.step();  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interpolator.step();	  Loop    t    =    loop.step();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
2	[BUG]  [BUGGY]  Loop  t  =  loop.step(dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  loop.step(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  loop.step(dt);	  Loop    t    =    loop.step();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
3	[BUG]  [BUGGY]  Loop  t  =  loop.step(hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  loop.step(hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  loop.step(hNew);	  Loop    t    =    loop.step();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
4	[BUG]  [BUGGY]  Looper  hNew  =  interfaceInterpolator.evaluateStep(dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaceInterpolator.evaluateStep(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaceInterpolator.evaluateStep(dt);	  Looper    hNew    =    interfaceInterpolator.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
5	[BUG]  [BUGGY]  Looper  hNew  =  interfaceInterpolator.evaluateStep(dt,  loop);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaceInterpolator.evaluateStep(dt,  loop);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaceInterpolator.evaluateStep(dt,  loop);	  Looper    hNew    =    interfaceInterpolator.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
6	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(loop);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(loop);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(loop);	  Looper    hNew    =    interfaceInterpolator.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
7	[BUG]  [BUGGY]  Looper  l  =  new  Looper(dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(dt);	  Looper    l    =    new    Looper();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
8	[BUG]  [BUGGY]  Looper  l  =  new  Looper(t0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(t0);	  Looper    l    =    new    Looper();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
9	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  rt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  rt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  rt);	  Looper    hNew    =(Looper)super.evaluate(rt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
10	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(rt,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(rt,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(rt,  dt,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(rt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
11	[BUG]  [BUGGY]  Looper  hNew  =(Looper)manager.evaluate(rt,  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)manager.evaluate(rt,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)manager.evaluate(rt,  dt);	  Looper    hNew    =(Looper)super.evaluate(rt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
12	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt);	  Looper    hNew    =    interfaces.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
13	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  loop);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  loop);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  loop);	  Looper    hNew    =    interfaces.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
14	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(t0,  dt);	  Looper    hNew    =    interfaces.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
15	[BUG]  [BUGGY]  Looper  hNew  =  loop.evaluateStep(dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  loop.evaluateStep(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  loop.evaluateStep(dt);	  Looper    hNew    =    interfaces.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
16	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  stepSize);	  Looper    hNew    =    interpolator.evaluateStep(dt,    a);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
17	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t,  a);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t,  a);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t,  a);	  Looper    hNew    =    interpolator.evaluateStep(dt,    a);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
18	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(a,  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(a,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(a,  dt);	  Looper    hNew    =    interpolator.evaluateStep(dt,    a);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
19	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  a);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  a);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0,  a);	  Looper    hNew    =    interpolator.evaluateStep(dt,    a);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
20	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  +  1,  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  +  1,  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  +  1,  stepSize);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
21	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  +  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  +  2);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  +  2);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
22	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  1,  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  -  1,  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  -  1,  stepSize);	  hNew    =    Math.min(hNew,    dt    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
23	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  -  2);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  -  2);	  hNew    =    Math.min(hNew,    dt    -    1);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
24	[BUG]  [BUGGY]  loop  =  Math.min(dt,  hNew);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(dt,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(dt,  hNew);	  loop    =    Math.min(hNew,    dt);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
25	[BUG]  [BUGGY]  loop  =  Math.min(len,  dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(len,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(len,  dt);	  loop    =    Math.min(hNew,    dt);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
26	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(hNew,  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(hNew,  dt  +  stepSize);	  loop    =    Math.min(hNew,    dt);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
27	[BUG]  [BUGGY]  hNew  =  Math.ceil(dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.ceil(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.ceil(dt);	  hNew    =    Math.floor(dt);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
28	[BUG]  [BUGGY]  hNew  =  Math.floor(dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(dt  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(dt  +  stepSize);	  hNew    =    Math.floor(dt);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
29	[BUG]  [BUGGY]  loop  =  Math.abs(hNew);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(hNew);	  loop    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  loop  =  Math.abs(dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt  +  stepSize);	  loop    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  loop  =  Math.abs(dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt  -  stepSize);	  loop    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  hNew  =  Math.abs(dt)/  error;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt)/  error;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt)/  error;	  hNew    =    Math.abs(dt)-    error;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
33	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  t0);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    loop    =    true;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
34	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0);  loop  =  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0);  loop  =  true;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  t0);  loop  =  true;	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    loop    =    true;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
35	[BUG]  [BUGGY]  hNew  =  Math.floor(dt  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(dt  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(dt  +  1);	  hNew    =    Math.floor(hNew    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
36	[BUG]  [BUGGY]  hNew  =  Math.ceil(hNew  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.ceil(hNew  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.ceil(hNew  +  1);	  hNew    =    Math.floor(hNew    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
37	[BUG]  [BUGGY]  hNew  =  Math.log(hNew  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.log(hNew  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.log(hNew  +  1);	  hNew    =    Math.floor(hNew    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
38	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(interpolator,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(interpolator,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(interpolator,  dt);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
39	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(handler,  dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(handler,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(handler,  dt);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
40	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(dt,  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(dt,  t);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(dt,  t);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
41	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(t0,  dt);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
42	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0,  y);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0,  y);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  t0,  y);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
43	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  y,  dt);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  y,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  y,  dt);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
44	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y0,  t0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y0,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  y0,  t0);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
45	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt,  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt,  t);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt,  t);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
46	[BUG]  [BUGGY]  dt  =  Math.abs(dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  dt  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	dt  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
47	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt);  dt  =  Math.abs(dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt);  dt  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt);  dt  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
48	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt);  dt  =  Math.abs(dt);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt);  dt  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt);  dt  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  	21	None	replace
49	[BUG]  [BUGGY]  hNew  =  Math.abs(dt);  dt  =  Math.abs(dt  +  stepSize);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt);  dt  =  Math.abs(dt  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt);  dt  =  Math.abs(dt  +  stepSize);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  	21	None	replace
50	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(a);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(a);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(a);	  Looper    hNew    =    interfaces.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
51	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(t0,  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(t0,  dt);	  hNew    =    Math.max(t0,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  t0);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  t0);	  hNew    =    Math.max(t0,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  t0  +  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  t0  +  dt);	  hNew    =    Math.max(hNew,    t0    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
54	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  t0  +  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  t0  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  t0  +  stepSize);	  hNew    =    Math.max(hNew,    t0    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
55	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  y0);	  Looper    hNew    =(Looper)super.evaluate(y0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt,  stepSize);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(y0,    dt);    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  dt);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  dt);	  Looper    hNew    =    interpolator.evaluateStep(loop);    	non-compiled	[CE]  ';'  expected	11	None	replace
58	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(dt);	  Looper    hNew    =    interpolator.evaluateStep(loop);    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  loop);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  loop);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  loop);	  Looper    hNew    =    interpolator.evaluateStep(loop);    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  hNew  =  Math.abs(dt)/  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt)/  2;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt)/  2;	  hNew    =    Math.abs(dt)/    stepSize;    	non-compiled	[CE]  ';'  expected	15	None	replace
61	[BUG]  [BUGGY]  hNew  =  Math.abs(dt)/  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt)/  1;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt)/  1;	  hNew    =    Math.abs(dt)/    stepSize;    	non-compiled	[CE]  ';'  expected	15	None	replace
62	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt)/  stepSize;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt)/  stepSize;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt)/  stepSize;	  hNew    =    Math.abs(dt)/    stepSize;    	non-compiled	[CE]  	15	None	replace
63	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt)/  stepSize;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt)/  stepSize;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt)/  stepSize;	  hNew    =    Math.abs(dt)/    stepSize;    	non-compiled	[CE]  ';'  expected	15	None	replace
64	[BUG]  [BUGGY]  hNew  =  Math.min(dt,  hNew);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(dt,  hNew);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(dt,  hNew);	          hNew    =    Math.abs(dt);    int    hNew    =    Math.min(dt);    	non-compiled	[CE]  ';'  expected	55	None	replace
65	[BUG]  [BUGGY]  hNew  =  Math.min(dt,  stepSize);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(dt,  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(dt,  stepSize);	          hNew    =    Math.abs(dt);    int    hNew    =    Math.min(dt);    	non-compiled	[CE]  ';'  expected	55	None	replace
66	[BUG]  [BUGGY]  Looper  l  =  new  Looper(hNew,  dt);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(hNew,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(hNew,  dt);	  Looper    l    =    new    Looper(hNew);    	non-compiled	[CE]  ';'  expected	33	None	replace
67	[BUG]  [BUGGY]  Looper  l  =  new  Looper(dt,  hNew);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(dt,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(dt,  hNew);	  Looper    l    =    new    Looper(hNew);    	non-compiled	[CE]  ';'  expected	33	None	replace
68	[BUG]  [BUGGY]  Looper  l  =  new  Looper(hNew,  t0);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(hNew,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(hNew,  t0);	  Looper    l    =    new    Looper(hNew);    	non-compiled	[CE]  ';'  expected	33	None	replace
69	[BUG]  [BUGGY]  loop  =  Math.abs(dt)-  t0;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt)-  t0;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt)-  t0;	  loop    =    t0;    	non-compiled	[CE]  ';'  expected	80	None	replace
70	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  t0);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(hNew,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(hNew,  t0);	  loop    =    t0;    	non-compiled	[CE]  ';'  expected	80	None	replace
71	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  y,  t  +  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  y,  t  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  dt,  y,  t  +  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
72	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  t,  t  +  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  t,  t  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  y0,  t,  t  +  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
73	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  t,  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  t,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  y0,  t,  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
74	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  t0,  y,  dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  t0,  y,  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  t0,  y,  dt  +  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
75	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  -  stepSize  +  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  -  stepSize  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  -  stepSize  +  1);	  hNew    =    Math.abs(dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
76	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  -  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  -  1);	  hNew    =    Math.abs(dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
77	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  -  stepStart);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  -  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  -  stepStart);	  hNew    =    Math.abs(dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
78	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  -  error);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  -  error);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  -  error);	  hNew    =    Math.abs(dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
79	[BUG]  [BUGGY]  loop  =  new  Double(hNew);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  Double(hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  Double(hNew);	  loop    =    new    Double(dt);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
80	[BUG]  [BUGGY]  loop  =  new  Double(dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  Double(dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  Double(dt  +  stepSize);	  loop    =    new    Double(dt);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
81	[BUG]  [BUGGY]  loop  =  new  Double(hNew,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  Double(hNew,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  Double(hNew,  dt);	  loop    =    new    Double(dt);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
82	[BUG]  [BUGGY]  loop  =  new  Double(dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  Double(dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  Double(dt  -  stepSize);	  loop    =    new    Double(dt);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
83	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt)-  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt)-  2;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt)-  2;	  hNew    =    Math.abs(dt)-    2;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
84	[BUG]  [BUGGY]  loop  =  Math.abs(dt)-  hNew;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt)-  hNew;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt)-  hNew;	  loop    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
85	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  dt));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(hNew,  dt));  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(hNew,  dt));	  loop    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
86	[BUG]  [BUGGY]  loop  =  Math.pow(10,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.pow(10,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.pow(10,  hNew);	  loop    =    hNew;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
87	[BUG]  [BUGGY]  double  hNew  =  Math.abs(dt);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  double  hNew  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	double  hNew  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    double    hNew    =    Math.abs(dt);    	non-compiled	[CE]  	20	None	replace
88	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  rki,  stepSize);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  rki,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  rki,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    stepSize);    	non-compiled	[CE]  	6	None	replace
89	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  dt,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(rki,  stepStart,  stepSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(rki,  stepStart,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(rki,  stepStart,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
91	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  t);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  t);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  t);	  Looper    hNew    =    interpolator.evaluateStep(manager,    dt);    	non-compiled	[CE]  	27	None	replace
92	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  rki);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  rki);	  Looper    hNew    =    interpolator.evaluateStep(manager,    dt);    	non-compiled	[CE]  	27	None	replace
93	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  y);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  y);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  y);	  Looper    hNew    =    interpolator.evaluateStep(manager,    dt);    	non-compiled	[CE]  	27	None	replace
94	[BUG]  [BUGGY]  loop  =  Math.max(l,  hNew);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(l,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(l,  hNew);	  loop    =    Math.max(dt,    hNew);    	non-compiled	[CE]  	3	None	replace
95	[BUG]  [BUGGY]  loop  =  Math.max(dt,  hSize);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(dt,  hSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(dt,  hSize);	  loop    =    Math.max(dt,    hNew);    	non-compiled	[CE]  	3	None	replace
96	[BUG]  [BUGGY]  loop  =  Math.min(l,  hNew);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(l,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(l,  hNew);	  loop    =    Math.max(dt,    hNew);    	non-compiled	[CE]  	3	None	replace
97	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  dt);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator,  dt);	  loop    =    new    CombinedEquationsManager(interpolator,    hNew);    	non-compiled	[CE]  	62	None	replace
98	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  hNew,  dt);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  hNew,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator,  hNew,  dt);	  loop    =    new    CombinedEquationsManager(interpolator,    hNew);    	non-compiled	[CE]  ';'  expected	62	None	replace
99	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(hNew,  interpolator);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(hNew,  interpolator);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(hNew,  interpolator);	  loop    =    new    CombinedEquationsManager(interpolator,    hNew);    	non-compiled	[CE]  ';'  expected	62	None	replace
100	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(dt,  hNew);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(dt,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(dt,  hNew);	  loop    =    new    CombinedEquationsManager(interpolator,    hNew);    	non-compiled	[CE]  ';'  expected	62	None	replace
101	[BUG]  [BUGGY]  Looper  hNew  =(Looper)manager.evaluate(t0,  dt);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)manager.evaluate(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)manager.evaluate(t0,  dt);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    loop    =    false;    	non-compiled	[CE]  ';'  expected	36	None	replace
102	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  rki,  t0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  rki,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  rki,  t0);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    t0);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
103	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(dt,  t0,  stepSize);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(dt,  t0,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(dt,  t0,  stepSize);	  Loop    hNew    =    new    Loop(t0,    dt,    stepSize);    	non-compiled	[CE]  ';'  expected	82	None	replace
104	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  y);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  y);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  dt,  y);	  Loop    hNew    =    new    Loop(t0,    dt,    stepSize);    	non-compiled	[CE]  ';'  expected	82	None	replace
105	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  dt,  1);	  Loop    hNew    =    new    Loop(t0,    dt,    stepSize);    	non-compiled	[CE]  ';'  expected	82	None	replace
106	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  stepSize);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  y0,  stepSize);	  Loop    hNew    =    new    Loop(t0,    dt,    stepSize);    	non-compiled	[CE]  ';'  expected	82	None	replace
107	[BUG]  [BUGGY]  loop  =  Math.max(hNew,  dt);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(hNew,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(hNew,  dt);	  loop    =    dt;    	non-compiled	[CE]  ';'  expected	2	None	replace
108	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  rki);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  rki);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  ';'  expected	29	None	replace
109	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(interpolator,  dt);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(interpolator,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(interpolator,  dt);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  ';'  expected	29	None	replace
110	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  y);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  y);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  y);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  ';'  expected	29	None	replace
111	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  t);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  t);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  t);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  ';'  expected	29	None	replace
112	[BUG]  [BUGGY]  hNew  =  dt  +  error;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  dt  +  error;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  dt  +  error;	  hNew    =    dt    +    stepSize;    	non-compiled	[CE]  ';'  expected	45	None	replace
113	[BUG]  [BUGGY]  hNew  =  dt  +  stepSize  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  dt  +  stepSize  +  1;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  dt  +  stepSize  +  1;	  hNew    =    dt    +    stepSize;    	non-compiled	[CE]  ';'  expected	45	None	replace
114	[BUG]  [BUGGY]  hNew  =  Math.max(dt,  hNew  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(dt,  hNew  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(dt,  hNew  +  1);	  hNew    =    Math.max(dt,    hNew);    	non-compiled	[CE]  ';'  expected	30	None	replace
115	[BUG]  [BUGGY]  hNew  =  Math.max(dt,  hNew  +  stepSize);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(dt,  hNew  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(dt,  hNew  +  stepSize);	  hNew    =    Math.max(dt,    hNew);    	non-compiled	[CE]  ';'  expected	30	None	replace
116	[BUG]  [BUGGY]  int  hNew  =  Math.abs(dt);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  int  hNew  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	int  hNew  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    int    hNew    =    Math.abs(dt);    	non-compiled	[CE]  ';'  expected	19	None	replace
117	[BUG]  [BUGGY]  dtNew  =  Math.abs(dt);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  dtNew  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	dtNew  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    int    hNew    =    Math.abs(dt);    	non-compiled	[CE]  ';'  expected	19	None	replace
118	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  +  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  +  stepStart);	  hNew    =    Math.max(hNew,    dt    +    stepSize);    	non-compiled	[CE]  ';'  expected	31	None	replace
119	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt)-  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt)-  1;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt)-  1;	  hNew    =    Math.min(hNew,    dt)-    stepSize;    	non-compiled	[CE]  ';'  expected	76	None	replace
120	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt)-  dt;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt)-  dt;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt)-  dt;	  hNew    =    Math.min(hNew,    dt)-    stepSize;    	non-compiled	[CE]  ';'  expected	76	None	replace
121	[BUG]  [BUGGY]  loop  =  Math.abs(dt)/  stepSize;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt)/  stepSize;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt)/  stepSize;	  loop    =    Math.abs(dt)+    stepSize;    	non-compiled	[CE]  ';'  expected	40	None	replace
122	[BUG]  [BUGGY]  loop  =  Math.abs(dt)+  hNew;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt)+  hNew;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt)+  hNew;	  loop    =    Math.abs(dt)+    stepSize;    	non-compiled	[CE]  ';'  expected	40	None	replace
123	[BUG]  [BUGGY]  loop  =  Math.abs(dt)+  stepSize  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt)+  stepSize  +  1;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt)+  stepSize  +  1;	  loop    =    Math.abs(dt)+    stepSize;    	non-compiled	[CE]  ';'  expected	40	None	replace
124	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t,  l);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t,  l);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t,  l);	  Looper    hNew    =    interpolator.evaluateStep(dt,    l);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  l);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  l);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  l);	  Looper    hNew    =    interpolator.evaluateStep(dt,    l);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
126	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt,  l);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt,  l);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(dt,  l);	  Looper    hNew    =    interpolator.evaluateStep(dt,    l);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  -  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  -  dt);	  hNew    =    Math.min(hNew,    dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
128	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  stepSize);	  Looper    hNew    =    interfaces.evaluateStep(dt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
129	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  y0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  y0);	  Looper    hNew    =    interfaces.evaluateStep(dt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
130	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  stepSize);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
131	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  error);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  error);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  error);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
132	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(dt,  y0,  t0,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(dt,  y0,  t0,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(dt,  y0,  t0,  hNew);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
133	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y1,  dt,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y1,  dt,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(t0,  y1,  dt,  hNew);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
134	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(dt,  loop);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(dt,  loop);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(dt,  loop);	  Looper    hNew    =    manager.evaluateStep(loop,    dt);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
135	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(t0,  dt);	  Looper    hNew    =    manager.evaluateStep(loop,    dt);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
136	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(loop,  dt,  stepSize);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(loop,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(loop,  dt,  stepSize);	  Looper    hNew    =    manager.evaluateStep(loop,    dt);    	non-compiled	[CE]  ';'  expected	28	None	replace
137	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(rki,  dt);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(rki,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(rki,  dt);	  Looper    hNew    =    manager.evaluateStep(loop,    dt);    	non-compiled	[CE]  ';'  expected	28	None	replace
138	[BUG]  [BUGGY]  Looper  hNew  =  loopedStepInterpolator.evaluateStep(dt,  interpolator);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  loopedStepInterpolator.evaluateStep(dt,  interpolator);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  loopedStepInterpolator.evaluateStep(dt,  interpolator);	  Looper    hNew    =    interpolator.evaluateStep(dt,    loopedStepInterpolator);    	non-compiled	[CE]  ';'  expected	23	None	replace
139	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt)-  1;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt)-  1;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt)-  1;	  hNew    =    Math.max(hNew,    dt)-    stepSize;    	non-compiled	[CE]  ';'  expected	77	None	replace
140	[BUG]  [BUGGY]  hNew  =  Math.max(dt,  hNew)-  stepSize;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(dt,  hNew)-  stepSize;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(dt,  hNew)-  stepSize;	  hNew    =    Math.max(hNew,    dt)-    stepSize;    	non-compiled	[CE]  ';'  expected	77	None	replace
141	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  stepStart);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  +  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  +  stepStart);	  hNew    =    Math.abs(dt    +    stepSize);    	non-compiled	[CE]  ';'  expected	44	None	replace
142	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  1);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  +  1);	  hNew    =    Math.abs(dt    +    stepSize);    	non-compiled	[CE]  ';'  expected	44	None	replace
143	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  stepSize  +  1);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  +  stepSize  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  +  stepSize  +  1);	  hNew    =    Math.abs(dt    +    stepSize);    	non-compiled	[CE]  ';'  expected	44	None	replace
144	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  t1);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    	non-compiled	[CE]  ';'  expected	7	None	replace
145	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt  +  stepSize);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  dt  +  stepSize);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    	non-compiled	[CE]  	7	None	replace
146	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hNew,  dt);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hNew,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hNew,  dt);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    hNew);    	non-compiled	[CE]  	64	None	replace
147	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  stepSize);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  stepSize);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    hNew);    	non-compiled	[CE]  	64	None	replace
148	[BUG]  [BUGGY]  Loop  t  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hNew);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hNew);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    hNew);    	non-compiled	[CE]  ';'  expected	64	None	replace
149	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  t0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  t0);	  Looper    hNew    =    interpolator.evaluateStep(t0,    dt);    	non-compiled	[CE]  	25	None	replace
150	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  dt,  stepSize);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0,  dt,  stepSize);	  Looper    hNew    =    interpolator.evaluateStep(t0,    dt);    	non-compiled	[CE]  	25	None	replace
151	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  dt,  y);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  dt,  y);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0,  dt,  y);	  Looper    hNew    =    interpolator.evaluateStep(t0,    dt);    	non-compiled	[CE]  	25	None	replace
152	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  dt  +  stepSize);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0,  dt  +  stepSize);	  Looper    hNew    =    interpolator.evaluateStep(t0,    dt);    	non-compiled	[CE]  	25	None	replace
153	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt));  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt));  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt));	          hNew    =    Math.abs(dt);    hNew    =    Math.abs(dt));    	non-compiled	[CE]  	22	None	replace
154	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt));  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt));	          hNew    =    Math.abs(dt);    hNew    =    Math.abs(dt));    	non-compiled	[CE]  	22	None	replace
155	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y0,  rki);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y0,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  y0,  rki);	  Looper    hNew    =(Looper)super.evaluate(dt,    t0,    rki);    	non-compiled	[CE]  	46	None	replace
156	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0,  stepSize);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  t0,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(dt,    t0,    rki);    	non-compiled	[CE]  	46	None	replace
157	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize,  rki);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  stepSize,  rki);	  Looper    hNew    =(Looper)super.evaluate(dt,    t0,    rki);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
158	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluate(dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluate(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluate(dt);	  Looper    hNew    =    interpolator.evaluateStep(loopedStepInterpolator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
159	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt  +  stepSize);	  Looper    hNew    =    interpolator.evaluateStep(dt);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
160	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  y0,  rki);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  y0,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  y0,  rki);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
161	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    loop    =    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
162	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  loop  =  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  loop  =  true;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  loop  =  true;	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    loop    =    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
163	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  loop  =  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  loop  =  false;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  stepSize);  loop  =  false;	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    loop    =    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
164	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepStart);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepStart);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  stepStart);	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    loop    =    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
165	[BUG]  [BUGGY]  hNew  =  new  CombinedEquationsManager(interpolator.getEventTime(),  dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  new  CombinedEquationsManager(interpolator.getEventTime(),  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  new  CombinedEquationsManager(interpolator.getEventTime(),  dt);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    dt);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
166	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(manager.getEventTime(),  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(manager.getEventTime(),  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(manager.getEventTime(),  dt);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    dt);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
167	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(dt.getEventTime(),  interpolator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(dt.getEventTime(),  interpolator);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(dt.getEventTime(),  interpolator);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    dt);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
168	[BUG]  [BUGGY]  Looper  hNew  =  loopedStepInterpolator.evaluateStep(dt,  interfaces);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  loopedStepInterpolator.evaluateStep(dt,  interfaces);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  loopedStepInterpolator.evaluateStep(dt,  interfaces);	  Looper    hNew    =    interfaces.evaluateStep(dt,    loopedStepInterpolator);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
169	[BUG]  [BUGGY]  hNew  =  Math.ceil(hNew  +  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.ceil(hNew  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.ceil(hNew  +  stepSize);	  hNew    =    Math.floor(hNew    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
170	[BUG]  [BUGGY]  hNew  =  Math.log(hNew  +  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.log(hNew  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.log(hNew  +  stepSize);	  hNew    =    Math.floor(hNew    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
171	[BUG]  [BUGGY]  hNew  =  Math.floor(hNew  +  stepSize,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(hNew  +  stepSize,  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(hNew  +  stepSize,  dt);	  hNew    =    Math.floor(hNew    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
172	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  +  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  +  2);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  +  2);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
173	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt,  loop);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt,  loop);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(dt,  loop);	  Looper    hNew    =    interface.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
174	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(t0,  dt);	  Looper    hNew    =    interface.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
175	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(hNew);	  Loop    t    =    interfaces.get(rki);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
176	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(a);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(a);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(a);	  Loop    t    =    interfaces.get(rki);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
177	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(rki  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(rki  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(rki  +  stepSize);	  Loop    t    =    interfaces.get(rki);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
178	[BUG]  [BUGGY]  hNew  =  Math.max(dt,  hNew  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(dt,  hNew  -  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(dt,  hNew  -  1);	  hNew    =    Math.max(hNew,    dt    -    1);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
179	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  -  2);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  -  2);	  hNew    =    Math.max(hNew,    dt    -    1);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
180	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(dt);	  loop    =    new    CombinedEquationsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
181	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(hNew);	  loop    =    new    CombinedEquationsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
182	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(dt,  interpolator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(dt,  interpolator);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(dt,  interpolator);	  loop    =    new    CombinedEquationsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
183	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  error);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  error);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  error);	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
184	[BUG]  [BUGGY]  Looper  hNew  =(Looper)manager.evaluate(dt,  rki);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)manager.evaluate(dt,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)manager.evaluate(dt,  rki);	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
185	[BUG]  [BUGGY]  loop  =  Math.min(l,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(l,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(l,  dt);	  loop    =    Math.max(l,    dt);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
186	[BUG]  [BUGGY]  loop  =  Math.max(dt,  l);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(dt,  l);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(dt,  l);	  loop    =    Math.max(l,    dt);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
187	[BUG]  [BUGGY]  hNew  =  dt  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  dt  +  2;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  dt  +  2;	  hNew    =    dt    +    1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
188	[BUG]  [BUGGY]  hNew  =  dt  +  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  dt  +  3;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  dt  +  3;	  hNew    =    dt    +    1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
189	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(rki,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(rki,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(rki,  dt,  stepSize);	  Looper    hNew    =    loopedStepInterpolator.evaluateStep(interpolator,    dt,    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
190	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  +  stepStart);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  +  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  +  stepStart);	  hNew    =    Math.min(hNew,    dt    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
191	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  /  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  /  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  /  stepSize);	  hNew    =    Math.max(hNew,    dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
192	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  stepSize  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  -  stepSize  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  -  stepSize  +  1);	  hNew    =    Math.max(hNew,    dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
193	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(dt  +  stepSize);	  Loop    t    =    interfaces.get(dt);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
194	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(dt,  hNew);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(dt,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(dt,  hNew);	  Loop    t    =    interfaces.get(dt);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
195	[BUG]  [BUGGY]  Loop  t  =  interpolator.get(dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interpolator.get(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interpolator.get(dt);	  Loop    t    =    interfaces.get(dt);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
196	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluate(dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluate(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluate(dt);	  Looper    hNew    =    interfaces.evaluateStep(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
197	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  error);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  -  error);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  -  error);	  hNew    =    Math.min(hNew,    dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
198	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  -  stepStart);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  -  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  -  stepStart);	  hNew    =    Math.min(hNew,    dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
199	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0);	  Looper    hNew    =    interpolator.evaluateStep(loopedStep);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
200	[BUG]  [BUGGY]  Looper  hNew  =  interceptor.evaluateStep(dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interceptor.evaluateStep(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interceptor.evaluateStep(dt);	  Looper    hNew    =    interpolator.evaluateStep(loopedStep);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
201	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  /  stepSize);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  /  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  /  stepSize);	  hNew    =    Math.abs(dt    -    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
202	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt)-  dt;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt)-  dt;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt)-  dt;	  hNew    =    Math.max(hNew,    dt)-    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
203	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(rki,  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(rki,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(rki,  dt);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
204	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  t0  +  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  t0  +  stepStart);	  hNew    =    Math.max(hNew,    t0    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
205	[BUG]  [BUGGY]  loop  =  t0  +  stepSize;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  t0  +  stepSize;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  t0  +  stepSize;	  loop    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
206	[BUG]  [BUGGY]  loop  =  Math.max(t0,  hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(t0,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(t0,  hNew);	  loop    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
207	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt,  stepStart);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt,  stepStart);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  dt,  stepStart);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
208	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0);  loop  =  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  t0);  loop  =  false;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  t0);  loop  =  false;	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    loop    =    false;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
209	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  stepStart);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  stepStart);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  dt,  stepStart);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
210	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(t0,  y0,  hNew,  dt);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
211	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(hNew,  y0,  dt,  t0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(hNew,  y0,  dt,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(hNew,  y0,  dt,  t0);	  loop    =    new    CombinedEquationsManager(t0,    y0,    dt,    hNew);    	non-compiled	[CE]  	72	None	replace
212	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  manager);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  manager);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  manager);	  Looper    hNew    =    interpolator.evaluateStep(manager,    dt);    	non-compiled	[CE]  	27	None	replace
213	[BUG]  [BUGGY]  loop  =  Math.abs(dt  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(dt  -  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(dt  -  1);	  loop    =    Math.abs(dt);    	non-compiled	[CE]  	4	None	replace
214	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepStart);  loop  =  true;  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  stepStart);  loop  =  true;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  stepStart);  loop  =  true;	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    loop    =    true;    	non-compiled	[CE]  	35	None	replace
215	[BUG]  [BUGGY]  Looper  l  =  new  Looper(hNew  +  stepSize);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(hNew  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(hNew  +  stepSize);	  Looper    l    =    new    Looper(hNew);    	non-compiled	[CE]  	33	None	replace
216	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  error);  [CE]  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  +  error);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  +  error);	  hNew    =    Math.abs(dt    +    stepSize);    	non-compiled	[CE]  	44	None	replace
217	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(t0,  y0);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(t0,  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(t0,  y0);	  Looper    hNew    =    interfaces.evaluateStep(loop);    	non-compiled	[CE]  	52	None	replace
218	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(t,  dt);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(t,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(t,  dt);	  Looper    hNew    =    interfaces.evaluateStep(dt,    dt);    	non-compiled	[CE]  	86	None	replace
219	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(manager.getEventTime(),  hNew);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(manager.getEventTime(),  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(manager.getEventTime(),  hNew);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    hNew);    	non-compiled	[CE]  	64	None	replace
220	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  y0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  y0);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    hNew);    	non-compiled	[CE]  	64	None	replace
221	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt,  t0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt,  t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt,  t0);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    t0);    	non-compiled	[CE]  	47	None	replace
222	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  y0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0,  y0);	  Looper    hNew    =    interpolator.evaluateStep(t0,    dt);    	non-compiled	[CE]  	25	None	replace
223	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  *  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  *  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  *  1);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  	32	None	replace
224	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  error);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  -  error);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  -  error);	  hNew    =    Math.max(hNew,    dt    -    stepSize);    	non-compiled	[CE]  	75	None	replace
225	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  dt);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  -  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  -  dt);	  hNew    =    Math.max(hNew,    dt    -    stepSize);    	non-compiled	[CE]  	75	None	replace
226	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  -  stepStart);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  -  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  -  stepStart);	  hNew    =    Math.max(hNew,    dt    -    stepSize);    	non-compiled	[CE]  	75	None	replace
227	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  dt,  stepSize);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  dt,  stepSize);	  Looper    hNew    =    loopedStepInterpolator.evaluateStep(interpolator,    dt,    stepSize);    	non-compiled	[CE]  	87	None	replace
228	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(t,  dt);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(t,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(t,  dt);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  	74	None	replace
229	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt  -  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  dt  -  1);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    	non-compiled	[CE]  	7	None	replace
230	[BUG]  [BUGGY]  hNew  =  Math.floor(hNew  +  2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(hNew  +  2);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(hNew  +  2);	  hNew    =    Math.floor(hNew    +    1);    	non-compiled	[CE]  	70	None	replace
231	[BUG]  [BUGGY]  hNew  =  Math.floor(hNew  +  3);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(hNew  +  3);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(hNew  +  3);	  hNew    =    Math.floor(hNew    +    1);    	non-compiled	[CE]  	70	None	replace
232	[BUG]  [BUGGY]  loop  =  Math.max(l,  dt  +  stepSize);  [CE]  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(l,  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(l,  dt  +  stepSize);	  loop    =    Math.max(l,    dt);    	non-compiled	[CE]  	41	None	replace
233	[BUG]  [BUGGY]  loop  =  new  Double(dt  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  Double(dt  -  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  Double(dt  -  1);	  loop    =    new    Double(dt);    	non-compiled	[CE]  	78	None	replace
234	[BUG]  [BUGGY]  loop  =  new  Double(dt  +  hNew);  [CE]  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  Double(dt  +  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  Double(dt  +  hNew);	  loop    =    new    Double(dt);    	non-compiled	[CE]  	78	None	replace
235	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(y0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(y0);	  Loop    t    =    interfaces.get(rki);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
236	[BUG]  [BUGGY]  loop  =  Math.max(len,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(len,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(len,  hNew);	  loop    =    Math.max(dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
237	[BUG]  [BUGGY]  hNew  =  Math.abs(dt)-  error  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt)-  error  +  1;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt)-  error  +  1;	  hNew    =    Math.abs(dt)-    error;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
238	[BUG]  [BUGGY]  Loop  t  =  interfaces.step();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.step();  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.step();	  Loop    t    =    loop.step();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
239	[BUG]  [BUGGY]  Loop  t  =  interface.step();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interface.step();  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interface.step();	  Loop    t    =    loop.step();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
240	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt)-  error;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt)-  error;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt)-  error;	  hNew    =    Math.min(hNew,    dt)-    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
241	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(l,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(l,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(l,  dt);	  Looper    hNew    =(Looper)super.evaluate(rt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
242	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  +  stepSize  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  +  stepSize  -  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  +  stepSize  -  1);	  hNew    =    Math.min(hNew,    dt    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
243	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  l);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(t0,  l);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(t0,  l);	  Looper    hNew    =    interpolator.evaluateStep(dt,    l);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
244	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  y0,  dt);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  y0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  y0,  dt);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
245	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t1,  dt);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t1,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  t1,  dt);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
246	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t,  dt);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  t,  dt);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
247	[BUG]  [BUGGY]  loop  =  Math.max(loopSize,  hNew);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(loopSize,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(loopSize,  hNew);	  loop    =    hNew;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
248	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(t,  dt);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(t,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(t,  dt);	  Looper    hNew    =    manager.evaluateStep(loop,    dt);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
249	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  stepStart);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  stepStart);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  dt,  stepStart);	  Loop    hNew    =    new    Loop(t0,    dt,    stepSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
250	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  t  +  stepSize);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  y0,  t  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  y0,  t  +  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
251	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  stepStart,  y,  t  +  stepSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  stepStart,  y,  t  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  stepStart,  y,  t  +  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
252	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt  -  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt  -  1);	  Looper    hNew    =(Looper)super.evaluate(y0,    dt);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
253	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt  +  stepSize);	  Looper    hNew    =(Looper)super.evaluate(y0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
254	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(dt,  stepSize);	  Looper    hNew    =    interpolator.evaluateStep(dt);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
255	[BUG]  [BUGGY]  Looper  hNew  =  interfaceInterpolator.evaluateStep(t0,  dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaceInterpolator.evaluateStep(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaceInterpolator.evaluateStep(t0,  dt);	  Looper    hNew    =    interfaceInterpolator.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
256	[BUG]  [BUGGY]  hNew  =  dt  +  stepStart;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  dt  +  stepStart;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  dt  +  stepStart;	  hNew    =    dt    +    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
257	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  hSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  hSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator,  hSize);	  loop    =    new    CombinedEquationsManager(interpolator,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
258	[BUG]  [BUGGY]  hNew  =  Math.floor(hNew  +  dt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(hNew  +  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(hNew  +  dt);	  hNew    =    Math.floor(hNew    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
259	[BUG]  [BUGGY]  hNew  =  Math.floor(hNew  +  stepStart);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.floor(hNew  +  stepStart);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.floor(hNew  +  stepStart);	  hNew    =    Math.floor(hNew    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
260	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(dt  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(dt  -  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(dt  -  1);	  Loop    t    =    interfaces.get(dt);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
261	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(dt  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(dt  +  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(dt  +  1);	  Loop    t    =    interfaces.get(dt);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
262	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  hNew  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(t0,  hNew  +  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(t0,  hNew  +  1);	  hNew    =    Math.max(t0,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
263	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(t0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(t0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(t0);	  Looper    hNew    =    interface.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
264	[BUG]  [BUGGY]  Looper  hNew  =  interface.evaluateStep(rki);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interface.evaluateStep(rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interface.evaluateStep(rki);	  Looper    hNew    =    interface.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
265	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(rki,  dt,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(rki,  dt,  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(rki,  dt,  1);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
266	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt);  dt  =  Math.abs(hNew);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt);  dt  =  Math.abs(hNew);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt);  dt  =  Math.abs(hNew);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
267	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt);  dt  =  Math.abs(hNew);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt);  dt  =  Math.abs(hNew);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt);  dt  =  Math.abs(hNew);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
268	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  stepSize);  dt  =  Math.abs(dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  +  stepSize);  dt  =  Math.abs(dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  +  stepSize);  dt  =  Math.abs(dt);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
269	[BUG]  [BUGGY]  hNew  =  Math.abs(dt);  hNew  =  Math.abs(hNew);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt);  hNew  =  Math.abs(hNew);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt);  hNew  =  Math.abs(hNew);	          hNew    =    Math.abs(dt);    dt    =    Math.abs(dt);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
270	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  step);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  step);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  step);	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
271	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getStep(),  dt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getStep(),  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getStep(),  dt);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    dt);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
272	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getCurrentEventTime(),  dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getCurrentEventTime(),  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getCurrentEventTime(),  dt);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    dt);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
273	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(interpolator);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(interpolator);	  Looper    hNew    =    interpolator.evaluateStep(loopedStepInterpolator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
274	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  a);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  a);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator,  a);	  loop    =    new    CombinedEquationsManager(interpolator);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
275	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt  /  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt  /  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt  /  1);	  hNew    =    Math.min(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
276	[BUG]  [BUGGY]  hNew  =  Math.max(t0,  hNew  +  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(t0,  hNew  +  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(t0,  hNew  +  stepSize);	  hNew    =    Math.max(hNew,    t0    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
277	[BUG]  [BUGGY]  loop  =  Math.max(loop,  hNew);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(loop,  hNew);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(loop,  hNew);	  loop    =    Math.max(dt,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
278	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  dt,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(rki,    dt,    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
279	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  dt  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(hNew,  dt  -  1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(hNew,  dt  -  1);	  loop    =    Math.min(hNew,    dt);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
280	[BUG]  [BUGGY]  loop  =  Math.min(hNew,  dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.min(hNew,  dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.min(hNew,  dt  -  stepSize);	  loop    =    Math.min(hNew,    dt);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
281	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt);  loop  =  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt);  loop  =  false;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt);  loop  =  false;	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    loop    =    false;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
282	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateLoop(dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateLoop(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateLoop(dt);	  Looper    hNew    =    interpolator.evaluateStep(dt);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
283	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(stepSize);	  Loop    t    =    interfaces.get(rki);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
284	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y1,  rki);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(dt,  y1,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(dt,  y1,  rki);	  Looper    hNew    =(Looper)super.evaluate(dt,    t0,    rki);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
285	[BUG]  [BUGGY]  Looper  hNew  =  loopedStepInterpolator.evaluateStep(interpolator,  dt,  stepStart);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  loopedStepInterpolator.evaluateStep(interpolator,  dt,  stepStart);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  loopedStepInterpolator.evaluateStep(interpolator,  dt,  stepStart);	  Looper    hNew    =    loopedStepInterpolator.evaluateStep(interpolator,    dt,    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
286	[BUG]  [BUGGY]  Looper  hNew  =  loop.evaluateStep(interpolator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  loop.evaluateStep(interpolator);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  loop.evaluateStep(interpolator);	  Looper    hNew    =    interfaceInterpolator.evaluateStep(loop);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
287	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  manager);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  manager);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  manager);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
288	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(manager,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(manager,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(manager,  dt,  stepSize);	  Looper    hNew    =    interfaces.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
289	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  c);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  c);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  c);	  Looper    hNew    =    interpolator.evaluateStep(dt,    loopedStepInterpolator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
290	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t0,  dt,  stepSize);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t0,  dt,  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  t0,  dt,  stepSize);	  Looper    hNew    =(Looper)super.evaluate(y0,    t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
291	[BUG]  [BUGGY]  Looper  l  =  new  Looper(hSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(hSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(hSize);	  Looper    l    =    new    Looper();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
292	[BUG]  [BUGGY]  Looper  l  =  new  Looper(stepSize);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  l  =  new  Looper(stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  l  =  new  Looper(stepSize);	  Looper    l    =    new    Looper();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
293	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(step);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(step);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(step);	  Looper    hNew    =    interpolator.evaluateStep(loopedStep);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
294	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(y0,  t0,  t  +  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(y0,  t0,  t  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(y0,  t0,  t  +  stepSize);	  Loop    hNew    =    new    Loop(t0,    t0,    y,    t    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
295	[BUG]  [BUGGY]  Loop  t  =  interfaces.get(dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  t  =  interfaces.get(dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  t  =  interfaces.get(dt  -  stepSize);	  Loop    t    =    interfaces.get(dt);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
296	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(loop,  dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(loop,  dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(loop,  dt  -  stepSize);	  Looper    hNew    =    manager.evaluateStep(loop,    dt);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
297	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  dt  -  stepSize);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
298	[BUG]  [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  y.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Loop  hNew  =  new  Loop(t0,  dt,  y.length);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Loop  hNew  =  new  Loop(t0,  dt,  y.length);	  Loop    hNew    =    new    Loop(t0,    dt,    stepSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
299	[BUG]  [BUGGY]  hNew  =  Math.abs(dt)+  stepSize;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt)+  stepSize;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt)+  stepSize;	  loop    =    Math.abs(dt)+    stepSize;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
300	[BUG]  [BUGGY]  loop  =  Math.abs(hNew)+  stepSize;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.abs(hNew)+  stepSize;  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.abs(hNew)+  stepSize;	  loop    =    Math.abs(dt)+    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
301	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  dt  +  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  dt  +  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  dt  +  stepSize);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    dt);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
302	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  *  stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  *  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  *  stepSize);	  hNew    =    Math.max(hNew,    dt    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
303	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  c);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  c);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  c);	  Looper    hNew    =    interfaces.evaluateStep(dt,    loopedStepInterpolator);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
304	[BUG]  [BUGGY]  int  hNew  =  Math.min(dt,  hNew);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  int  hNew  =  Math.min(dt,  hNew);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	int  hNew  =  Math.min(dt,  hNew);	          hNew    =    Math.abs(dt);    int    hNew    =    Math.min(dt);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
305	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  y0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator,  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator,  y0);	  loop    =    new    CombinedEquationsManager(interpolator,    hNew);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
306	[BUG]  [BUGGY]  loop  =  Math.max(t0,  dt);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.max(t0,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.max(t0,  dt);	  loop    =    t0;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
307	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  y1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(dt,  y1);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(dt,  y1);	  Looper    hNew    =    interfaces.evaluateStep(dt,    dt);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
308	[BUG]  [BUGGY]  hNew  =  Math.abs(dt)/  3;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt)/  3;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt)/  3;	  hNew    =    Math.abs(dt)/    stepSize;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
309	[BUG]  [BUGGY]  hNew  =  Math.min(mapping,  dt);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(mapping,  dt);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(mapping,  dt);	          hNew    =    Math.abs(dt);    hNew    =    Math.min(dt);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
310	[BUG]  [BUGGY]  hNew  =  Math.min(hNew,  dt)-  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.min(hNew,  dt)-  2;  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.min(hNew,  dt)-  2;	  hNew    =    Math.abs(dt)-    2;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
311	[BUG]  [BUGGY]  Looper  hNew  =  loop.evaluateStep(manager,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  loop.evaluateStep(manager,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  loop.evaluateStep(manager,  dt);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
312	[BUG]  [BUGGY]  Looper  hNew  =  handler.evaluateStep(dt,  a);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  handler.evaluateStep(dt,  a);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  handler.evaluateStep(dt,  a);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
313	[BUG]  [BUGGY]  Looper  hNew  =  manager.evaluateStep(dt);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  manager.evaluateStep(dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  manager.evaluateStep(dt);	  Looper    hNew    =    handler.evaluateStep(manager,    dt);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
314	[BUG]  [BUGGY]  loop  =  Math.pow(10,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  Math.pow(10,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  Math.pow(10,  dt);	  loop    =    dt;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
315	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t,  rki);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  t,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  t,  rki);	  Looper    hNew    =(Looper)super.evaluate(t0,    dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
316	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  rki);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(t0,  rki);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(t0,  rki);	  Looper    hNew    =(Looper)super.evaluate(dt,    rki);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
317	[BUG]  [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  y0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interpolator.evaluateStep(dt,  y0);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interpolator.evaluateStep(dt,  y0);	  Looper    hNew    =    interpolator.evaluateStep(dt,    l);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
318	[BUG]  [BUGGY]  hNew  =  Math.max(l,  dt);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(l,  dt);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(l,  dt);	  loop    =    Math.max(l,    dt);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
319	[BUG]  [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	loop  =  new  CombinedEquationsManager(interpolator.getEventTime(),  hSize);	  loop    =    new    CombinedEquationsManager(interpolator.getEventTime(),    hNew);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
320	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  *  stepSize);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  *  stepSize);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  *  stepSize);	  hNew    =    Math.abs(dt    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
321	[BUG]  [BUGGY]  hNew  =  Math.abs(dt  +  stepSize  -  1);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.abs(dt  +  stepSize  -  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.abs(dt  +  stepSize  -  1);	  hNew    =    Math.abs(dt    +    stepSize);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
322	[BUG]  [BUGGY]  hNew  =  Math.max(hNew,  dt  /  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  hNew  =  Math.max(hNew,  dt  /  1);  [BUGGY]      loop  =  false;  }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	hNew  =  Math.max(hNew,  dt  /  1);	  hNew    =    Math.max(hNew,    dt    +    1);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
323	[BUG]  [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(stepSize);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =  interfaces.evaluateStep(stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =  interfaces.evaluateStep(stepSize);	  Looper    hNew    =    interfaces.evaluateStep(loopedStepInterpolator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
324	[BUG]  [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt  -  stepSize);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {            [BUGGY]  Looper  hNew  =(Looper)super.evaluate(y0,  dt  -  stepSize);  [BUGGY]      }  else  {  hNew  =  dt;  }  }  else  {  loop  =  false;  }  }  else  {  [CLASS]  EmbeddedRungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  firstTime  forward  fsal  lastStep  loop  nextIsLast  CombinedEventsManager  manager  double[]  b  c  scale  vecAbsoluteTolerance  vecRelativeTolerance  y  y0  yTmp  double  dt  error  exp  factor  hNew  maxGrowth  maxStep  minReduction  minStep  nextStep  nextT  safety  scalAbsoluteTolerance  scalRelativeTolerance  scaledH  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java	0.7071067811865475	300	300	2	replace	Looper  hNew  =(Looper)super.evaluate(y0,  dt  -  stepSize);	  Looper    hNew    =(Looper)super.evaluate(y0,    dt);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
