projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(yTmp,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(yTmp,yDotK[stages-1],rki);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(yTmp,yDotK[stages-1],a);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(yTmp,yDotK[stages-1],prototype);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(y0,yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123StageHandlerhandler=prototype.getStepHandler();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123StageHandlerhandler=prototype.getRangeHandler();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123yDotK[stages-1],forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123StageHandlerhandler=prototype.getStandardStepInterpolator();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123StageHandlerhandler=prototype.getStandardStepHandler();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(yTmp,yDotK[stages-1],dt);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123if(stages>0){for(inti=0;i<stages;i++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)stages.get(i);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123if(stages>0){for(inti=0;i<stages;i++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)stages.get(i);y
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123if(stages>0){for(inti=0;i<stages;i++){finalRungeKuttaStepInterpolatorrki=(RungeKuttaStepInterpolator)prototype.copy();
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123interpolator=newDummyStepInterpolator(yTmp,yDotK[stages-1],c);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123((RungeKuttaStepInterpolator)prototype).reinitialize(this,yTmp,yDotK,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123((RungeKuttaStepInterpolator)prototype).reinitialize(this,yTmp,yDotK,forward);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123((RungeKuttaStepInterpolator)rki).reinitialize(this,yTmp,yDotK,stages-1);
projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java123((RungeKuttaStepInterpolator)rki).reinitialize(this,yTmp,yDotK,forward);
