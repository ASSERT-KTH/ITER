bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  interpolator.getEventTime()  -  stepStart;  [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interpolator.getEventTime()  -  stepStart;	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
2	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stepStart;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  /  stepStart;  [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  /  stepStart;	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
3	[BUG]  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepStart;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  interface.getEventTime()  -  stepStart;  [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  interface.getEventTime()  -  stepStart;	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
4	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stepStart;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  *  stepStart;  [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  *  stepStart;	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	  	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
6	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
7	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yTmp[l][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
8	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];		non-compiled	[CE]  illegal  start  of  expression	80	None	add
9	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yDotK[0][j];  for(int  i  =  1;  i  <  stages;  ++i)  {  sum+=  b[l]  *  yDotK[l][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
10	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
11	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yTmp[0];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
12	[BUG]  [BUGGY]    double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    double  stepSize  =  b[0]  *  yTmp[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];		non-compiled	[CE]  illegal  start  of  expression	80	None	add
13	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  1;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  1;  [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  1;	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
14	[BUG]  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stage;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stage;  [BUGGY]  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	final  double  dt  =  manager.getEventTime()  -  stage;	final  double  dt  =  manager.getEventTime()  -  stepStart;  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
15	[BUG]  [BUGGY]    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stages;  ++l)		non-compiled	[CE]  illegal  start  of  expression	80	None	add
16	[BUG]  [BUGGY]    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  for(int  l  =  1;  l  <  stage;  ++l)		non-compiled	[CE]  illegal  start  of  expression	80	None	add
17	[BUG]  [BUGGY]    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    if(steps!=  null)  {  for(int  stepStart  =  1;  stepStart  <  b.length;  stepSize++)  {  sum  +=  b[0]  *  yDotK[0][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
18	[BUG]  [BUGGY]    if(steps  ==  null)  {  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    if(steps  ==  null)  {  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    if(steps  ==  null)  {  for(int  step  =  1;  step  <  l;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
19	[BUG]  [BUGGY]    if(steps  ==  null)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  double  sum=  b[0]  *  yDotK[0][j];  for  (int  l  =  1;  l  <  stages;  ++l)  {  sum+=  b[l]  *  yDotK[l][j];  }  yTmp[j]  =  y[j]  +  stepSize  *  sum;  }  interpolator.storeTime(stepStart  +  stepSize);  if  (manager.evaluateStep(interpolator))  {  [BUGGY]    if(steps  ==  null)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }  [BUGGY]  final  double  dt  =  manager.getEventTime()  -  stepStart;  if  (Math.abs(dt)  <=  Math.ulp(stepStart))  {      loop  =  false;  }  else  {  stepSize  =  dt;  [CLASS]  RungeKuttaIntegrator  [METHOD]  integrate  [RETURN_TYPE]  double  FirstOrderDifferentialEquations  equations  final  double  t0  final  double[]  y0  final  double  t  final  double[]  y  [VARIABLES]  boolean  forward  lastStep  loop  CombinedEventsManager  manager  double[]  b  c  y  y0  yTmp  double  dt  nextStep  step  stopTime  sum  t  t0  double[][]  a  yDotK  AbstractStepInterpolator  interpolator  StepHandler  handler  RungeKuttaStepInterpolator  prototype  rki  int  i  j  k  l  stages  FirstOrderDifferentialEquations  equations  	projects/Math71/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java	0.2672612419124244	173	173	2	replace	    if(steps  ==  null)  {  for(int  step  =  1;  step  <  0;  step++)  {  sum  +=  b[0]  *  yDotK[0][j];  }		non-compiled	[CE]  illegal  start  of  expression	80	None	add
